-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2015.4
-- Copyright (C) 2015 Xilinx Inc. All rights reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity master_ip_mainFunction is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    ap_ce : IN STD_LOGIC;
    uart_to_coordinates_count_V_i : IN STD_LOGIC_VECTOR (15 downto 0);
    uart_to_coordinates_count_V_o : OUT STD_LOGIC_VECTOR (15 downto 0);
    uart_to_coordinates_count_V_o_ap_vld : OUT STD_LOGIC;
    uart_to_coordinates_previous_input_V_i : IN STD_LOGIC_VECTOR (0 downto 0);
    uart_to_coordinates_previous_input_V_o : OUT STD_LOGIC_VECTOR (0 downto 0);
    uart_to_coordinates_previous_input_V_o_ap_vld : OUT STD_LOGIC;
    uart_to_coordinates_uart_state_V_i : IN STD_LOGIC_VECTOR (3 downto 0);
    uart_to_coordinates_uart_state_V_o : OUT STD_LOGIC_VECTOR (3 downto 0);
    uart_to_coordinates_uart_state_V_o_ap_vld : OUT STD_LOGIC;
    uart_to_coordinates_next_out_byte_V_i : IN STD_LOGIC_VECTOR (7 downto 0);
    uart_to_coordinates_next_out_byte_V_o : OUT STD_LOGIC_VECTOR (7 downto 0);
    uart_to_coordinates_next_out_byte_V_o_ap_vld : OUT STD_LOGIC;
    uart_to_coordinates_current_out_byte_V_read : IN STD_LOGIC_VECTOR (7 downto 0);
    uart_to_coordinates_gnss_state_V_read : IN STD_LOGIC_VECTOR (5 downto 0);
    uart_to_coordinates_ck_a_V_read : IN STD_LOGIC_VECTOR (7 downto 0);
    uart_to_coordinates_ck_b_V_read : IN STD_LOGIC_VECTOR (7 downto 0);
    uart_to_coordinates_tempCoordinates_0_i : IN STD_LOGIC_VECTOR (31 downto 0);
    uart_to_coordinates_tempCoordinates_0_o : OUT STD_LOGIC_VECTOR (31 downto 0);
    uart_to_coordinates_tempCoordinates_0_o_ap_vld : OUT STD_LOGIC;
    uart_to_coordinates_tempCoordinates_1_i : IN STD_LOGIC_VECTOR (31 downto 0);
    uart_to_coordinates_tempCoordinates_1_o : OUT STD_LOGIC_VECTOR (31 downto 0);
    uart_to_coordinates_tempCoordinates_1_o_ap_vld : OUT STD_LOGIC;
    uart_to_coordinates_tempCoordinates_2_i : IN STD_LOGIC_VECTOR (31 downto 0);
    uart_to_coordinates_tempCoordinates_2_o : OUT STD_LOGIC_VECTOR (31 downto 0);
    uart_to_coordinates_tempCoordinates_2_o_ap_vld : OUT STD_LOGIC;
    input_V_read : IN STD_LOGIC_VECTOR (0 downto 0);
    p_read : IN STD_LOGIC_VECTOR (31 downto 0);
    p_read2 : IN STD_LOGIC_VECTOR (31 downto 0);
    p_read5 : IN STD_LOGIC_VECTOR (31 downto 0);
    ap_return_0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    ap_return_1 : OUT STD_LOGIC_VECTOR (7 downto 0);
    ap_return_2 : OUT STD_LOGIC_VECTOR (7 downto 0);
    ap_return_3 : OUT STD_LOGIC_VECTOR (5 downto 0);
    ap_return_4 : OUT STD_LOGIC_VECTOR (31 downto 0);
    ap_return_5 : OUT STD_LOGIC_VECTOR (31 downto 0);
    ap_return_6 : OUT STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of master_ip_mainFunction is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_pp0_stg0_fsm_0 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv6_39 : STD_LOGIC_VECTOR (5 downto 0) := "111001";
    constant ap_const_lv6_3C : STD_LOGIC_VECTOR (5 downto 0) := "111100";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv6_3F : STD_LOGIC_VECTOR (5 downto 0) := "111111";
    constant ap_const_lv6_3E : STD_LOGIC_VECTOR (5 downto 0) := "111110";
    constant ap_const_lv6_3D : STD_LOGIC_VECTOR (5 downto 0) := "111101";
    constant ap_const_lv6_3B : STD_LOGIC_VECTOR (5 downto 0) := "111011";
    constant ap_const_lv6_3A : STD_LOGIC_VECTOR (5 downto 0) := "111010";
    constant ap_const_lv6_1 : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    constant ap_const_lv6_0 : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    constant ap_true : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (0 downto 0) := "1";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_sig_cseq_ST_pp0_stg0_fsm_0 : STD_LOGIC;
    signal ap_sig_bdd_19 : BOOLEAN;
    signal ap_reg_ppiten_pp0_it0 : STD_LOGIC;
    signal ap_reg_ppiten_pp0_it1 : STD_LOGIC := '0';
    signal tmp_fu_203_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_reg_453 : STD_LOGIC_VECTOR (0 downto 0);
    signal uart_to_coordinates_current_ou_reg_457 : STD_LOGIC_VECTOR (7 downto 0);
    signal uart_to_coordinates_ck_a_V_1_i_fu_348_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal uart_to_coordinates_ck_a_V_1_i_reg_462 : STD_LOGIC_VECTOR (7 downto 0);
    signal uart_to_coordinates_ck_b_V_1_i_fu_357_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal uart_to_coordinates_ck_b_V_1_i_reg_467 : STD_LOGIC_VECTOR (7 downto 0);
    signal call_ret2_reg_472 : STD_LOGIC_VECTOR (5 downto 0);
    signal coordinates_0_ret_reg_477 : STD_LOGIC_VECTOR (31 downto 0);
    signal coordinates_1_ret_reg_482 : STD_LOGIC_VECTOR (31 downto 0);
    signal coordinates_2_ret_reg_487 : STD_LOGIC_VECTOR (31 downto 0);
    signal call_ret5_master_ip_get_gps_info_from_ubx_fu_166_uart_to_coordinates_current_out_byte_V_read : STD_LOGIC_VECTOR (7 downto 0);
    signal call_ret5_master_ip_get_gps_info_from_ubx_fu_166_uart_to_coordinates_gnss_state_V_read : STD_LOGIC_VECTOR (5 downto 0);
    signal call_ret5_master_ip_get_gps_info_from_ubx_fu_166_uart_to_coordinates_ck_a_V_read : STD_LOGIC_VECTOR (7 downto 0);
    signal call_ret5_master_ip_get_gps_info_from_ubx_fu_166_uart_to_coordinates_ck_b_V_read : STD_LOGIC_VECTOR (7 downto 0);
    signal call_ret5_master_ip_get_gps_info_from_ubx_fu_166_uart_to_coordinates_tempCoordinates_0_i : STD_LOGIC_VECTOR (31 downto 0);
    signal call_ret5_master_ip_get_gps_info_from_ubx_fu_166_uart_to_coordinates_tempCoordinates_0_o : STD_LOGIC_VECTOR (31 downto 0);
    signal call_ret5_master_ip_get_gps_info_from_ubx_fu_166_uart_to_coordinates_tempCoordinates_0_o_ap_vld : STD_LOGIC;
    signal call_ret5_master_ip_get_gps_info_from_ubx_fu_166_uart_to_coordinates_tempCoordinates_1_i : STD_LOGIC_VECTOR (31 downto 0);
    signal call_ret5_master_ip_get_gps_info_from_ubx_fu_166_uart_to_coordinates_tempCoordinates_1_o : STD_LOGIC_VECTOR (31 downto 0);
    signal call_ret5_master_ip_get_gps_info_from_ubx_fu_166_uart_to_coordinates_tempCoordinates_1_o_ap_vld : STD_LOGIC;
    signal call_ret5_master_ip_get_gps_info_from_ubx_fu_166_uart_to_coordinates_tempCoordinates_2_i : STD_LOGIC_VECTOR (31 downto 0);
    signal call_ret5_master_ip_get_gps_info_from_ubx_fu_166_uart_to_coordinates_tempCoordinates_2_o : STD_LOGIC_VECTOR (31 downto 0);
    signal call_ret5_master_ip_get_gps_info_from_ubx_fu_166_uart_to_coordinates_tempCoordinates_2_o_ap_vld : STD_LOGIC;
    signal call_ret5_master_ip_get_gps_info_from_ubx_fu_166_p_read1 : STD_LOGIC_VECTOR (31 downto 0);
    signal call_ret5_master_ip_get_gps_info_from_ubx_fu_166_p_read4 : STD_LOGIC_VECTOR (31 downto 0);
    signal call_ret5_master_ip_get_gps_info_from_ubx_fu_166_p_read5 : STD_LOGIC_VECTOR (31 downto 0);
    signal call_ret5_master_ip_get_gps_info_from_ubx_fu_166_ap_return_0 : STD_LOGIC_VECTOR (5 downto 0);
    signal call_ret5_master_ip_get_gps_info_from_ubx_fu_166_ap_return_1 : STD_LOGIC_VECTOR (31 downto 0);
    signal call_ret5_master_ip_get_gps_info_from_ubx_fu_166_ap_return_2 : STD_LOGIC_VECTOR (31 downto 0);
    signal call_ret5_master_ip_get_gps_info_from_ubx_fu_166_ap_return_3 : STD_LOGIC_VECTOR (31 downto 0);
    signal call_ret6_master_ip_uart_to_byte_fu_187_uart_to_coordinates_count_V_i : STD_LOGIC_VECTOR (15 downto 0);
    signal call_ret6_master_ip_uart_to_byte_fu_187_uart_to_coordinates_count_V_o : STD_LOGIC_VECTOR (15 downto 0);
    signal call_ret6_master_ip_uart_to_byte_fu_187_uart_to_coordinates_count_V_o_ap_vld : STD_LOGIC;
    signal call_ret6_master_ip_uart_to_byte_fu_187_uart_to_coordinates_previous_input_V_i : STD_LOGIC_VECTOR (0 downto 0);
    signal call_ret6_master_ip_uart_to_byte_fu_187_uart_to_coordinates_previous_input_V_o : STD_LOGIC_VECTOR (0 downto 0);
    signal call_ret6_master_ip_uart_to_byte_fu_187_uart_to_coordinates_previous_input_V_o_ap_vld : STD_LOGIC;
    signal call_ret6_master_ip_uart_to_byte_fu_187_uart_to_coordinates_current_input_V_read : STD_LOGIC_VECTOR (0 downto 0);
    signal call_ret6_master_ip_uart_to_byte_fu_187_uart_to_coordinates_uart_state_V_i : STD_LOGIC_VECTOR (3 downto 0);
    signal call_ret6_master_ip_uart_to_byte_fu_187_uart_to_coordinates_uart_state_V_o : STD_LOGIC_VECTOR (3 downto 0);
    signal call_ret6_master_ip_uart_to_byte_fu_187_uart_to_coordinates_uart_state_V_o_ap_vld : STD_LOGIC;
    signal call_ret6_master_ip_uart_to_byte_fu_187_uart_to_coordinates_next_out_byte_V_i : STD_LOGIC_VECTOR (7 downto 0);
    signal call_ret6_master_ip_uart_to_byte_fu_187_uart_to_coordinates_next_out_byte_V_o : STD_LOGIC_VECTOR (7 downto 0);
    signal call_ret6_master_ip_uart_to_byte_fu_187_uart_to_coordinates_next_out_byte_V_o_ap_vld : STD_LOGIC;
    signal call_ret6_master_ip_uart_to_byte_fu_187_uart_to_coordinates_current_out_byte_V_read : STD_LOGIC_VECTOR (7 downto 0);
    signal call_ret6_master_ip_uart_to_byte_fu_187_ap_return_0 : STD_LOGIC_VECTOR (0 downto 0);
    signal call_ret6_master_ip_uart_to_byte_fu_187_ap_return_1 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_reg_phiprechg_coordinates_reg_112pp0_it0 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_reg_phiprechg_coordinates_reg_112pp0_it1 : STD_LOGIC_VECTOR (31 downto 0);
    signal coordinates_phi_fu_115_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_reg_phiprechg_coordinates_1_reg_121pp0_it0 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_reg_phiprechg_coordinates_1_reg_121pp0_it1 : STD_LOGIC_VECTOR (31 downto 0);
    signal coordinates_1_phi_fu_124_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_reg_phiprechg_coordinates_2_reg_130pp0_it0 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_reg_phiprechg_coordinates_2_reg_130pp0_it1 : STD_LOGIC_VECTOR (31 downto 0);
    signal coordinates_2_phi_fu_133_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_reg_phiprechg_uart_to_coordinates_ck_a_V_reg_139pp0_it0 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_reg_phiprechg_uart_to_coordinates_ck_a_V_reg_139pp0_it1 : STD_LOGIC_VECTOR (7 downto 0);
    signal uart_to_coordinates_ck_a_V_phi_fu_142_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_reg_phiprechg_uart_to_coordinates_ck_b_V_reg_148pp0_it0 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_reg_phiprechg_uart_to_coordinates_ck_b_V_reg_148pp0_it1 : STD_LOGIC_VECTOR (7 downto 0);
    signal uart_to_coordinates_ck_b_V_phi_fu_151_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_reg_phiprechg_uart_to_coordinates_gnss_state_reg_157pp0_it0 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_reg_phiprechg_uart_to_coordinates_gnss_state_reg_157pp0_it1 : STD_LOGIC_VECTOR (5 downto 0);
    signal uart_to_coordinates_gnss_state_phi_fu_160_p4 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_i_fu_212_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_86_i_fu_224_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_87_i_fu_230_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_cond4_i_fu_236_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp5_fu_288_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp6_fu_294_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp4_fu_282_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp3_fu_276_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp7_fu_312_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp6_fu_306_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp_fu_258_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp2_fu_270_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp1_fu_264_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp7_fu_300_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp10_fu_330_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp9_fu_324_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp11_fu_336_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp8_fu_318_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp8_fu_342_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal uart_to_coordinates_ck_a_V_rea_fu_242_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal uart_to_coordinates_ck_b_V_rea_fu_250_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_85_i_fu_218_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_sig_pprstidle_pp0 : STD_LOGIC;
    signal ap_sig_bdd_42 : BOOLEAN;

    component master_ip_get_gps_info_from_ubx IS
    port (
        uart_to_coordinates_current_out_byte_V_read : IN STD_LOGIC_VECTOR (7 downto 0);
        uart_to_coordinates_gnss_state_V_read : IN STD_LOGIC_VECTOR (5 downto 0);
        uart_to_coordinates_ck_a_V_read : IN STD_LOGIC_VECTOR (7 downto 0);
        uart_to_coordinates_ck_b_V_read : IN STD_LOGIC_VECTOR (7 downto 0);
        uart_to_coordinates_tempCoordinates_0_i : IN STD_LOGIC_VECTOR (31 downto 0);
        uart_to_coordinates_tempCoordinates_0_o : OUT STD_LOGIC_VECTOR (31 downto 0);
        uart_to_coordinates_tempCoordinates_0_o_ap_vld : OUT STD_LOGIC;
        uart_to_coordinates_tempCoordinates_1_i : IN STD_LOGIC_VECTOR (31 downto 0);
        uart_to_coordinates_tempCoordinates_1_o : OUT STD_LOGIC_VECTOR (31 downto 0);
        uart_to_coordinates_tempCoordinates_1_o_ap_vld : OUT STD_LOGIC;
        uart_to_coordinates_tempCoordinates_2_i : IN STD_LOGIC_VECTOR (31 downto 0);
        uart_to_coordinates_tempCoordinates_2_o : OUT STD_LOGIC_VECTOR (31 downto 0);
        uart_to_coordinates_tempCoordinates_2_o_ap_vld : OUT STD_LOGIC;
        p_read1 : IN STD_LOGIC_VECTOR (31 downto 0);
        p_read4 : IN STD_LOGIC_VECTOR (31 downto 0);
        p_read5 : IN STD_LOGIC_VECTOR (31 downto 0);
        ap_return_0 : OUT STD_LOGIC_VECTOR (5 downto 0);
        ap_return_1 : OUT STD_LOGIC_VECTOR (31 downto 0);
        ap_return_2 : OUT STD_LOGIC_VECTOR (31 downto 0);
        ap_return_3 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component master_ip_uart_to_byte IS
    port (
        uart_to_coordinates_count_V_i : IN STD_LOGIC_VECTOR (15 downto 0);
        uart_to_coordinates_count_V_o : OUT STD_LOGIC_VECTOR (15 downto 0);
        uart_to_coordinates_count_V_o_ap_vld : OUT STD_LOGIC;
        uart_to_coordinates_previous_input_V_i : IN STD_LOGIC_VECTOR (0 downto 0);
        uart_to_coordinates_previous_input_V_o : OUT STD_LOGIC_VECTOR (0 downto 0);
        uart_to_coordinates_previous_input_V_o_ap_vld : OUT STD_LOGIC;
        uart_to_coordinates_current_input_V_read : IN STD_LOGIC_VECTOR (0 downto 0);
        uart_to_coordinates_uart_state_V_i : IN STD_LOGIC_VECTOR (3 downto 0);
        uart_to_coordinates_uart_state_V_o : OUT STD_LOGIC_VECTOR (3 downto 0);
        uart_to_coordinates_uart_state_V_o_ap_vld : OUT STD_LOGIC;
        uart_to_coordinates_next_out_byte_V_i : IN STD_LOGIC_VECTOR (7 downto 0);
        uart_to_coordinates_next_out_byte_V_o : OUT STD_LOGIC_VECTOR (7 downto 0);
        uart_to_coordinates_next_out_byte_V_o_ap_vld : OUT STD_LOGIC;
        uart_to_coordinates_current_out_byte_V_read : IN STD_LOGIC_VECTOR (7 downto 0);
        ap_return_0 : OUT STD_LOGIC_VECTOR (0 downto 0);
        ap_return_1 : OUT STD_LOGIC_VECTOR (7 downto 0) );
    end component;



begin
    call_ret5_master_ip_get_gps_info_from_ubx_fu_166 : component master_ip_get_gps_info_from_ubx
    port map (
        uart_to_coordinates_current_out_byte_V_read => call_ret5_master_ip_get_gps_info_from_ubx_fu_166_uart_to_coordinates_current_out_byte_V_read,
        uart_to_coordinates_gnss_state_V_read => call_ret5_master_ip_get_gps_info_from_ubx_fu_166_uart_to_coordinates_gnss_state_V_read,
        uart_to_coordinates_ck_a_V_read => call_ret5_master_ip_get_gps_info_from_ubx_fu_166_uart_to_coordinates_ck_a_V_read,
        uart_to_coordinates_ck_b_V_read => call_ret5_master_ip_get_gps_info_from_ubx_fu_166_uart_to_coordinates_ck_b_V_read,
        uart_to_coordinates_tempCoordinates_0_i => call_ret5_master_ip_get_gps_info_from_ubx_fu_166_uart_to_coordinates_tempCoordinates_0_i,
        uart_to_coordinates_tempCoordinates_0_o => call_ret5_master_ip_get_gps_info_from_ubx_fu_166_uart_to_coordinates_tempCoordinates_0_o,
        uart_to_coordinates_tempCoordinates_0_o_ap_vld => call_ret5_master_ip_get_gps_info_from_ubx_fu_166_uart_to_coordinates_tempCoordinates_0_o_ap_vld,
        uart_to_coordinates_tempCoordinates_1_i => call_ret5_master_ip_get_gps_info_from_ubx_fu_166_uart_to_coordinates_tempCoordinates_1_i,
        uart_to_coordinates_tempCoordinates_1_o => call_ret5_master_ip_get_gps_info_from_ubx_fu_166_uart_to_coordinates_tempCoordinates_1_o,
        uart_to_coordinates_tempCoordinates_1_o_ap_vld => call_ret5_master_ip_get_gps_info_from_ubx_fu_166_uart_to_coordinates_tempCoordinates_1_o_ap_vld,
        uart_to_coordinates_tempCoordinates_2_i => call_ret5_master_ip_get_gps_info_from_ubx_fu_166_uart_to_coordinates_tempCoordinates_2_i,
        uart_to_coordinates_tempCoordinates_2_o => call_ret5_master_ip_get_gps_info_from_ubx_fu_166_uart_to_coordinates_tempCoordinates_2_o,
        uart_to_coordinates_tempCoordinates_2_o_ap_vld => call_ret5_master_ip_get_gps_info_from_ubx_fu_166_uart_to_coordinates_tempCoordinates_2_o_ap_vld,
        p_read1 => call_ret5_master_ip_get_gps_info_from_ubx_fu_166_p_read1,
        p_read4 => call_ret5_master_ip_get_gps_info_from_ubx_fu_166_p_read4,
        p_read5 => call_ret5_master_ip_get_gps_info_from_ubx_fu_166_p_read5,
        ap_return_0 => call_ret5_master_ip_get_gps_info_from_ubx_fu_166_ap_return_0,
        ap_return_1 => call_ret5_master_ip_get_gps_info_from_ubx_fu_166_ap_return_1,
        ap_return_2 => call_ret5_master_ip_get_gps_info_from_ubx_fu_166_ap_return_2,
        ap_return_3 => call_ret5_master_ip_get_gps_info_from_ubx_fu_166_ap_return_3);

    call_ret6_master_ip_uart_to_byte_fu_187 : component master_ip_uart_to_byte
    port map (
        uart_to_coordinates_count_V_i => call_ret6_master_ip_uart_to_byte_fu_187_uart_to_coordinates_count_V_i,
        uart_to_coordinates_count_V_o => call_ret6_master_ip_uart_to_byte_fu_187_uart_to_coordinates_count_V_o,
        uart_to_coordinates_count_V_o_ap_vld => call_ret6_master_ip_uart_to_byte_fu_187_uart_to_coordinates_count_V_o_ap_vld,
        uart_to_coordinates_previous_input_V_i => call_ret6_master_ip_uart_to_byte_fu_187_uart_to_coordinates_previous_input_V_i,
        uart_to_coordinates_previous_input_V_o => call_ret6_master_ip_uart_to_byte_fu_187_uart_to_coordinates_previous_input_V_o,
        uart_to_coordinates_previous_input_V_o_ap_vld => call_ret6_master_ip_uart_to_byte_fu_187_uart_to_coordinates_previous_input_V_o_ap_vld,
        uart_to_coordinates_current_input_V_read => call_ret6_master_ip_uart_to_byte_fu_187_uart_to_coordinates_current_input_V_read,
        uart_to_coordinates_uart_state_V_i => call_ret6_master_ip_uart_to_byte_fu_187_uart_to_coordinates_uart_state_V_i,
        uart_to_coordinates_uart_state_V_o => call_ret6_master_ip_uart_to_byte_fu_187_uart_to_coordinates_uart_state_V_o,
        uart_to_coordinates_uart_state_V_o_ap_vld => call_ret6_master_ip_uart_to_byte_fu_187_uart_to_coordinates_uart_state_V_o_ap_vld,
        uart_to_coordinates_next_out_byte_V_i => call_ret6_master_ip_uart_to_byte_fu_187_uart_to_coordinates_next_out_byte_V_i,
        uart_to_coordinates_next_out_byte_V_o => call_ret6_master_ip_uart_to_byte_fu_187_uart_to_coordinates_next_out_byte_V_o,
        uart_to_coordinates_next_out_byte_V_o_ap_vld => call_ret6_master_ip_uart_to_byte_fu_187_uart_to_coordinates_next_out_byte_V_o_ap_vld,
        uart_to_coordinates_current_out_byte_V_read => call_ret6_master_ip_uart_to_byte_fu_187_uart_to_coordinates_current_out_byte_V_read,
        ap_return_0 => call_ret6_master_ip_uart_to_byte_fu_187_ap_return_0,
        ap_return_1 => call_ret6_master_ip_uart_to_byte_fu_187_ap_return_1);





    -- the current state (ap_CS_fsm) of the state machine. --
    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_pp0_stg0_fsm_0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp0_it1 assign process. --
    ap_reg_ppiten_pp0_it1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp0_it1 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_0) and not((((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (ap_start = ap_const_logic_0)) or not((ap_const_logic_1 = ap_ce)))))) then 
                    ap_reg_ppiten_pp0_it1 <= ap_reg_ppiten_pp0_it0;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_phiprechg_coordinates_1_reg_121pp0_it1 assign process. --
    ap_reg_phiprechg_coordinates_1_reg_121pp0_it1_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (ap_sig_bdd_42) then
                if ((tmp_fu_203_p1 = ap_const_lv1_0)) then 
                    ap_reg_phiprechg_coordinates_1_reg_121pp0_it1 <= p_read2;
                elsif ((ap_true = ap_true)) then 
                    ap_reg_phiprechg_coordinates_1_reg_121pp0_it1 <= ap_reg_phiprechg_coordinates_1_reg_121pp0_it0;
                end if;
            end if; 
        end if;
    end process;

    -- ap_reg_phiprechg_coordinates_2_reg_130pp0_it1 assign process. --
    ap_reg_phiprechg_coordinates_2_reg_130pp0_it1_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (ap_sig_bdd_42) then
                if ((tmp_fu_203_p1 = ap_const_lv1_0)) then 
                    ap_reg_phiprechg_coordinates_2_reg_130pp0_it1 <= p_read5;
                elsif ((ap_true = ap_true)) then 
                    ap_reg_phiprechg_coordinates_2_reg_130pp0_it1 <= ap_reg_phiprechg_coordinates_2_reg_130pp0_it0;
                end if;
            end if; 
        end if;
    end process;

    -- ap_reg_phiprechg_coordinates_reg_112pp0_it1 assign process. --
    ap_reg_phiprechg_coordinates_reg_112pp0_it1_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (ap_sig_bdd_42) then
                if ((tmp_fu_203_p1 = ap_const_lv1_0)) then 
                    ap_reg_phiprechg_coordinates_reg_112pp0_it1 <= p_read;
                elsif ((ap_true = ap_true)) then 
                    ap_reg_phiprechg_coordinates_reg_112pp0_it1 <= ap_reg_phiprechg_coordinates_reg_112pp0_it0;
                end if;
            end if; 
        end if;
    end process;

    -- ap_reg_phiprechg_uart_to_coordinates_ck_a_V_reg_139pp0_it1 assign process. --
    ap_reg_phiprechg_uart_to_coordinates_ck_a_V_reg_139pp0_it1_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (ap_sig_bdd_42) then
                if ((tmp_fu_203_p1 = ap_const_lv1_0)) then 
                    ap_reg_phiprechg_uart_to_coordinates_ck_a_V_reg_139pp0_it1 <= uart_to_coordinates_ck_a_V_read;
                elsif ((ap_true = ap_true)) then 
                    ap_reg_phiprechg_uart_to_coordinates_ck_a_V_reg_139pp0_it1 <= ap_reg_phiprechg_uart_to_coordinates_ck_a_V_reg_139pp0_it0;
                end if;
            end if; 
        end if;
    end process;

    -- ap_reg_phiprechg_uart_to_coordinates_ck_b_V_reg_148pp0_it1 assign process. --
    ap_reg_phiprechg_uart_to_coordinates_ck_b_V_reg_148pp0_it1_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (ap_sig_bdd_42) then
                if ((tmp_fu_203_p1 = ap_const_lv1_0)) then 
                    ap_reg_phiprechg_uart_to_coordinates_ck_b_V_reg_148pp0_it1 <= uart_to_coordinates_ck_b_V_read;
                elsif ((ap_true = ap_true)) then 
                    ap_reg_phiprechg_uart_to_coordinates_ck_b_V_reg_148pp0_it1 <= ap_reg_phiprechg_uart_to_coordinates_ck_b_V_reg_148pp0_it0;
                end if;
            end if; 
        end if;
    end process;

    -- ap_reg_phiprechg_uart_to_coordinates_gnss_state_reg_157pp0_it1 assign process. --
    ap_reg_phiprechg_uart_to_coordinates_gnss_state_reg_157pp0_it1_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (ap_sig_bdd_42) then
                if ((tmp_fu_203_p1 = ap_const_lv1_0)) then 
                    ap_reg_phiprechg_uart_to_coordinates_gnss_state_reg_157pp0_it1 <= uart_to_coordinates_gnss_state_V_read;
                elsif ((ap_true = ap_true)) then 
                    ap_reg_phiprechg_uart_to_coordinates_gnss_state_reg_157pp0_it1 <= ap_reg_phiprechg_uart_to_coordinates_gnss_state_reg_157pp0_it0;
                end if;
            end if; 
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_0) and not(((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_ce) and not((tmp_fu_203_p1 = ap_const_lv1_0)))) then
                call_ret2_reg_472 <= call_ret5_master_ip_get_gps_info_from_ubx_fu_166_ap_return_0;
                coordinates_0_ret_reg_477 <= call_ret5_master_ip_get_gps_info_from_ubx_fu_166_ap_return_1;
                coordinates_1_ret_reg_482 <= call_ret5_master_ip_get_gps_info_from_ubx_fu_166_ap_return_2;
                coordinates_2_ret_reg_487 <= call_ret5_master_ip_get_gps_info_from_ubx_fu_166_ap_return_3;
                uart_to_coordinates_ck_a_V_1_i_reg_462 <= uart_to_coordinates_ck_a_V_1_i_fu_348_p3;
                uart_to_coordinates_ck_b_V_1_i_reg_467 <= uart_to_coordinates_ck_b_V_1_i_fu_357_p3;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_0) and not(((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_ce))) then
                tmp_reg_453 <= call_ret6_master_ip_uart_to_byte_fu_187_ap_return_0;
                uart_to_coordinates_current_ou_reg_457 <= call_ret6_master_ip_uart_to_byte_fu_187_ap_return_1;
            end if;
        end if;
    end process;

    -- the next state (ap_NS_fsm) of the state machine. --
    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_reg_ppiten_pp0_it0, ap_ce, ap_sig_pprstidle_pp0)
    begin
        case ap_CS_fsm is
            when ap_ST_pp0_stg0_fsm_0 => 
                ap_NS_fsm <= ap_ST_pp0_stg0_fsm_0;
            when others =>  
                ap_NS_fsm <= "X";
        end case;
    end process;

    -- ap_done assign process. --
    ap_done_assign_proc : process(ap_start, ap_sig_cseq_ST_pp0_stg0_fsm_0, ap_reg_ppiten_pp0_it0, ap_reg_ppiten_pp0_it1, ap_ce)
    begin
        if (((not((ap_const_logic_1 = ap_start)) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_0) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it0)) or ((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_0) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1) and not(((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_ce)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_idle assign process. --
    ap_idle_assign_proc : process(ap_start, ap_sig_cseq_ST_pp0_stg0_fsm_0, ap_reg_ppiten_pp0_it0, ap_reg_ppiten_pp0_it1)
    begin
        if ((not((ap_const_logic_1 = ap_start)) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_0) and (ap_const_logic_0 = ap_reg_ppiten_pp0_it0) and (ap_const_logic_0 = ap_reg_ppiten_pp0_it1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_ready assign process. --
    ap_ready_assign_proc : process(ap_start, ap_sig_cseq_ST_pp0_stg0_fsm_0, ap_reg_ppiten_pp0_it0, ap_ce)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_0) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and not(((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_ce))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    ap_reg_phiprechg_coordinates_1_reg_121pp0_it0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
    ap_reg_phiprechg_coordinates_2_reg_130pp0_it0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
    ap_reg_phiprechg_coordinates_reg_112pp0_it0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
    ap_reg_phiprechg_uart_to_coordinates_ck_a_V_reg_139pp0_it0 <= "XXXXXXXX";
    ap_reg_phiprechg_uart_to_coordinates_ck_b_V_reg_148pp0_it0 <= "XXXXXXXX";
    ap_reg_phiprechg_uart_to_coordinates_gnss_state_reg_157pp0_it0 <= "XXXXXX";
    ap_reg_ppiten_pp0_it0 <= ap_start;
    ap_return_0 <= uart_to_coordinates_ck_a_V_phi_fu_142_p4;
    ap_return_1 <= uart_to_coordinates_ck_b_V_phi_fu_151_p4;
    ap_return_2 <= uart_to_coordinates_current_ou_reg_457;
    ap_return_3 <= uart_to_coordinates_gnss_state_phi_fu_160_p4;
    ap_return_4 <= coordinates_phi_fu_115_p4;
    ap_return_5 <= coordinates_1_phi_fu_124_p4;
    ap_return_6 <= coordinates_2_phi_fu_133_p4;

    -- ap_sig_bdd_19 assign process. --
    ap_sig_bdd_19_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_19 <= (ap_CS_fsm(0 downto 0) = ap_const_lv1_1);
    end process;


    -- ap_sig_bdd_42 assign process. --
    ap_sig_bdd_42_assign_proc : process(ap_start, ap_sig_cseq_ST_pp0_stg0_fsm_0, ap_reg_ppiten_pp0_it0, ap_ce)
    begin
                ap_sig_bdd_42 <= ((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_0) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and not(((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_ce));
    end process;


    -- ap_sig_cseq_ST_pp0_stg0_fsm_0 assign process. --
    ap_sig_cseq_ST_pp0_stg0_fsm_0_assign_proc : process(ap_sig_bdd_19)
    begin
        if (ap_sig_bdd_19) then 
            ap_sig_cseq_ST_pp0_stg0_fsm_0 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_pp0_stg0_fsm_0 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_pprstidle_pp0 assign process. --
    ap_sig_pprstidle_pp0_assign_proc : process(ap_start, ap_reg_ppiten_pp0_it0)
    begin
        if (((ap_const_logic_0 = ap_reg_ppiten_pp0_it0) and (ap_const_logic_0 = ap_start))) then 
            ap_sig_pprstidle_pp0 <= ap_const_logic_1;
        else 
            ap_sig_pprstidle_pp0 <= ap_const_logic_0;
        end if; 
    end process;

    call_ret5_master_ip_get_gps_info_from_ubx_fu_166_p_read1 <= p_read;
    call_ret5_master_ip_get_gps_info_from_ubx_fu_166_p_read4 <= p_read2;
    call_ret5_master_ip_get_gps_info_from_ubx_fu_166_p_read5 <= p_read5;
    call_ret5_master_ip_get_gps_info_from_ubx_fu_166_uart_to_coordinates_ck_a_V_read <= 
        uart_to_coordinates_ck_a_V_rea_fu_242_p3 when (sel_tmp8_fu_342_p2(0) = '1') else 
        tmp_i_fu_212_p2;
    call_ret5_master_ip_get_gps_info_from_ubx_fu_166_uart_to_coordinates_ck_b_V_read <= 
        uart_to_coordinates_ck_b_V_rea_fu_250_p3 when (sel_tmp8_fu_342_p2(0) = '1') else 
        tmp_85_i_fu_218_p2;
    call_ret5_master_ip_get_gps_info_from_ubx_fu_166_uart_to_coordinates_current_out_byte_V_read <= call_ret6_master_ip_uart_to_byte_fu_187_ap_return_1;
    call_ret5_master_ip_get_gps_info_from_ubx_fu_166_uart_to_coordinates_gnss_state_V_read <= uart_to_coordinates_gnss_state_V_read;
    call_ret5_master_ip_get_gps_info_from_ubx_fu_166_uart_to_coordinates_tempCoordinates_0_i <= uart_to_coordinates_tempCoordinates_0_i;
    call_ret5_master_ip_get_gps_info_from_ubx_fu_166_uart_to_coordinates_tempCoordinates_1_i <= uart_to_coordinates_tempCoordinates_1_i;
    call_ret5_master_ip_get_gps_info_from_ubx_fu_166_uart_to_coordinates_tempCoordinates_2_i <= uart_to_coordinates_tempCoordinates_2_i;
    call_ret6_master_ip_uart_to_byte_fu_187_uart_to_coordinates_count_V_i <= uart_to_coordinates_count_V_i;
    call_ret6_master_ip_uart_to_byte_fu_187_uart_to_coordinates_current_input_V_read <= input_V_read;
    call_ret6_master_ip_uart_to_byte_fu_187_uart_to_coordinates_current_out_byte_V_read <= uart_to_coordinates_current_out_byte_V_read;
    call_ret6_master_ip_uart_to_byte_fu_187_uart_to_coordinates_next_out_byte_V_i <= uart_to_coordinates_next_out_byte_V_i;
    call_ret6_master_ip_uart_to_byte_fu_187_uart_to_coordinates_previous_input_V_i <= uart_to_coordinates_previous_input_V_i;
    call_ret6_master_ip_uart_to_byte_fu_187_uart_to_coordinates_uart_state_V_i <= uart_to_coordinates_uart_state_V_i;

    -- coordinates_1_phi_fu_124_p4 assign process. --
    coordinates_1_phi_fu_124_p4_assign_proc : process(ap_sig_cseq_ST_pp0_stg0_fsm_0, ap_reg_ppiten_pp0_it1, tmp_reg_453, coordinates_1_ret_reg_482, ap_reg_phiprechg_coordinates_1_reg_121pp0_it1)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_0) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1) and not((tmp_reg_453 = ap_const_lv1_0)))) then 
            coordinates_1_phi_fu_124_p4 <= coordinates_1_ret_reg_482;
        else 
            coordinates_1_phi_fu_124_p4 <= ap_reg_phiprechg_coordinates_1_reg_121pp0_it1;
        end if; 
    end process;


    -- coordinates_2_phi_fu_133_p4 assign process. --
    coordinates_2_phi_fu_133_p4_assign_proc : process(ap_sig_cseq_ST_pp0_stg0_fsm_0, ap_reg_ppiten_pp0_it1, tmp_reg_453, coordinates_2_ret_reg_487, ap_reg_phiprechg_coordinates_2_reg_130pp0_it1)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_0) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1) and not((tmp_reg_453 = ap_const_lv1_0)))) then 
            coordinates_2_phi_fu_133_p4 <= coordinates_2_ret_reg_487;
        else 
            coordinates_2_phi_fu_133_p4 <= ap_reg_phiprechg_coordinates_2_reg_130pp0_it1;
        end if; 
    end process;


    -- coordinates_phi_fu_115_p4 assign process. --
    coordinates_phi_fu_115_p4_assign_proc : process(ap_sig_cseq_ST_pp0_stg0_fsm_0, ap_reg_ppiten_pp0_it1, tmp_reg_453, coordinates_0_ret_reg_477, ap_reg_phiprechg_coordinates_reg_112pp0_it1)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_0) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1) and not((tmp_reg_453 = ap_const_lv1_0)))) then 
            coordinates_phi_fu_115_p4 <= coordinates_0_ret_reg_477;
        else 
            coordinates_phi_fu_115_p4 <= ap_reg_phiprechg_coordinates_reg_112pp0_it1;
        end if; 
    end process;

    or_cond4_i_fu_236_p2 <= (tmp_86_i_fu_224_p2 and tmp_87_i_fu_230_p2);
    sel_tmp1_fu_264_p2 <= "1" when (uart_to_coordinates_gnss_state_V_read = ap_const_lv6_3E) else "0";
    sel_tmp2_fu_270_p2 <= "1" when (uart_to_coordinates_gnss_state_V_read = ap_const_lv6_3D) else "0";
    sel_tmp3_fu_276_p2 <= "1" when (uart_to_coordinates_gnss_state_V_read = ap_const_lv6_3C) else "0";
    sel_tmp4_fu_282_p2 <= "1" when (uart_to_coordinates_gnss_state_V_read = ap_const_lv6_3B) else "0";
    sel_tmp5_fu_288_p2 <= "1" when (uart_to_coordinates_gnss_state_V_read = ap_const_lv6_3A) else "0";
    sel_tmp6_fu_294_p2 <= "1" when (uart_to_coordinates_gnss_state_V_read = ap_const_lv6_1) else "0";
    sel_tmp7_fu_300_p2 <= "1" when (uart_to_coordinates_gnss_state_V_read = ap_const_lv6_0) else "0";
    sel_tmp8_fu_342_p2 <= (tmp11_fu_336_p2 or tmp8_fu_318_p2);
    sel_tmp_fu_258_p2 <= "1" when (uart_to_coordinates_gnss_state_V_read = ap_const_lv6_3F) else "0";
    tmp10_fu_330_p2 <= (sel_tmp1_fu_264_p2 or sel_tmp7_fu_300_p2);
    tmp11_fu_336_p2 <= (tmp10_fu_330_p2 or tmp9_fu_324_p2);
    tmp6_fu_306_p2 <= (sel_tmp5_fu_288_p2 or sel_tmp6_fu_294_p2);
    tmp7_fu_312_p2 <= (sel_tmp4_fu_282_p2 or sel_tmp3_fu_276_p2);
    tmp8_fu_318_p2 <= (tmp7_fu_312_p2 or tmp6_fu_306_p2);
    tmp9_fu_324_p2 <= (sel_tmp_fu_258_p2 or sel_tmp2_fu_270_p2);
    tmp_85_i_fu_218_p2 <= std_logic_vector(unsigned(tmp_i_fu_212_p2) + unsigned(uart_to_coordinates_ck_b_V_read));
    tmp_86_i_fu_224_p2 <= "1" when (unsigned(uart_to_coordinates_gnss_state_V_read) > unsigned(ap_const_lv6_39)) else "0";
    tmp_87_i_fu_230_p2 <= "1" when (unsigned(uart_to_coordinates_gnss_state_V_read) < unsigned(ap_const_lv6_3C)) else "0";
    tmp_fu_203_p1 <= call_ret6_master_ip_uart_to_byte_fu_187_ap_return_0;
    tmp_i_fu_212_p2 <= std_logic_vector(unsigned(call_ret6_master_ip_uart_to_byte_fu_187_ap_return_1) + unsigned(uart_to_coordinates_ck_a_V_read));
    uart_to_coordinates_ck_a_V_1_i_fu_348_p3 <= 
        uart_to_coordinates_ck_a_V_rea_fu_242_p3 when (sel_tmp8_fu_342_p2(0) = '1') else 
        tmp_i_fu_212_p2;

    -- uart_to_coordinates_ck_a_V_phi_fu_142_p4 assign process. --
    uart_to_coordinates_ck_a_V_phi_fu_142_p4_assign_proc : process(ap_sig_cseq_ST_pp0_stg0_fsm_0, ap_reg_ppiten_pp0_it1, tmp_reg_453, uart_to_coordinates_ck_a_V_1_i_reg_462, ap_reg_phiprechg_uart_to_coordinates_ck_a_V_reg_139pp0_it1)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_0) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1) and not((tmp_reg_453 = ap_const_lv1_0)))) then 
            uart_to_coordinates_ck_a_V_phi_fu_142_p4 <= uart_to_coordinates_ck_a_V_1_i_reg_462;
        else 
            uart_to_coordinates_ck_a_V_phi_fu_142_p4 <= ap_reg_phiprechg_uart_to_coordinates_ck_a_V_reg_139pp0_it1;
        end if; 
    end process;

    uart_to_coordinates_ck_a_V_rea_fu_242_p3 <= 
        uart_to_coordinates_ck_a_V_read when (or_cond4_i_fu_236_p2(0) = '1') else 
        ap_const_lv8_0;
    uart_to_coordinates_ck_b_V_1_i_fu_357_p3 <= 
        uart_to_coordinates_ck_b_V_rea_fu_250_p3 when (sel_tmp8_fu_342_p2(0) = '1') else 
        tmp_85_i_fu_218_p2;

    -- uart_to_coordinates_ck_b_V_phi_fu_151_p4 assign process. --
    uart_to_coordinates_ck_b_V_phi_fu_151_p4_assign_proc : process(ap_sig_cseq_ST_pp0_stg0_fsm_0, ap_reg_ppiten_pp0_it1, tmp_reg_453, uart_to_coordinates_ck_b_V_1_i_reg_467, ap_reg_phiprechg_uart_to_coordinates_ck_b_V_reg_148pp0_it1)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_0) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1) and not((tmp_reg_453 = ap_const_lv1_0)))) then 
            uart_to_coordinates_ck_b_V_phi_fu_151_p4 <= uart_to_coordinates_ck_b_V_1_i_reg_467;
        else 
            uart_to_coordinates_ck_b_V_phi_fu_151_p4 <= ap_reg_phiprechg_uart_to_coordinates_ck_b_V_reg_148pp0_it1;
        end if; 
    end process;

    uart_to_coordinates_ck_b_V_rea_fu_250_p3 <= 
        uart_to_coordinates_ck_b_V_read when (or_cond4_i_fu_236_p2(0) = '1') else 
        ap_const_lv8_0;

    -- uart_to_coordinates_count_V_o assign process. --
    uart_to_coordinates_count_V_o_assign_proc : process(ap_start, ap_sig_cseq_ST_pp0_stg0_fsm_0, ap_reg_ppiten_pp0_it0, ap_ce, uart_to_coordinates_count_V_i, call_ret6_master_ip_uart_to_byte_fu_187_uart_to_coordinates_count_V_o, call_ret6_master_ip_uart_to_byte_fu_187_uart_to_coordinates_count_V_o_ap_vld)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_0) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and not(((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_ce) and (ap_const_logic_1 = call_ret6_master_ip_uart_to_byte_fu_187_uart_to_coordinates_count_V_o_ap_vld))) then 
            uart_to_coordinates_count_V_o <= call_ret6_master_ip_uart_to_byte_fu_187_uart_to_coordinates_count_V_o;
        else 
            uart_to_coordinates_count_V_o <= uart_to_coordinates_count_V_i;
        end if; 
    end process;

    uart_to_coordinates_count_V_o_ap_vld <= call_ret6_master_ip_uart_to_byte_fu_187_uart_to_coordinates_count_V_o_ap_vld;

    -- uart_to_coordinates_gnss_state_phi_fu_160_p4 assign process. --
    uart_to_coordinates_gnss_state_phi_fu_160_p4_assign_proc : process(ap_sig_cseq_ST_pp0_stg0_fsm_0, ap_reg_ppiten_pp0_it1, tmp_reg_453, call_ret2_reg_472, ap_reg_phiprechg_uart_to_coordinates_gnss_state_reg_157pp0_it1)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_0) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1) and not((tmp_reg_453 = ap_const_lv1_0)))) then 
            uart_to_coordinates_gnss_state_phi_fu_160_p4 <= call_ret2_reg_472;
        else 
            uart_to_coordinates_gnss_state_phi_fu_160_p4 <= ap_reg_phiprechg_uart_to_coordinates_gnss_state_reg_157pp0_it1;
        end if; 
    end process;


    -- uart_to_coordinates_next_out_byte_V_o assign process. --
    uart_to_coordinates_next_out_byte_V_o_assign_proc : process(ap_start, ap_sig_cseq_ST_pp0_stg0_fsm_0, ap_reg_ppiten_pp0_it0, ap_ce, uart_to_coordinates_next_out_byte_V_i, call_ret6_master_ip_uart_to_byte_fu_187_uart_to_coordinates_next_out_byte_V_o, call_ret6_master_ip_uart_to_byte_fu_187_uart_to_coordinates_next_out_byte_V_o_ap_vld)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_0) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and not(((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_ce) and (ap_const_logic_1 = call_ret6_master_ip_uart_to_byte_fu_187_uart_to_coordinates_next_out_byte_V_o_ap_vld))) then 
            uart_to_coordinates_next_out_byte_V_o <= call_ret6_master_ip_uart_to_byte_fu_187_uart_to_coordinates_next_out_byte_V_o;
        else 
            uart_to_coordinates_next_out_byte_V_o <= uart_to_coordinates_next_out_byte_V_i;
        end if; 
    end process;

    uart_to_coordinates_next_out_byte_V_o_ap_vld <= call_ret6_master_ip_uart_to_byte_fu_187_uart_to_coordinates_next_out_byte_V_o_ap_vld;

    -- uart_to_coordinates_previous_input_V_o assign process. --
    uart_to_coordinates_previous_input_V_o_assign_proc : process(ap_start, ap_sig_cseq_ST_pp0_stg0_fsm_0, ap_reg_ppiten_pp0_it0, ap_ce, uart_to_coordinates_previous_input_V_i, call_ret6_master_ip_uart_to_byte_fu_187_uart_to_coordinates_previous_input_V_o, call_ret6_master_ip_uart_to_byte_fu_187_uart_to_coordinates_previous_input_V_o_ap_vld)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_0) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and not(((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_ce) and (ap_const_logic_1 = call_ret6_master_ip_uart_to_byte_fu_187_uart_to_coordinates_previous_input_V_o_ap_vld))) then 
            uart_to_coordinates_previous_input_V_o <= call_ret6_master_ip_uart_to_byte_fu_187_uart_to_coordinates_previous_input_V_o;
        else 
            uart_to_coordinates_previous_input_V_o <= uart_to_coordinates_previous_input_V_i;
        end if; 
    end process;

    uart_to_coordinates_previous_input_V_o_ap_vld <= call_ret6_master_ip_uart_to_byte_fu_187_uart_to_coordinates_previous_input_V_o_ap_vld;

    -- uart_to_coordinates_tempCoordinates_0_o assign process. --
    uart_to_coordinates_tempCoordinates_0_o_assign_proc : process(ap_start, ap_sig_cseq_ST_pp0_stg0_fsm_0, ap_reg_ppiten_pp0_it0, ap_ce, uart_to_coordinates_tempCoordinates_0_i, tmp_fu_203_p1, call_ret5_master_ip_get_gps_info_from_ubx_fu_166_uart_to_coordinates_tempCoordinates_0_o, call_ret5_master_ip_get_gps_info_from_ubx_fu_166_uart_to_coordinates_tempCoordinates_0_o_ap_vld)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_0) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and not(((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_ce) and not((tmp_fu_203_p1 = ap_const_lv1_0)) and (ap_const_logic_1 = call_ret5_master_ip_get_gps_info_from_ubx_fu_166_uart_to_coordinates_tempCoordinates_0_o_ap_vld))) then 
            uart_to_coordinates_tempCoordinates_0_o <= call_ret5_master_ip_get_gps_info_from_ubx_fu_166_uart_to_coordinates_tempCoordinates_0_o;
        else 
            uart_to_coordinates_tempCoordinates_0_o <= uart_to_coordinates_tempCoordinates_0_i;
        end if; 
    end process;

    uart_to_coordinates_tempCoordinates_0_o_ap_vld <= call_ret5_master_ip_get_gps_info_from_ubx_fu_166_uart_to_coordinates_tempCoordinates_0_o_ap_vld;

    -- uart_to_coordinates_tempCoordinates_1_o assign process. --
    uart_to_coordinates_tempCoordinates_1_o_assign_proc : process(ap_start, ap_sig_cseq_ST_pp0_stg0_fsm_0, ap_reg_ppiten_pp0_it0, ap_ce, uart_to_coordinates_tempCoordinates_1_i, tmp_fu_203_p1, call_ret5_master_ip_get_gps_info_from_ubx_fu_166_uart_to_coordinates_tempCoordinates_1_o, call_ret5_master_ip_get_gps_info_from_ubx_fu_166_uart_to_coordinates_tempCoordinates_1_o_ap_vld)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_0) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and not(((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_ce) and not((tmp_fu_203_p1 = ap_const_lv1_0)) and (ap_const_logic_1 = call_ret5_master_ip_get_gps_info_from_ubx_fu_166_uart_to_coordinates_tempCoordinates_1_o_ap_vld))) then 
            uart_to_coordinates_tempCoordinates_1_o <= call_ret5_master_ip_get_gps_info_from_ubx_fu_166_uart_to_coordinates_tempCoordinates_1_o;
        else 
            uart_to_coordinates_tempCoordinates_1_o <= uart_to_coordinates_tempCoordinates_1_i;
        end if; 
    end process;

    uart_to_coordinates_tempCoordinates_1_o_ap_vld <= call_ret5_master_ip_get_gps_info_from_ubx_fu_166_uart_to_coordinates_tempCoordinates_1_o_ap_vld;

    -- uart_to_coordinates_tempCoordinates_2_o assign process. --
    uart_to_coordinates_tempCoordinates_2_o_assign_proc : process(ap_start, ap_sig_cseq_ST_pp0_stg0_fsm_0, ap_reg_ppiten_pp0_it0, ap_ce, uart_to_coordinates_tempCoordinates_2_i, tmp_fu_203_p1, call_ret5_master_ip_get_gps_info_from_ubx_fu_166_uart_to_coordinates_tempCoordinates_2_o, call_ret5_master_ip_get_gps_info_from_ubx_fu_166_uart_to_coordinates_tempCoordinates_2_o_ap_vld)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_0) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and not(((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_ce) and not((tmp_fu_203_p1 = ap_const_lv1_0)) and (ap_const_logic_1 = call_ret5_master_ip_get_gps_info_from_ubx_fu_166_uart_to_coordinates_tempCoordinates_2_o_ap_vld))) then 
            uart_to_coordinates_tempCoordinates_2_o <= call_ret5_master_ip_get_gps_info_from_ubx_fu_166_uart_to_coordinates_tempCoordinates_2_o;
        else 
            uart_to_coordinates_tempCoordinates_2_o <= uart_to_coordinates_tempCoordinates_2_i;
        end if; 
    end process;

    uart_to_coordinates_tempCoordinates_2_o_ap_vld <= call_ret5_master_ip_get_gps_info_from_ubx_fu_166_uart_to_coordinates_tempCoordinates_2_o_ap_vld;

    -- uart_to_coordinates_uart_state_V_o assign process. --
    uart_to_coordinates_uart_state_V_o_assign_proc : process(ap_start, ap_sig_cseq_ST_pp0_stg0_fsm_0, ap_reg_ppiten_pp0_it0, ap_ce, uart_to_coordinates_uart_state_V_i, call_ret6_master_ip_uart_to_byte_fu_187_uart_to_coordinates_uart_state_V_o, call_ret6_master_ip_uart_to_byte_fu_187_uart_to_coordinates_uart_state_V_o_ap_vld)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_0) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and not(((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_ce) and (ap_const_logic_1 = call_ret6_master_ip_uart_to_byte_fu_187_uart_to_coordinates_uart_state_V_o_ap_vld))) then 
            uart_to_coordinates_uart_state_V_o <= call_ret6_master_ip_uart_to_byte_fu_187_uart_to_coordinates_uart_state_V_o;
        else 
            uart_to_coordinates_uart_state_V_o <= uart_to_coordinates_uart_state_V_i;
        end if; 
    end process;

    uart_to_coordinates_uart_state_V_o_ap_vld <= call_ret6_master_ip_uart_to_byte_fu_187_uart_to_coordinates_uart_state_V_o_ap_vld;
end behav;
