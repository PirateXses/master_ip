-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2015.4
-- Copyright (C) 2015 Xilinx Inc. All rights reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity master_ip is
generic (
    C_S_AXI_AXILITES_ADDR_WIDTH : INTEGER := 5;
    C_S_AXI_AXILITES_DATA_WIDTH : INTEGER := 32 );
port (
    ap_clk : IN STD_LOGIC;
    ap_rst_n : IN STD_LOGIC;
    uart1_V : IN STD_LOGIC_VECTOR (0 downto 0);
    uart2_V : IN STD_LOGIC_VECTOR (0 downto 0);
    alert_V : OUT STD_LOGIC_VECTOR (0 downto 0);
    s_axi_AXILiteS_AWVALID : IN STD_LOGIC;
    s_axi_AXILiteS_AWREADY : OUT STD_LOGIC;
    s_axi_AXILiteS_AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_AXILITES_ADDR_WIDTH-1 downto 0);
    s_axi_AXILiteS_WVALID : IN STD_LOGIC;
    s_axi_AXILiteS_WREADY : OUT STD_LOGIC;
    s_axi_AXILiteS_WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_AXILITES_DATA_WIDTH-1 downto 0);
    s_axi_AXILiteS_WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_AXILITES_DATA_WIDTH/8-1 downto 0);
    s_axi_AXILiteS_ARVALID : IN STD_LOGIC;
    s_axi_AXILiteS_ARREADY : OUT STD_LOGIC;
    s_axi_AXILiteS_ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_AXILITES_ADDR_WIDTH-1 downto 0);
    s_axi_AXILiteS_RVALID : OUT STD_LOGIC;
    s_axi_AXILiteS_RREADY : IN STD_LOGIC;
    s_axi_AXILiteS_RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_AXILITES_DATA_WIDTH-1 downto 0);
    s_axi_AXILiteS_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    s_axi_AXILiteS_BVALID : OUT STD_LOGIC;
    s_axi_AXILiteS_BREADY : IN STD_LOGIC;
    s_axi_AXILiteS_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0) );
end;


architecture behav of master_ip is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "master_ip,hls_ip_2015_4,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=1,HLS_INPUT_PART=xc7z020clg484-1,HLS_INPUT_CLOCK=20.000000,HLS_INPUT_ARCH=pipeline,HLS_SYN_CLOCK=27.316000,HLS_SYN_LAT=37,HLS_SYN_TPT=2,HLS_SYN_MEM=0,HLS_SYN_DSP=25,HLS_SYN_FF=4141,HLS_SYN_LUT=8709}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_pp0_stg0_fsm_0 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_ST_pp0_stg1_fsm_1 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant C_S_AXI_DATA_WIDTH : INTEGER range 63 downto 0 := 20;
    constant ap_true : BOOLEAN := true;
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_3F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111111";
    constant ap_const_lv32_34 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110100";
    constant ap_const_lv32_3E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111110";
    constant ap_const_lv12_C01 : STD_LOGIC_VECTOR (11 downto 0) := "110000000001";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv11_3FF : STD_LOGIC_VECTOR (10 downto 0) := "01111111111";
    constant ap_const_lv32_53 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001010011";
    constant ap_const_lv32_3E8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000001111101000";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";

    signal ap_rst_n_inv : STD_LOGIC;
    signal axi_byte_V : STD_LOGIC_VECTOR (7 downto 0);
    signal signal1_ck_a_V : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    signal signal1_ck_b_V : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    signal signal1_current_out_byte_V : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    signal signal1_gnss_state_V : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    signal coordinates1_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal coordinates1_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal coordinates1_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal signal1_count_V : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    signal signal1_previous_input_V : STD_LOGIC_VECTOR (0 downto 0) := "0";
    signal signal1_uart_state_V : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    signal signal1_next_out_byte_V : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    signal signal1_tempCoordinates_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    signal signal1_tempCoordinates_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal signal1_tempCoordinates_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal signal2_ck_a_V : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    signal signal2_ck_b_V : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    signal signal2_current_out_byte_V : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    signal signal2_gnss_state_V : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    signal coordinates2_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal coordinates2_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal coordinates2_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal signal2_count_V : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    signal signal2_previous_input_V : STD_LOGIC_VECTOR (0 downto 0) := "0";
    signal signal2_uart_state_V : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    signal signal2_next_out_byte_V : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    signal signal2_tempCoordinates_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    signal signal2_tempCoordinates_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal signal2_tempCoordinates_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal master_ip_AXILiteS_s_axi_U_ap_dummy_ce : STD_LOGIC;
    signal newret7_reg_541 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm : STD_LOGIC_VECTOR (1 downto 0) := "01";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_sig_cseq_ST_pp0_stg1_fsm_1 : STD_LOGIC;
    signal ap_sig_bdd_93 : BOOLEAN;
    signal ap_reg_ppiten_pp0_it0 : STD_LOGIC;
    signal ap_reg_ppiten_pp0_it1 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp0_it2 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp0_it3 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp0_it4 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp0_it5 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp0_it6 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp0_it7 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp0_it8 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp0_it9 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp0_it10 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp0_it11 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp0_it12 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp0_it13 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp0_it14 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp0_it15 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp0_it16 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp0_it17 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp0_it18 : STD_LOGIC := '0';
    signal newret8_reg_546 : STD_LOGIC_VECTOR (31 downto 0);
    signal newret9_reg_551 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_i_fu_383_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_i_reg_556 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_sig_cseq_ST_pp0_stg0_fsm_0 : STD_LOGIC;
    signal ap_sig_bdd_145 : BOOLEAN;
    signal tmp_96_i_fu_388_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_96_i_reg_561 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_100_i_fu_393_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_100_i_reg_566 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_190_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_i_12_reg_571 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_193_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_97_i_reg_577 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_101_i_reg_583 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_182_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_95_i_reg_589 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_186_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_98_i_reg_594 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_102_i_reg_599 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_reg_ppstg_tmp_102_i_reg_599_pp0_it6 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_reg_ppstg_tmp_102_i_reg_599_pp0_it7 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_178_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_99_i_reg_604 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_103_i_reg_609 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_196_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal x_assign_reg_614 : STD_LOGIC_VECTOR (63 downto 0);
    signal p_Result_s_reg_619 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Result_1_fu_423_p3 : STD_LOGIC_VECTOR (52 downto 0);
    signal p_Result_1_reg_624 : STD_LOGIC_VECTOR (52 downto 0);
    signal isNeg_fu_441_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal isNeg_reg_629 : STD_LOGIC_VECTOR (0 downto 0);
    signal sh_assign_1_cast_fu_467_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal sh_assign_1_cast_reg_634 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_reg_639 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_master_ip_mainFunction_fu_143_ap_start : STD_LOGIC;
    signal grp_master_ip_mainFunction_fu_143_ap_done : STD_LOGIC;
    signal grp_master_ip_mainFunction_fu_143_ap_idle : STD_LOGIC;
    signal grp_master_ip_mainFunction_fu_143_ap_ready : STD_LOGIC;
    signal grp_master_ip_mainFunction_fu_143_ap_ce : STD_LOGIC;
    signal grp_master_ip_mainFunction_fu_143_uart_to_coordinates_count_V_i : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_master_ip_mainFunction_fu_143_uart_to_coordinates_count_V_o : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_master_ip_mainFunction_fu_143_uart_to_coordinates_count_V_o_ap_vld : STD_LOGIC;
    signal grp_master_ip_mainFunction_fu_143_uart_to_coordinates_previous_input_V_i : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_master_ip_mainFunction_fu_143_uart_to_coordinates_previous_input_V_o : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_master_ip_mainFunction_fu_143_uart_to_coordinates_previous_input_V_o_ap_vld : STD_LOGIC;
    signal grp_master_ip_mainFunction_fu_143_uart_to_coordinates_uart_state_V_i : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_master_ip_mainFunction_fu_143_uart_to_coordinates_uart_state_V_o : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_master_ip_mainFunction_fu_143_uart_to_coordinates_uart_state_V_o_ap_vld : STD_LOGIC;
    signal grp_master_ip_mainFunction_fu_143_uart_to_coordinates_next_out_byte_V_i : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_master_ip_mainFunction_fu_143_uart_to_coordinates_next_out_byte_V_o : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_master_ip_mainFunction_fu_143_uart_to_coordinates_next_out_byte_V_o_ap_vld : STD_LOGIC;
    signal grp_master_ip_mainFunction_fu_143_uart_to_coordinates_current_out_byte_V_read : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_master_ip_mainFunction_fu_143_uart_to_coordinates_gnss_state_V_read : STD_LOGIC_VECTOR (5 downto 0);
    signal grp_master_ip_mainFunction_fu_143_uart_to_coordinates_ck_a_V_read : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_master_ip_mainFunction_fu_143_uart_to_coordinates_ck_b_V_read : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_master_ip_mainFunction_fu_143_uart_to_coordinates_tempCoordinates_0_i : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_master_ip_mainFunction_fu_143_uart_to_coordinates_tempCoordinates_0_o : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_master_ip_mainFunction_fu_143_uart_to_coordinates_tempCoordinates_0_o_ap_vld : STD_LOGIC;
    signal grp_master_ip_mainFunction_fu_143_uart_to_coordinates_tempCoordinates_1_i : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_master_ip_mainFunction_fu_143_uart_to_coordinates_tempCoordinates_1_o : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_master_ip_mainFunction_fu_143_uart_to_coordinates_tempCoordinates_1_o_ap_vld : STD_LOGIC;
    signal grp_master_ip_mainFunction_fu_143_uart_to_coordinates_tempCoordinates_2_i : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_master_ip_mainFunction_fu_143_uart_to_coordinates_tempCoordinates_2_o : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_master_ip_mainFunction_fu_143_uart_to_coordinates_tempCoordinates_2_o_ap_vld : STD_LOGIC;
    signal grp_master_ip_mainFunction_fu_143_input_V_read : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_master_ip_mainFunction_fu_143_p_read : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_master_ip_mainFunction_fu_143_p_read2 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_master_ip_mainFunction_fu_143_p_read5 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_master_ip_mainFunction_fu_143_ap_return_0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_master_ip_mainFunction_fu_143_ap_return_1 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_master_ip_mainFunction_fu_143_ap_return_2 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_master_ip_mainFunction_fu_143_ap_return_3 : STD_LOGIC_VECTOR (5 downto 0);
    signal grp_master_ip_mainFunction_fu_143_ap_return_4 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_master_ip_mainFunction_fu_143_ap_return_5 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_master_ip_mainFunction_fu_143_ap_return_6 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_master_ip_mainFunction_fu_143_ap_start_ap_start_reg : STD_LOGIC := '0';
    signal ap_NS_fsm : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_sig_start_in_grp_master_ip_mainFunction_fu_143_ap_start : STD_LOGIC;
    signal grp_fu_178_p0 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_178_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_182_p0 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_182_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_190_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Val2_s_fu_398_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal loc_V_1_fu_419_p1 : STD_LOGIC_VECTOR (51 downto 0);
    signal loc_V_fu_409_p4 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_i_i_i_i_cast1_fu_431_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal sh_assign_fu_435_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_i_i_i_13_fu_449_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_i_i_i_cast_fu_455_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal sh_assign_1_fu_459_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_88_i_i_i_cast_fu_471_p1 : STD_LOGIC_VECTOR (52 downto 0);
    signal tmp_89_i_i_i_fu_475_p2 : STD_LOGIC_VECTOR (52 downto 0);
    signal tmp_i_i_i_fu_489_p1 : STD_LOGIC_VECTOR (135 downto 0);
    signal tmp_88_i_i_i_fu_492_p1 : STD_LOGIC_VECTOR (135 downto 0);
    signal tmp_91_i_i_i_fu_495_p2 : STD_LOGIC_VECTOR (135 downto 0);
    signal tmp_3_fu_501_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_4_fu_504_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Val2_3_fu_514_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Val2_7_i_i_i_fu_521_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Val2_5_fu_527_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_178_ce : STD_LOGIC;
    signal grp_fu_182_ce : STD_LOGIC;
    signal grp_fu_186_ce : STD_LOGIC;
    signal grp_fu_190_ce : STD_LOGIC;
    signal grp_fu_193_ce : STD_LOGIC;
    signal grp_fu_196_ce : STD_LOGIC;
    signal ap_sig_pprstidle_pp0 : STD_LOGIC;

    component master_ip_mainFunction IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_ce : IN STD_LOGIC;
        uart_to_coordinates_count_V_i : IN STD_LOGIC_VECTOR (15 downto 0);
        uart_to_coordinates_count_V_o : OUT STD_LOGIC_VECTOR (15 downto 0);
        uart_to_coordinates_count_V_o_ap_vld : OUT STD_LOGIC;
        uart_to_coordinates_previous_input_V_i : IN STD_LOGIC_VECTOR (0 downto 0);
        uart_to_coordinates_previous_input_V_o : OUT STD_LOGIC_VECTOR (0 downto 0);
        uart_to_coordinates_previous_input_V_o_ap_vld : OUT STD_LOGIC;
        uart_to_coordinates_uart_state_V_i : IN STD_LOGIC_VECTOR (3 downto 0);
        uart_to_coordinates_uart_state_V_o : OUT STD_LOGIC_VECTOR (3 downto 0);
        uart_to_coordinates_uart_state_V_o_ap_vld : OUT STD_LOGIC;
        uart_to_coordinates_next_out_byte_V_i : IN STD_LOGIC_VECTOR (7 downto 0);
        uart_to_coordinates_next_out_byte_V_o : OUT STD_LOGIC_VECTOR (7 downto 0);
        uart_to_coordinates_next_out_byte_V_o_ap_vld : OUT STD_LOGIC;
        uart_to_coordinates_current_out_byte_V_read : IN STD_LOGIC_VECTOR (7 downto 0);
        uart_to_coordinates_gnss_state_V_read : IN STD_LOGIC_VECTOR (5 downto 0);
        uart_to_coordinates_ck_a_V_read : IN STD_LOGIC_VECTOR (7 downto 0);
        uart_to_coordinates_ck_b_V_read : IN STD_LOGIC_VECTOR (7 downto 0);
        uart_to_coordinates_tempCoordinates_0_i : IN STD_LOGIC_VECTOR (31 downto 0);
        uart_to_coordinates_tempCoordinates_0_o : OUT STD_LOGIC_VECTOR (31 downto 0);
        uart_to_coordinates_tempCoordinates_0_o_ap_vld : OUT STD_LOGIC;
        uart_to_coordinates_tempCoordinates_1_i : IN STD_LOGIC_VECTOR (31 downto 0);
        uart_to_coordinates_tempCoordinates_1_o : OUT STD_LOGIC_VECTOR (31 downto 0);
        uart_to_coordinates_tempCoordinates_1_o_ap_vld : OUT STD_LOGIC;
        uart_to_coordinates_tempCoordinates_2_i : IN STD_LOGIC_VECTOR (31 downto 0);
        uart_to_coordinates_tempCoordinates_2_o : OUT STD_LOGIC_VECTOR (31 downto 0);
        uart_to_coordinates_tempCoordinates_2_o_ap_vld : OUT STD_LOGIC;
        input_V_read : IN STD_LOGIC_VECTOR (0 downto 0);
        p_read : IN STD_LOGIC_VECTOR (31 downto 0);
        p_read2 : IN STD_LOGIC_VECTOR (31 downto 0);
        p_read5 : IN STD_LOGIC_VECTOR (31 downto 0);
        ap_return_0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        ap_return_1 : OUT STD_LOGIC_VECTOR (7 downto 0);
        ap_return_2 : OUT STD_LOGIC_VECTOR (7 downto 0);
        ap_return_3 : OUT STD_LOGIC_VECTOR (5 downto 0);
        ap_return_4 : OUT STD_LOGIC_VECTOR (31 downto 0);
        ap_return_5 : OUT STD_LOGIC_VECTOR (31 downto 0);
        ap_return_6 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component master_ip_dadd_64ns_64ns_64_4_full_dsp IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (63 downto 0);
        din1 : IN STD_LOGIC_VECTOR (63 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component master_ip_dmul_64ns_64ns_64_4_max_dsp IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (63 downto 0);
        din1 : IN STD_LOGIC_VECTOR (63 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component master_ip_sitodp_32ns_64_3 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component master_ip_dsqrt_64ns_64ns_64_17 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (63 downto 0);
        din1 : IN STD_LOGIC_VECTOR (63 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component master_ip_AXILiteS_s_axi IS
    generic (
        C_S_AXI_ADDR_WIDTH : INTEGER;
        C_S_AXI_DATA_WIDTH : INTEGER );
    port (
        AWVALID : IN STD_LOGIC;
        AWREADY : OUT STD_LOGIC;
        AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        WVALID : IN STD_LOGIC;
        WREADY : OUT STD_LOGIC;
        WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH/8-1 downto 0);
        ARVALID : IN STD_LOGIC;
        ARREADY : OUT STD_LOGIC;
        ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        RVALID : OUT STD_LOGIC;
        RREADY : IN STD_LOGIC;
        RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        BVALID : OUT STD_LOGIC;
        BREADY : IN STD_LOGIC;
        BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        axi_byte_V : OUT STD_LOGIC_VECTOR (7 downto 0) );
    end component;



begin
    master_ip_AXILiteS_s_axi_U : component master_ip_AXILiteS_s_axi
    generic map (
        C_S_AXI_ADDR_WIDTH => C_S_AXI_AXILITES_ADDR_WIDTH,
        C_S_AXI_DATA_WIDTH => C_S_AXI_AXILITES_DATA_WIDTH)
    port map (
        AWVALID => s_axi_AXILiteS_AWVALID,
        AWREADY => s_axi_AXILiteS_AWREADY,
        AWADDR => s_axi_AXILiteS_AWADDR,
        WVALID => s_axi_AXILiteS_WVALID,
        WREADY => s_axi_AXILiteS_WREADY,
        WDATA => s_axi_AXILiteS_WDATA,
        WSTRB => s_axi_AXILiteS_WSTRB,
        ARVALID => s_axi_AXILiteS_ARVALID,
        ARREADY => s_axi_AXILiteS_ARREADY,
        ARADDR => s_axi_AXILiteS_ARADDR,
        RVALID => s_axi_AXILiteS_RVALID,
        RREADY => s_axi_AXILiteS_RREADY,
        RDATA => s_axi_AXILiteS_RDATA,
        RRESP => s_axi_AXILiteS_RRESP,
        BVALID => s_axi_AXILiteS_BVALID,
        BREADY => s_axi_AXILiteS_BREADY,
        BRESP => s_axi_AXILiteS_BRESP,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => master_ip_AXILiteS_s_axi_U_ap_dummy_ce,
        axi_byte_V => axi_byte_V);

    grp_master_ip_mainFunction_fu_143 : component master_ip_mainFunction
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => grp_master_ip_mainFunction_fu_143_ap_start,
        ap_done => grp_master_ip_mainFunction_fu_143_ap_done,
        ap_idle => grp_master_ip_mainFunction_fu_143_ap_idle,
        ap_ready => grp_master_ip_mainFunction_fu_143_ap_ready,
        ap_ce => grp_master_ip_mainFunction_fu_143_ap_ce,
        uart_to_coordinates_count_V_i => grp_master_ip_mainFunction_fu_143_uart_to_coordinates_count_V_i,
        uart_to_coordinates_count_V_o => grp_master_ip_mainFunction_fu_143_uart_to_coordinates_count_V_o,
        uart_to_coordinates_count_V_o_ap_vld => grp_master_ip_mainFunction_fu_143_uart_to_coordinates_count_V_o_ap_vld,
        uart_to_coordinates_previous_input_V_i => grp_master_ip_mainFunction_fu_143_uart_to_coordinates_previous_input_V_i,
        uart_to_coordinates_previous_input_V_o => grp_master_ip_mainFunction_fu_143_uart_to_coordinates_previous_input_V_o,
        uart_to_coordinates_previous_input_V_o_ap_vld => grp_master_ip_mainFunction_fu_143_uart_to_coordinates_previous_input_V_o_ap_vld,
        uart_to_coordinates_uart_state_V_i => grp_master_ip_mainFunction_fu_143_uart_to_coordinates_uart_state_V_i,
        uart_to_coordinates_uart_state_V_o => grp_master_ip_mainFunction_fu_143_uart_to_coordinates_uart_state_V_o,
        uart_to_coordinates_uart_state_V_o_ap_vld => grp_master_ip_mainFunction_fu_143_uart_to_coordinates_uart_state_V_o_ap_vld,
        uart_to_coordinates_next_out_byte_V_i => grp_master_ip_mainFunction_fu_143_uart_to_coordinates_next_out_byte_V_i,
        uart_to_coordinates_next_out_byte_V_o => grp_master_ip_mainFunction_fu_143_uart_to_coordinates_next_out_byte_V_o,
        uart_to_coordinates_next_out_byte_V_o_ap_vld => grp_master_ip_mainFunction_fu_143_uart_to_coordinates_next_out_byte_V_o_ap_vld,
        uart_to_coordinates_current_out_byte_V_read => grp_master_ip_mainFunction_fu_143_uart_to_coordinates_current_out_byte_V_read,
        uart_to_coordinates_gnss_state_V_read => grp_master_ip_mainFunction_fu_143_uart_to_coordinates_gnss_state_V_read,
        uart_to_coordinates_ck_a_V_read => grp_master_ip_mainFunction_fu_143_uart_to_coordinates_ck_a_V_read,
        uart_to_coordinates_ck_b_V_read => grp_master_ip_mainFunction_fu_143_uart_to_coordinates_ck_b_V_read,
        uart_to_coordinates_tempCoordinates_0_i => grp_master_ip_mainFunction_fu_143_uart_to_coordinates_tempCoordinates_0_i,
        uart_to_coordinates_tempCoordinates_0_o => grp_master_ip_mainFunction_fu_143_uart_to_coordinates_tempCoordinates_0_o,
        uart_to_coordinates_tempCoordinates_0_o_ap_vld => grp_master_ip_mainFunction_fu_143_uart_to_coordinates_tempCoordinates_0_o_ap_vld,
        uart_to_coordinates_tempCoordinates_1_i => grp_master_ip_mainFunction_fu_143_uart_to_coordinates_tempCoordinates_1_i,
        uart_to_coordinates_tempCoordinates_1_o => grp_master_ip_mainFunction_fu_143_uart_to_coordinates_tempCoordinates_1_o,
        uart_to_coordinates_tempCoordinates_1_o_ap_vld => grp_master_ip_mainFunction_fu_143_uart_to_coordinates_tempCoordinates_1_o_ap_vld,
        uart_to_coordinates_tempCoordinates_2_i => grp_master_ip_mainFunction_fu_143_uart_to_coordinates_tempCoordinates_2_i,
        uart_to_coordinates_tempCoordinates_2_o => grp_master_ip_mainFunction_fu_143_uart_to_coordinates_tempCoordinates_2_o,
        uart_to_coordinates_tempCoordinates_2_o_ap_vld => grp_master_ip_mainFunction_fu_143_uart_to_coordinates_tempCoordinates_2_o_ap_vld,
        input_V_read => grp_master_ip_mainFunction_fu_143_input_V_read,
        p_read => grp_master_ip_mainFunction_fu_143_p_read,
        p_read2 => grp_master_ip_mainFunction_fu_143_p_read2,
        p_read5 => grp_master_ip_mainFunction_fu_143_p_read5,
        ap_return_0 => grp_master_ip_mainFunction_fu_143_ap_return_0,
        ap_return_1 => grp_master_ip_mainFunction_fu_143_ap_return_1,
        ap_return_2 => grp_master_ip_mainFunction_fu_143_ap_return_2,
        ap_return_3 => grp_master_ip_mainFunction_fu_143_ap_return_3,
        ap_return_4 => grp_master_ip_mainFunction_fu_143_ap_return_4,
        ap_return_5 => grp_master_ip_mainFunction_fu_143_ap_return_5,
        ap_return_6 => grp_master_ip_mainFunction_fu_143_ap_return_6);

    master_ip_dadd_64ns_64ns_64_4_full_dsp_U31 : component master_ip_dadd_64ns_64ns_64_4_full_dsp
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => grp_fu_178_p0,
        din1 => grp_fu_178_p1,
        ce => grp_fu_178_ce,
        dout => grp_fu_178_p2);

    master_ip_dmul_64ns_64ns_64_4_max_dsp_U32 : component master_ip_dmul_64ns_64ns_64_4_max_dsp
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => grp_fu_182_p0,
        din1 => grp_fu_182_p1,
        ce => grp_fu_182_ce,
        dout => grp_fu_182_p2);

    master_ip_dmul_64ns_64ns_64_4_max_dsp_U33 : component master_ip_dmul_64ns_64ns_64_4_max_dsp
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => tmp_97_i_reg_577,
        din1 => tmp_97_i_reg_577,
        ce => grp_fu_186_ce,
        dout => grp_fu_186_p2);

    master_ip_sitodp_32ns_64_3_U34 : component master_ip_sitodp_32ns_64_3
    generic map (
        ID => 1,
        NUM_STAGE => 3,
        din0_WIDTH => 32,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => grp_fu_190_p0,
        ce => grp_fu_190_ce,
        dout => grp_fu_190_p1);

    master_ip_sitodp_32ns_64_3_U35 : component master_ip_sitodp_32ns_64_3
    generic map (
        ID => 1,
        NUM_STAGE => 3,
        din0_WIDTH => 32,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => tmp_96_i_reg_561,
        ce => grp_fu_193_ce,
        dout => grp_fu_193_p1);

    master_ip_dsqrt_64ns_64ns_64_17_U36 : component master_ip_dsqrt_64ns_64ns_64_17
    generic map (
        ID => 1,
        NUM_STAGE => 17,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => ap_const_lv64_0,
        din1 => tmp_103_i_reg_609,
        ce => grp_fu_196_ce,
        dout => grp_fu_196_p2);





    -- the current state (ap_CS_fsm) of the state machine. --
    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_CS_fsm <= ap_ST_pp0_stg0_fsm_0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp0_it1 assign process. --
    ap_reg_ppiten_pp0_it1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_reg_ppiten_pp0_it1 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg1_fsm_1)) then 
                    ap_reg_ppiten_pp0_it1 <= ap_reg_ppiten_pp0_it0;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp0_it10 assign process. --
    ap_reg_ppiten_pp0_it10_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_reg_ppiten_pp0_it10 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg1_fsm_1)) then 
                    ap_reg_ppiten_pp0_it10 <= ap_reg_ppiten_pp0_it9;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp0_it11 assign process. --
    ap_reg_ppiten_pp0_it11_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_reg_ppiten_pp0_it11 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg1_fsm_1)) then 
                    ap_reg_ppiten_pp0_it11 <= ap_reg_ppiten_pp0_it10;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp0_it12 assign process. --
    ap_reg_ppiten_pp0_it12_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_reg_ppiten_pp0_it12 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg1_fsm_1)) then 
                    ap_reg_ppiten_pp0_it12 <= ap_reg_ppiten_pp0_it11;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp0_it13 assign process. --
    ap_reg_ppiten_pp0_it13_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_reg_ppiten_pp0_it13 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg1_fsm_1)) then 
                    ap_reg_ppiten_pp0_it13 <= ap_reg_ppiten_pp0_it12;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp0_it14 assign process. --
    ap_reg_ppiten_pp0_it14_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_reg_ppiten_pp0_it14 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg1_fsm_1)) then 
                    ap_reg_ppiten_pp0_it14 <= ap_reg_ppiten_pp0_it13;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp0_it15 assign process. --
    ap_reg_ppiten_pp0_it15_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_reg_ppiten_pp0_it15 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg1_fsm_1)) then 
                    ap_reg_ppiten_pp0_it15 <= ap_reg_ppiten_pp0_it14;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp0_it16 assign process. --
    ap_reg_ppiten_pp0_it16_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_reg_ppiten_pp0_it16 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg1_fsm_1)) then 
                    ap_reg_ppiten_pp0_it16 <= ap_reg_ppiten_pp0_it15;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp0_it17 assign process. --
    ap_reg_ppiten_pp0_it17_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_reg_ppiten_pp0_it17 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg1_fsm_1)) then 
                    ap_reg_ppiten_pp0_it17 <= ap_reg_ppiten_pp0_it16;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp0_it18 assign process. --
    ap_reg_ppiten_pp0_it18_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_reg_ppiten_pp0_it18 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg1_fsm_1)) then 
                    ap_reg_ppiten_pp0_it18 <= ap_reg_ppiten_pp0_it17;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp0_it2 assign process. --
    ap_reg_ppiten_pp0_it2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_reg_ppiten_pp0_it2 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg1_fsm_1)) then 
                    ap_reg_ppiten_pp0_it2 <= ap_reg_ppiten_pp0_it1;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp0_it3 assign process. --
    ap_reg_ppiten_pp0_it3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_reg_ppiten_pp0_it3 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg1_fsm_1)) then 
                    ap_reg_ppiten_pp0_it3 <= ap_reg_ppiten_pp0_it2;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp0_it4 assign process. --
    ap_reg_ppiten_pp0_it4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_reg_ppiten_pp0_it4 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg1_fsm_1)) then 
                    ap_reg_ppiten_pp0_it4 <= ap_reg_ppiten_pp0_it3;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp0_it5 assign process. --
    ap_reg_ppiten_pp0_it5_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_reg_ppiten_pp0_it5 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg1_fsm_1)) then 
                    ap_reg_ppiten_pp0_it5 <= ap_reg_ppiten_pp0_it4;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp0_it6 assign process. --
    ap_reg_ppiten_pp0_it6_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_reg_ppiten_pp0_it6 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg1_fsm_1)) then 
                    ap_reg_ppiten_pp0_it6 <= ap_reg_ppiten_pp0_it5;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp0_it7 assign process. --
    ap_reg_ppiten_pp0_it7_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_reg_ppiten_pp0_it7 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg1_fsm_1)) then 
                    ap_reg_ppiten_pp0_it7 <= ap_reg_ppiten_pp0_it6;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp0_it8 assign process. --
    ap_reg_ppiten_pp0_it8_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_reg_ppiten_pp0_it8 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg1_fsm_1)) then 
                    ap_reg_ppiten_pp0_it8 <= ap_reg_ppiten_pp0_it7;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp0_it9 assign process. --
    ap_reg_ppiten_pp0_it9_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_reg_ppiten_pp0_it9 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg1_fsm_1)) then 
                    ap_reg_ppiten_pp0_it9 <= ap_reg_ppiten_pp0_it8;
                end if; 
            end if;
        end if;
    end process;


    -- grp_master_ip_mainFunction_fu_143_ap_start_ap_start_reg assign process. --
    grp_master_ip_mainFunction_fu_143_ap_start_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                grp_master_ip_mainFunction_fu_143_ap_start_ap_start_reg <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_const_logic_1) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_0))) then 
                    grp_master_ip_mainFunction_fu_143_ap_start_ap_start_reg <= ap_const_logic_1;
                elsif ((ap_const_logic_1 = grp_master_ip_mainFunction_fu_143_ap_ready)) then 
                    grp_master_ip_mainFunction_fu_143_ap_start_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_0)) then
                ap_reg_ppstg_tmp_102_i_reg_599_pp0_it6 <= tmp_102_i_reg_599;
                ap_reg_ppstg_tmp_102_i_reg_599_pp0_it7 <= ap_reg_ppstg_tmp_102_i_reg_599_pp0_it6;
                isNeg_reg_629 <= sh_assign_fu_435_p2(11 downto 11);
                    p_Result_1_reg_624(51 downto 0) <= p_Result_1_fu_423_p3(51 downto 0);
                p_Result_s_reg_619 <= p_Val2_s_fu_398_p1(63 downto 63);
                sh_assign_1_cast_reg_634 <= sh_assign_1_cast_fu_467_p1;
                tmp_100_i_reg_566 <= tmp_100_i_fu_393_p2;
                tmp_96_i_reg_561 <= tmp_96_i_fu_388_p2;
                tmp_i_reg_556 <= tmp_i_fu_383_p2;
                tmp_reg_639 <= tmp_89_i_i_i_fu_475_p2(52 downto 52);
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg1_fsm_1) and (ap_const_logic_1 = ap_const_logic_1))) then
                coordinates1_0 <= grp_master_ip_mainFunction_fu_143_ap_return_4;
                coordinates1_1 <= grp_master_ip_mainFunction_fu_143_ap_return_5;
                coordinates1_2 <= grp_master_ip_mainFunction_fu_143_ap_return_6;
                newret7_reg_541 <= grp_master_ip_mainFunction_fu_143_ap_return_4;
                newret8_reg_546 <= grp_master_ip_mainFunction_fu_143_ap_return_5;
                newret9_reg_551 <= grp_master_ip_mainFunction_fu_143_ap_return_6;
                signal1_ck_a_V <= grp_master_ip_mainFunction_fu_143_ap_return_0;
                signal1_ck_b_V <= grp_master_ip_mainFunction_fu_143_ap_return_1;
                signal1_current_out_byte_V <= grp_master_ip_mainFunction_fu_143_ap_return_2;
                signal1_gnss_state_V <= grp_master_ip_mainFunction_fu_143_ap_return_3;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_reg_ppiten_pp0_it1) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_0))) then
                coordinates2_0 <= grp_master_ip_mainFunction_fu_143_ap_return_4;
                coordinates2_1 <= grp_master_ip_mainFunction_fu_143_ap_return_5;
                coordinates2_2 <= grp_master_ip_mainFunction_fu_143_ap_return_6;
                signal2_ck_a_V <= grp_master_ip_mainFunction_fu_143_ap_return_0;
                signal2_ck_b_V <= grp_master_ip_mainFunction_fu_143_ap_return_1;
                signal2_current_out_byte_V <= grp_master_ip_mainFunction_fu_143_ap_return_2;
                signal2_gnss_state_V <= grp_master_ip_mainFunction_fu_143_ap_return_3;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((((ap_const_logic_1 = ap_const_logic_1) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_0) and (ap_const_logic_1 = grp_master_ip_mainFunction_fu_143_uart_to_coordinates_count_V_o_ap_vld)) or ((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg1_fsm_1) and (ap_const_logic_1 = ap_const_logic_1) and (ap_const_logic_1 = grp_master_ip_mainFunction_fu_143_uart_to_coordinates_count_V_o_ap_vld)))) then
                signal1_count_V <= grp_master_ip_mainFunction_fu_143_uart_to_coordinates_count_V_o;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((((ap_const_logic_1 = ap_const_logic_1) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_0) and (ap_const_logic_1 = grp_master_ip_mainFunction_fu_143_uart_to_coordinates_next_out_byte_V_o_ap_vld)) or ((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg1_fsm_1) and (ap_const_logic_1 = ap_const_logic_1) and (ap_const_logic_1 = grp_master_ip_mainFunction_fu_143_uart_to_coordinates_next_out_byte_V_o_ap_vld)))) then
                signal1_next_out_byte_V <= grp_master_ip_mainFunction_fu_143_uart_to_coordinates_next_out_byte_V_o;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((((ap_const_logic_1 = ap_const_logic_1) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_0) and (ap_const_logic_1 = grp_master_ip_mainFunction_fu_143_uart_to_coordinates_previous_input_V_o_ap_vld)) or ((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg1_fsm_1) and (ap_const_logic_1 = ap_const_logic_1) and (ap_const_logic_1 = grp_master_ip_mainFunction_fu_143_uart_to_coordinates_previous_input_V_o_ap_vld)))) then
                signal1_previous_input_V <= grp_master_ip_mainFunction_fu_143_uart_to_coordinates_previous_input_V_o;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((((ap_const_logic_1 = ap_const_logic_1) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_0) and (ap_const_logic_1 = grp_master_ip_mainFunction_fu_143_uart_to_coordinates_tempCoordinates_0_o_ap_vld)) or ((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg1_fsm_1) and (ap_const_logic_1 = ap_const_logic_1) and (ap_const_logic_1 = grp_master_ip_mainFunction_fu_143_uart_to_coordinates_tempCoordinates_0_o_ap_vld)))) then
                signal1_tempCoordinates_0 <= grp_master_ip_mainFunction_fu_143_uart_to_coordinates_tempCoordinates_0_o;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((((ap_const_logic_1 = ap_const_logic_1) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_0) and (ap_const_logic_1 = grp_master_ip_mainFunction_fu_143_uart_to_coordinates_tempCoordinates_1_o_ap_vld)) or ((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg1_fsm_1) and (ap_const_logic_1 = ap_const_logic_1) and (ap_const_logic_1 = grp_master_ip_mainFunction_fu_143_uart_to_coordinates_tempCoordinates_1_o_ap_vld)))) then
                signal1_tempCoordinates_1 <= grp_master_ip_mainFunction_fu_143_uart_to_coordinates_tempCoordinates_1_o;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((((ap_const_logic_1 = ap_const_logic_1) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_0) and (ap_const_logic_1 = grp_master_ip_mainFunction_fu_143_uart_to_coordinates_tempCoordinates_2_o_ap_vld)) or ((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg1_fsm_1) and (ap_const_logic_1 = ap_const_logic_1) and (ap_const_logic_1 = grp_master_ip_mainFunction_fu_143_uart_to_coordinates_tempCoordinates_2_o_ap_vld)))) then
                signal1_tempCoordinates_2 <= grp_master_ip_mainFunction_fu_143_uart_to_coordinates_tempCoordinates_2_o;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((((ap_const_logic_1 = ap_const_logic_1) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_0) and (ap_const_logic_1 = grp_master_ip_mainFunction_fu_143_uart_to_coordinates_uart_state_V_o_ap_vld)) or ((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg1_fsm_1) and (ap_const_logic_1 = ap_const_logic_1) and (ap_const_logic_1 = grp_master_ip_mainFunction_fu_143_uart_to_coordinates_uart_state_V_o_ap_vld)))) then
                signal1_uart_state_V <= grp_master_ip_mainFunction_fu_143_uart_to_coordinates_uart_state_V_o;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg1_fsm_1) and (ap_const_logic_1 = ap_const_logic_1) and (ap_const_logic_1 = grp_master_ip_mainFunction_fu_143_uart_to_coordinates_count_V_o_ap_vld)) or ((ap_const_logic_1 = ap_reg_ppiten_pp0_it1) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_0) and (ap_const_logic_1 = grp_master_ip_mainFunction_fu_143_uart_to_coordinates_count_V_o_ap_vld)))) then
                signal2_count_V <= grp_master_ip_mainFunction_fu_143_uart_to_coordinates_count_V_o;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg1_fsm_1) and (ap_const_logic_1 = ap_const_logic_1) and (ap_const_logic_1 = grp_master_ip_mainFunction_fu_143_uart_to_coordinates_next_out_byte_V_o_ap_vld)) or ((ap_const_logic_1 = ap_reg_ppiten_pp0_it1) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_0) and (ap_const_logic_1 = grp_master_ip_mainFunction_fu_143_uart_to_coordinates_next_out_byte_V_o_ap_vld)))) then
                signal2_next_out_byte_V <= grp_master_ip_mainFunction_fu_143_uart_to_coordinates_next_out_byte_V_o;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg1_fsm_1) and (ap_const_logic_1 = ap_const_logic_1) and (ap_const_logic_1 = grp_master_ip_mainFunction_fu_143_uart_to_coordinates_previous_input_V_o_ap_vld)) or ((ap_const_logic_1 = ap_reg_ppiten_pp0_it1) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_0) and (ap_const_logic_1 = grp_master_ip_mainFunction_fu_143_uart_to_coordinates_previous_input_V_o_ap_vld)))) then
                signal2_previous_input_V <= grp_master_ip_mainFunction_fu_143_uart_to_coordinates_previous_input_V_o;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg1_fsm_1) and (ap_const_logic_1 = ap_const_logic_1) and (ap_const_logic_1 = grp_master_ip_mainFunction_fu_143_uart_to_coordinates_tempCoordinates_0_o_ap_vld)) or ((ap_const_logic_1 = ap_reg_ppiten_pp0_it1) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_0) and (ap_const_logic_1 = grp_master_ip_mainFunction_fu_143_uart_to_coordinates_tempCoordinates_0_o_ap_vld)))) then
                signal2_tempCoordinates_0 <= grp_master_ip_mainFunction_fu_143_uart_to_coordinates_tempCoordinates_0_o;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg1_fsm_1) and (ap_const_logic_1 = ap_const_logic_1) and (ap_const_logic_1 = grp_master_ip_mainFunction_fu_143_uart_to_coordinates_tempCoordinates_1_o_ap_vld)) or ((ap_const_logic_1 = ap_reg_ppiten_pp0_it1) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_0) and (ap_const_logic_1 = grp_master_ip_mainFunction_fu_143_uart_to_coordinates_tempCoordinates_1_o_ap_vld)))) then
                signal2_tempCoordinates_1 <= grp_master_ip_mainFunction_fu_143_uart_to_coordinates_tempCoordinates_1_o;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg1_fsm_1) and (ap_const_logic_1 = ap_const_logic_1) and (ap_const_logic_1 = grp_master_ip_mainFunction_fu_143_uart_to_coordinates_tempCoordinates_2_o_ap_vld)) or ((ap_const_logic_1 = ap_reg_ppiten_pp0_it1) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_0) and (ap_const_logic_1 = grp_master_ip_mainFunction_fu_143_uart_to_coordinates_tempCoordinates_2_o_ap_vld)))) then
                signal2_tempCoordinates_2 <= grp_master_ip_mainFunction_fu_143_uart_to_coordinates_tempCoordinates_2_o;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg1_fsm_1) and (ap_const_logic_1 = ap_const_logic_1) and (ap_const_logic_1 = grp_master_ip_mainFunction_fu_143_uart_to_coordinates_uart_state_V_o_ap_vld)) or ((ap_const_logic_1 = ap_reg_ppiten_pp0_it1) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_0) and (ap_const_logic_1 = grp_master_ip_mainFunction_fu_143_uart_to_coordinates_uart_state_V_o_ap_vld)))) then
                signal2_uart_state_V <= grp_master_ip_mainFunction_fu_143_uart_to_coordinates_uart_state_V_o;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_reg_ppiten_pp0_it3) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_0))) then
                tmp_101_i_reg_583 <= grp_fu_190_p1;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_reg_ppiten_pp0_it5) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_0))) then
                tmp_102_i_reg_599 <= grp_fu_182_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_reg_ppiten_pp0_it9) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_0))) then
                tmp_103_i_reg_609 <= grp_fu_178_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg1_fsm_1) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it4))) then
                tmp_95_i_reg_589 <= grp_fu_182_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg1_fsm_1)) then
                tmp_97_i_reg_577 <= grp_fu_193_p1;
                tmp_98_i_reg_594 <= grp_fu_186_p2;
                x_assign_reg_614 <= grp_fu_196_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg1_fsm_1) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it6))) then
                tmp_99_i_reg_604 <= grp_fu_178_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg1_fsm_1) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it2))) then
                tmp_i_12_reg_571 <= grp_fu_190_p1;
            end if;
        end if;
    end process;
    p_Result_1_reg_624(52) <= '1';

    -- the next state (ap_NS_fsm) of the state machine. --
    ap_NS_fsm_assign_proc : process (ap_CS_fsm, ap_sig_pprstidle_pp0)
    begin
        case ap_CS_fsm is
            when ap_ST_pp0_stg0_fsm_0 => 
                ap_NS_fsm <= ap_ST_pp0_stg1_fsm_1;
            when ap_ST_pp0_stg1_fsm_1 => 
                ap_NS_fsm <= ap_ST_pp0_stg0_fsm_0;
            when others =>  
                ap_NS_fsm <= "XX";
        end case;
    end process;
    alert_V <= "1" when (signed(p_Val2_5_fu_527_p3) > signed(ap_const_lv32_3E8)) else "0";
    ap_reg_ppiten_pp0_it0 <= ap_const_logic_1;

    -- ap_rst_n_inv assign process. --
    ap_rst_n_inv_assign_proc : process(ap_rst_n)
    begin
                ap_rst_n_inv <= not(ap_rst_n);
    end process;


    -- ap_sig_bdd_145 assign process. --
    ap_sig_bdd_145_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_145 <= (ap_const_lv1_1 = ap_CS_fsm(0 downto 0));
    end process;


    -- ap_sig_bdd_93 assign process. --
    ap_sig_bdd_93_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_93 <= (ap_CS_fsm(1 downto 1) = ap_const_lv1_1);
    end process;


    -- ap_sig_cseq_ST_pp0_stg0_fsm_0 assign process. --
    ap_sig_cseq_ST_pp0_stg0_fsm_0_assign_proc : process(ap_sig_bdd_145)
    begin
        if (ap_sig_bdd_145) then 
            ap_sig_cseq_ST_pp0_stg0_fsm_0 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_pp0_stg0_fsm_0 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_pp0_stg1_fsm_1 assign process. --
    ap_sig_cseq_ST_pp0_stg1_fsm_1_assign_proc : process(ap_sig_bdd_93)
    begin
        if (ap_sig_bdd_93) then 
            ap_sig_cseq_ST_pp0_stg1_fsm_1 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_pp0_stg1_fsm_1 <= ap_const_logic_0;
        end if; 
    end process;

    ap_sig_pprstidle_pp0 <= ap_const_logic_0;

    -- ap_sig_start_in_grp_master_ip_mainFunction_fu_143_ap_start assign process. --
    ap_sig_start_in_grp_master_ip_mainFunction_fu_143_ap_start_assign_proc : process(ap_sig_cseq_ST_pp0_stg0_fsm_0)
    begin
        if (((ap_const_logic_1 = ap_const_logic_1) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_0))) then 
            ap_sig_start_in_grp_master_ip_mainFunction_fu_143_ap_start <= ap_const_logic_1;
        else 
            ap_sig_start_in_grp_master_ip_mainFunction_fu_143_ap_start <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_178_ce <= ap_const_logic_1;

    -- grp_fu_178_p0 assign process. --
    grp_fu_178_p0_assign_proc : process(ap_sig_cseq_ST_pp0_stg1_fsm_1, ap_reg_ppiten_pp0_it5, ap_reg_ppiten_pp0_it7, ap_sig_cseq_ST_pp0_stg0_fsm_0, tmp_95_i_reg_589, tmp_99_i_reg_604)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg1_fsm_1) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it7))) then 
            grp_fu_178_p0 <= tmp_99_i_reg_604;
        elsif (((ap_const_logic_1 = ap_reg_ppiten_pp0_it5) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_0))) then 
            grp_fu_178_p0 <= tmp_95_i_reg_589;
        else 
            grp_fu_178_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    -- grp_fu_178_p1 assign process. --
    grp_fu_178_p1_assign_proc : process(ap_sig_cseq_ST_pp0_stg1_fsm_1, ap_reg_ppiten_pp0_it5, ap_reg_ppiten_pp0_it7, ap_sig_cseq_ST_pp0_stg0_fsm_0, tmp_98_i_reg_594, ap_reg_ppstg_tmp_102_i_reg_599_pp0_it7)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg1_fsm_1) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it7))) then 
            grp_fu_178_p1 <= ap_reg_ppstg_tmp_102_i_reg_599_pp0_it7;
        elsif (((ap_const_logic_1 = ap_reg_ppiten_pp0_it5) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_0))) then 
            grp_fu_178_p1 <= tmp_98_i_reg_594;
        else 
            grp_fu_178_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    grp_fu_182_ce <= ap_const_logic_1;

    -- grp_fu_182_p0 assign process. --
    grp_fu_182_p0_assign_proc : process(ap_sig_cseq_ST_pp0_stg1_fsm_1, ap_reg_ppiten_pp0_it3, ap_sig_cseq_ST_pp0_stg0_fsm_0, tmp_i_12_reg_571, tmp_101_i_reg_583)
    begin
        if ((ap_const_logic_1 = ap_reg_ppiten_pp0_it3)) then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg1_fsm_1)) then 
                grp_fu_182_p0 <= tmp_101_i_reg_583;
            elsif ((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_0)) then 
                grp_fu_182_p0 <= tmp_i_12_reg_571;
            else 
                grp_fu_182_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
            end if;
        else 
            grp_fu_182_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    -- grp_fu_182_p1 assign process. --
    grp_fu_182_p1_assign_proc : process(ap_sig_cseq_ST_pp0_stg1_fsm_1, ap_reg_ppiten_pp0_it3, ap_sig_cseq_ST_pp0_stg0_fsm_0, tmp_i_12_reg_571, tmp_101_i_reg_583)
    begin
        if ((ap_const_logic_1 = ap_reg_ppiten_pp0_it3)) then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg1_fsm_1)) then 
                grp_fu_182_p1 <= tmp_101_i_reg_583;
            elsif ((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_0)) then 
                grp_fu_182_p1 <= tmp_i_12_reg_571;
            else 
                grp_fu_182_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
            end if;
        else 
            grp_fu_182_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    grp_fu_186_ce <= ap_const_logic_1;
    grp_fu_190_ce <= ap_const_logic_1;

    -- grp_fu_190_p0 assign process. --
    grp_fu_190_p0_assign_proc : process(ap_sig_cseq_ST_pp0_stg1_fsm_1, ap_reg_ppiten_pp0_it1, ap_reg_ppiten_pp0_it2, tmp_i_reg_556, ap_sig_cseq_ST_pp0_stg0_fsm_0, tmp_100_i_reg_566)
    begin
        if (((ap_const_logic_1 = ap_reg_ppiten_pp0_it2) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_0))) then 
            grp_fu_190_p0 <= tmp_100_i_reg_566;
        elsif (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg1_fsm_1) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1))) then 
            grp_fu_190_p0 <= tmp_i_reg_556;
        else 
            grp_fu_190_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    grp_fu_193_ce <= ap_const_logic_1;
    grp_fu_196_ce <= ap_const_logic_1;
    grp_master_ip_mainFunction_fu_143_ap_ce <= ap_const_logic_1;

    -- grp_master_ip_mainFunction_fu_143_ap_start assign process. --
    grp_master_ip_mainFunction_fu_143_ap_start_assign_proc : process(grp_master_ip_mainFunction_fu_143_ap_start_ap_start_reg, ap_sig_start_in_grp_master_ip_mainFunction_fu_143_ap_start)
    begin
        if ((ap_const_logic_1 = ap_sig_start_in_grp_master_ip_mainFunction_fu_143_ap_start)) then 
            grp_master_ip_mainFunction_fu_143_ap_start <= ap_sig_start_in_grp_master_ip_mainFunction_fu_143_ap_start;
        else 
            grp_master_ip_mainFunction_fu_143_ap_start <= grp_master_ip_mainFunction_fu_143_ap_start_ap_start_reg;
        end if; 
    end process;


    -- grp_master_ip_mainFunction_fu_143_input_V_read assign process. --
    grp_master_ip_mainFunction_fu_143_input_V_read_assign_proc : process(uart1_V, uart2_V, ap_sig_cseq_ST_pp0_stg1_fsm_1, ap_sig_cseq_ST_pp0_stg0_fsm_0)
    begin
        if ((ap_const_logic_1 = ap_const_logic_1)) then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg1_fsm_1)) then 
                grp_master_ip_mainFunction_fu_143_input_V_read <= uart2_V;
            elsif ((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_0)) then 
                grp_master_ip_mainFunction_fu_143_input_V_read <= uart1_V;
            else 
                grp_master_ip_mainFunction_fu_143_input_V_read <= "X";
            end if;
        else 
            grp_master_ip_mainFunction_fu_143_input_V_read <= "X";
        end if; 
    end process;


    -- grp_master_ip_mainFunction_fu_143_p_read assign process. --
    grp_master_ip_mainFunction_fu_143_p_read_assign_proc : process(coordinates1_0, coordinates2_0, ap_sig_cseq_ST_pp0_stg1_fsm_1, ap_sig_cseq_ST_pp0_stg0_fsm_0)
    begin
        if ((ap_const_logic_1 = ap_const_logic_1)) then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg1_fsm_1)) then 
                grp_master_ip_mainFunction_fu_143_p_read <= coordinates2_0;
            elsif ((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_0)) then 
                grp_master_ip_mainFunction_fu_143_p_read <= coordinates1_0;
            else 
                grp_master_ip_mainFunction_fu_143_p_read <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
            end if;
        else 
            grp_master_ip_mainFunction_fu_143_p_read <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    -- grp_master_ip_mainFunction_fu_143_p_read2 assign process. --
    grp_master_ip_mainFunction_fu_143_p_read2_assign_proc : process(coordinates1_1, coordinates2_1, ap_sig_cseq_ST_pp0_stg1_fsm_1, ap_sig_cseq_ST_pp0_stg0_fsm_0)
    begin
        if ((ap_const_logic_1 = ap_const_logic_1)) then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg1_fsm_1)) then 
                grp_master_ip_mainFunction_fu_143_p_read2 <= coordinates2_1;
            elsif ((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_0)) then 
                grp_master_ip_mainFunction_fu_143_p_read2 <= coordinates1_1;
            else 
                grp_master_ip_mainFunction_fu_143_p_read2 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
            end if;
        else 
            grp_master_ip_mainFunction_fu_143_p_read2 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    -- grp_master_ip_mainFunction_fu_143_p_read5 assign process. --
    grp_master_ip_mainFunction_fu_143_p_read5_assign_proc : process(coordinates1_2, coordinates2_2, ap_sig_cseq_ST_pp0_stg1_fsm_1, ap_sig_cseq_ST_pp0_stg0_fsm_0)
    begin
        if ((ap_const_logic_1 = ap_const_logic_1)) then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg1_fsm_1)) then 
                grp_master_ip_mainFunction_fu_143_p_read5 <= coordinates2_2;
            elsif ((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_0)) then 
                grp_master_ip_mainFunction_fu_143_p_read5 <= coordinates1_2;
            else 
                grp_master_ip_mainFunction_fu_143_p_read5 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
            end if;
        else 
            grp_master_ip_mainFunction_fu_143_p_read5 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    -- grp_master_ip_mainFunction_fu_143_uart_to_coordinates_ck_a_V_read assign process. --
    grp_master_ip_mainFunction_fu_143_uart_to_coordinates_ck_a_V_read_assign_proc : process(signal1_ck_a_V, signal2_ck_a_V, ap_sig_cseq_ST_pp0_stg1_fsm_1, ap_sig_cseq_ST_pp0_stg0_fsm_0)
    begin
        if ((ap_const_logic_1 = ap_const_logic_1)) then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg1_fsm_1)) then 
                grp_master_ip_mainFunction_fu_143_uart_to_coordinates_ck_a_V_read <= signal2_ck_a_V;
            elsif ((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_0)) then 
                grp_master_ip_mainFunction_fu_143_uart_to_coordinates_ck_a_V_read <= signal1_ck_a_V;
            else 
                grp_master_ip_mainFunction_fu_143_uart_to_coordinates_ck_a_V_read <= "XXXXXXXX";
            end if;
        else 
            grp_master_ip_mainFunction_fu_143_uart_to_coordinates_ck_a_V_read <= "XXXXXXXX";
        end if; 
    end process;


    -- grp_master_ip_mainFunction_fu_143_uart_to_coordinates_ck_b_V_read assign process. --
    grp_master_ip_mainFunction_fu_143_uart_to_coordinates_ck_b_V_read_assign_proc : process(signal1_ck_b_V, signal2_ck_b_V, ap_sig_cseq_ST_pp0_stg1_fsm_1, ap_sig_cseq_ST_pp0_stg0_fsm_0)
    begin
        if ((ap_const_logic_1 = ap_const_logic_1)) then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg1_fsm_1)) then 
                grp_master_ip_mainFunction_fu_143_uart_to_coordinates_ck_b_V_read <= signal2_ck_b_V;
            elsif ((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_0)) then 
                grp_master_ip_mainFunction_fu_143_uart_to_coordinates_ck_b_V_read <= signal1_ck_b_V;
            else 
                grp_master_ip_mainFunction_fu_143_uart_to_coordinates_ck_b_V_read <= "XXXXXXXX";
            end if;
        else 
            grp_master_ip_mainFunction_fu_143_uart_to_coordinates_ck_b_V_read <= "XXXXXXXX";
        end if; 
    end process;


    -- grp_master_ip_mainFunction_fu_143_uart_to_coordinates_count_V_i assign process. --
    grp_master_ip_mainFunction_fu_143_uart_to_coordinates_count_V_i_assign_proc : process(signal1_count_V, signal2_count_V, ap_sig_cseq_ST_pp0_stg1_fsm_1, ap_sig_cseq_ST_pp0_stg0_fsm_0)
    begin
        if ((ap_const_logic_1 = ap_const_logic_1)) then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg1_fsm_1)) then 
                grp_master_ip_mainFunction_fu_143_uart_to_coordinates_count_V_i <= signal2_count_V;
            elsif ((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_0)) then 
                grp_master_ip_mainFunction_fu_143_uart_to_coordinates_count_V_i <= signal1_count_V;
            else 
                grp_master_ip_mainFunction_fu_143_uart_to_coordinates_count_V_i <= "XXXXXXXXXXXXXXXX";
            end if;
        else 
            grp_master_ip_mainFunction_fu_143_uart_to_coordinates_count_V_i <= "XXXXXXXXXXXXXXXX";
        end if; 
    end process;


    -- grp_master_ip_mainFunction_fu_143_uart_to_coordinates_current_out_byte_V_read assign process. --
    grp_master_ip_mainFunction_fu_143_uart_to_coordinates_current_out_byte_V_read_assign_proc : process(signal1_current_out_byte_V, signal2_current_out_byte_V, ap_sig_cseq_ST_pp0_stg1_fsm_1, ap_sig_cseq_ST_pp0_stg0_fsm_0)
    begin
        if ((ap_const_logic_1 = ap_const_logic_1)) then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg1_fsm_1)) then 
                grp_master_ip_mainFunction_fu_143_uart_to_coordinates_current_out_byte_V_read <= signal2_current_out_byte_V;
            elsif ((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_0)) then 
                grp_master_ip_mainFunction_fu_143_uart_to_coordinates_current_out_byte_V_read <= signal1_current_out_byte_V;
            else 
                grp_master_ip_mainFunction_fu_143_uart_to_coordinates_current_out_byte_V_read <= "XXXXXXXX";
            end if;
        else 
            grp_master_ip_mainFunction_fu_143_uart_to_coordinates_current_out_byte_V_read <= "XXXXXXXX";
        end if; 
    end process;


    -- grp_master_ip_mainFunction_fu_143_uart_to_coordinates_gnss_state_V_read assign process. --
    grp_master_ip_mainFunction_fu_143_uart_to_coordinates_gnss_state_V_read_assign_proc : process(signal1_gnss_state_V, signal2_gnss_state_V, ap_sig_cseq_ST_pp0_stg1_fsm_1, ap_sig_cseq_ST_pp0_stg0_fsm_0)
    begin
        if ((ap_const_logic_1 = ap_const_logic_1)) then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg1_fsm_1)) then 
                grp_master_ip_mainFunction_fu_143_uart_to_coordinates_gnss_state_V_read <= signal2_gnss_state_V;
            elsif ((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_0)) then 
                grp_master_ip_mainFunction_fu_143_uart_to_coordinates_gnss_state_V_read <= signal1_gnss_state_V;
            else 
                grp_master_ip_mainFunction_fu_143_uart_to_coordinates_gnss_state_V_read <= "XXXXXX";
            end if;
        else 
            grp_master_ip_mainFunction_fu_143_uart_to_coordinates_gnss_state_V_read <= "XXXXXX";
        end if; 
    end process;


    -- grp_master_ip_mainFunction_fu_143_uart_to_coordinates_next_out_byte_V_i assign process. --
    grp_master_ip_mainFunction_fu_143_uart_to_coordinates_next_out_byte_V_i_assign_proc : process(signal1_next_out_byte_V, signal2_next_out_byte_V, ap_sig_cseq_ST_pp0_stg1_fsm_1, ap_sig_cseq_ST_pp0_stg0_fsm_0)
    begin
        if ((ap_const_logic_1 = ap_const_logic_1)) then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg1_fsm_1)) then 
                grp_master_ip_mainFunction_fu_143_uart_to_coordinates_next_out_byte_V_i <= signal2_next_out_byte_V;
            elsif ((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_0)) then 
                grp_master_ip_mainFunction_fu_143_uart_to_coordinates_next_out_byte_V_i <= signal1_next_out_byte_V;
            else 
                grp_master_ip_mainFunction_fu_143_uart_to_coordinates_next_out_byte_V_i <= "XXXXXXXX";
            end if;
        else 
            grp_master_ip_mainFunction_fu_143_uart_to_coordinates_next_out_byte_V_i <= "XXXXXXXX";
        end if; 
    end process;


    -- grp_master_ip_mainFunction_fu_143_uart_to_coordinates_previous_input_V_i assign process. --
    grp_master_ip_mainFunction_fu_143_uart_to_coordinates_previous_input_V_i_assign_proc : process(signal1_previous_input_V, signal2_previous_input_V, ap_sig_cseq_ST_pp0_stg1_fsm_1, ap_sig_cseq_ST_pp0_stg0_fsm_0)
    begin
        if ((ap_const_logic_1 = ap_const_logic_1)) then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg1_fsm_1)) then 
                grp_master_ip_mainFunction_fu_143_uart_to_coordinates_previous_input_V_i <= signal2_previous_input_V;
            elsif ((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_0)) then 
                grp_master_ip_mainFunction_fu_143_uart_to_coordinates_previous_input_V_i <= signal1_previous_input_V;
            else 
                grp_master_ip_mainFunction_fu_143_uart_to_coordinates_previous_input_V_i <= "X";
            end if;
        else 
            grp_master_ip_mainFunction_fu_143_uart_to_coordinates_previous_input_V_i <= "X";
        end if; 
    end process;


    -- grp_master_ip_mainFunction_fu_143_uart_to_coordinates_tempCoordinates_0_i assign process. --
    grp_master_ip_mainFunction_fu_143_uart_to_coordinates_tempCoordinates_0_i_assign_proc : process(signal1_tempCoordinates_0, signal2_tempCoordinates_0, ap_sig_cseq_ST_pp0_stg1_fsm_1, ap_sig_cseq_ST_pp0_stg0_fsm_0)
    begin
        if ((ap_const_logic_1 = ap_const_logic_1)) then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg1_fsm_1)) then 
                grp_master_ip_mainFunction_fu_143_uart_to_coordinates_tempCoordinates_0_i <= signal2_tempCoordinates_0;
            elsif ((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_0)) then 
                grp_master_ip_mainFunction_fu_143_uart_to_coordinates_tempCoordinates_0_i <= signal1_tempCoordinates_0;
            else 
                grp_master_ip_mainFunction_fu_143_uart_to_coordinates_tempCoordinates_0_i <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
            end if;
        else 
            grp_master_ip_mainFunction_fu_143_uart_to_coordinates_tempCoordinates_0_i <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    -- grp_master_ip_mainFunction_fu_143_uart_to_coordinates_tempCoordinates_1_i assign process. --
    grp_master_ip_mainFunction_fu_143_uart_to_coordinates_tempCoordinates_1_i_assign_proc : process(signal1_tempCoordinates_1, signal2_tempCoordinates_1, ap_sig_cseq_ST_pp0_stg1_fsm_1, ap_sig_cseq_ST_pp0_stg0_fsm_0)
    begin
        if ((ap_const_logic_1 = ap_const_logic_1)) then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg1_fsm_1)) then 
                grp_master_ip_mainFunction_fu_143_uart_to_coordinates_tempCoordinates_1_i <= signal2_tempCoordinates_1;
            elsif ((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_0)) then 
                grp_master_ip_mainFunction_fu_143_uart_to_coordinates_tempCoordinates_1_i <= signal1_tempCoordinates_1;
            else 
                grp_master_ip_mainFunction_fu_143_uart_to_coordinates_tempCoordinates_1_i <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
            end if;
        else 
            grp_master_ip_mainFunction_fu_143_uart_to_coordinates_tempCoordinates_1_i <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    -- grp_master_ip_mainFunction_fu_143_uart_to_coordinates_tempCoordinates_2_i assign process. --
    grp_master_ip_mainFunction_fu_143_uart_to_coordinates_tempCoordinates_2_i_assign_proc : process(signal1_tempCoordinates_2, signal2_tempCoordinates_2, ap_sig_cseq_ST_pp0_stg1_fsm_1, ap_sig_cseq_ST_pp0_stg0_fsm_0)
    begin
        if ((ap_const_logic_1 = ap_const_logic_1)) then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg1_fsm_1)) then 
                grp_master_ip_mainFunction_fu_143_uart_to_coordinates_tempCoordinates_2_i <= signal2_tempCoordinates_2;
            elsif ((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_0)) then 
                grp_master_ip_mainFunction_fu_143_uart_to_coordinates_tempCoordinates_2_i <= signal1_tempCoordinates_2;
            else 
                grp_master_ip_mainFunction_fu_143_uart_to_coordinates_tempCoordinates_2_i <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
            end if;
        else 
            grp_master_ip_mainFunction_fu_143_uart_to_coordinates_tempCoordinates_2_i <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    -- grp_master_ip_mainFunction_fu_143_uart_to_coordinates_uart_state_V_i assign process. --
    grp_master_ip_mainFunction_fu_143_uart_to_coordinates_uart_state_V_i_assign_proc : process(signal1_uart_state_V, signal2_uart_state_V, ap_sig_cseq_ST_pp0_stg1_fsm_1, ap_sig_cseq_ST_pp0_stg0_fsm_0)
    begin
        if ((ap_const_logic_1 = ap_const_logic_1)) then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg1_fsm_1)) then 
                grp_master_ip_mainFunction_fu_143_uart_to_coordinates_uart_state_V_i <= signal2_uart_state_V;
            elsif ((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_0)) then 
                grp_master_ip_mainFunction_fu_143_uart_to_coordinates_uart_state_V_i <= signal1_uart_state_V;
            else 
                grp_master_ip_mainFunction_fu_143_uart_to_coordinates_uart_state_V_i <= "XXXX";
            end if;
        else 
            grp_master_ip_mainFunction_fu_143_uart_to_coordinates_uart_state_V_i <= "XXXX";
        end if; 
    end process;

    isNeg_fu_441_p3 <= sh_assign_fu_435_p2(11 downto 11);
    loc_V_1_fu_419_p1 <= p_Val2_s_fu_398_p1(52 - 1 downto 0);
    loc_V_fu_409_p4 <= p_Val2_s_fu_398_p1(62 downto 52);
    master_ip_AXILiteS_s_axi_U_ap_dummy_ce <= ap_const_logic_1;
    p_Result_1_fu_423_p3 <= (ap_const_lv1_1 & loc_V_1_fu_419_p1);
    p_Val2_3_fu_514_p3 <= 
        tmp_3_fu_501_p1 when (isNeg_reg_629(0) = '1') else 
        tmp_4_fu_504_p4;
    p_Val2_5_fu_527_p3 <= 
        p_Val2_7_i_i_i_fu_521_p2 when (p_Result_s_reg_619(0) = '1') else 
        p_Val2_3_fu_514_p3;
    p_Val2_7_i_i_i_fu_521_p2 <= std_logic_vector(unsigned(ap_const_lv32_0) - unsigned(p_Val2_3_fu_514_p3));
    p_Val2_s_fu_398_p1 <= x_assign_reg_614;
        sh_assign_1_cast_fu_467_p1 <= std_logic_vector(resize(signed(sh_assign_1_fu_459_p3),32));

    sh_assign_1_fu_459_p3 <= 
        tmp_i_i_i_cast_fu_455_p1 when (isNeg_fu_441_p3(0) = '1') else 
        sh_assign_fu_435_p2;
    sh_assign_fu_435_p2 <= std_logic_vector(signed(ap_const_lv12_C01) + signed(tmp_i_i_i_i_cast1_fu_431_p1));
    tmp_100_i_fu_393_p2 <= std_logic_vector(unsigned(newret9_reg_551) - unsigned(grp_master_ip_mainFunction_fu_143_ap_return_6));
    tmp_3_fu_501_p1 <= std_logic_vector(resize(unsigned(tmp_reg_639),32));
    tmp_4_fu_504_p4 <= tmp_91_i_i_i_fu_495_p2(83 downto 52);
    tmp_88_i_i_i_cast_fu_471_p1 <= std_logic_vector(resize(unsigned(sh_assign_1_cast_fu_467_p1),53));
    tmp_88_i_i_i_fu_492_p1 <= std_logic_vector(resize(unsigned(sh_assign_1_cast_reg_634),136));
    tmp_89_i_i_i_fu_475_p2 <= std_logic_vector(shift_right(unsigned(p_Result_1_fu_423_p3),to_integer(unsigned('0' & tmp_88_i_i_i_cast_fu_471_p1(31-1 downto 0)))));
    tmp_91_i_i_i_fu_495_p2 <= std_logic_vector(shift_left(unsigned(tmp_i_i_i_fu_489_p1),to_integer(unsigned('0' & tmp_88_i_i_i_fu_492_p1(31-1 downto 0)))));
    tmp_96_i_fu_388_p2 <= std_logic_vector(unsigned(newret8_reg_546) - unsigned(grp_master_ip_mainFunction_fu_143_ap_return_5));
    tmp_i_fu_383_p2 <= std_logic_vector(unsigned(newret7_reg_541) - unsigned(grp_master_ip_mainFunction_fu_143_ap_return_4));
    tmp_i_i_i_13_fu_449_p2 <= std_logic_vector(unsigned(ap_const_lv11_3FF) - unsigned(loc_V_fu_409_p4));
        tmp_i_i_i_cast_fu_455_p1 <= std_logic_vector(resize(signed(tmp_i_i_i_13_fu_449_p2),12));

    tmp_i_i_i_fu_489_p1 <= std_logic_vector(resize(unsigned(p_Result_1_reg_624),136));
    tmp_i_i_i_i_cast1_fu_431_p1 <= std_logic_vector(resize(unsigned(loc_V_fu_409_p4),12));
end behav;
