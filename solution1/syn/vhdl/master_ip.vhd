-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2015.4
-- Copyright (C) 2015 Xilinx Inc. All rights reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity master_ip is
generic (
    C_S_AXI_AXILITES_ADDR_WIDTH : INTEGER := 5;
    C_S_AXI_AXILITES_DATA_WIDTH : INTEGER := 32 );
port (
    ap_clk : IN STD_LOGIC;
    ap_rst_n : IN STD_LOGIC;
    uart1_V : IN STD_LOGIC_VECTOR (0 downto 0);
    uart2_V : IN STD_LOGIC_VECTOR (0 downto 0);
    alert_V : OUT STD_LOGIC_VECTOR (0 downto 0);
    s_axi_AXILiteS_AWVALID : IN STD_LOGIC;
    s_axi_AXILiteS_AWREADY : OUT STD_LOGIC;
    s_axi_AXILiteS_AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_AXILITES_ADDR_WIDTH-1 downto 0);
    s_axi_AXILiteS_WVALID : IN STD_LOGIC;
    s_axi_AXILiteS_WREADY : OUT STD_LOGIC;
    s_axi_AXILiteS_WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_AXILITES_DATA_WIDTH-1 downto 0);
    s_axi_AXILiteS_WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_AXILITES_DATA_WIDTH/8-1 downto 0);
    s_axi_AXILiteS_ARVALID : IN STD_LOGIC;
    s_axi_AXILiteS_ARREADY : OUT STD_LOGIC;
    s_axi_AXILiteS_ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_AXILITES_ADDR_WIDTH-1 downto 0);
    s_axi_AXILiteS_RVALID : OUT STD_LOGIC;
    s_axi_AXILiteS_RREADY : IN STD_LOGIC;
    s_axi_AXILiteS_RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_AXILITES_DATA_WIDTH-1 downto 0);
    s_axi_AXILiteS_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    s_axi_AXILiteS_BVALID : OUT STD_LOGIC;
    s_axi_AXILiteS_BREADY : IN STD_LOGIC;
    s_axi_AXILiteS_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0) );
end;


architecture behav of master_ip is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "master_ip,hls_ip_2015_4,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=1,HLS_INPUT_PART=xc7z020clg484-1,HLS_INPUT_CLOCK=20.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=16.414000,HLS_SYN_LAT=36,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=25,HLS_SYN_FF=4509,HLS_SYN_LUT=10513}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_st1_fsm_0 : STD_LOGIC_VECTOR (34 downto 0) := "00000000000000000000000000000000001";
    constant ap_ST_st2_fsm_1 : STD_LOGIC_VECTOR (34 downto 0) := "00000000000000000000000000000000010";
    constant ap_ST_st3_fsm_2 : STD_LOGIC_VECTOR (34 downto 0) := "00000000000000000000000000000000100";
    constant ap_ST_st4_fsm_3 : STD_LOGIC_VECTOR (34 downto 0) := "00000000000000000000000000000001000";
    constant ap_ST_st5_fsm_4 : STD_LOGIC_VECTOR (34 downto 0) := "00000000000000000000000000000010000";
    constant ap_ST_st6_fsm_5 : STD_LOGIC_VECTOR (34 downto 0) := "00000000000000000000000000000100000";
    constant ap_ST_st7_fsm_6 : STD_LOGIC_VECTOR (34 downto 0) := "00000000000000000000000000001000000";
    constant ap_ST_st8_fsm_7 : STD_LOGIC_VECTOR (34 downto 0) := "00000000000000000000000000010000000";
    constant ap_ST_st9_fsm_8 : STD_LOGIC_VECTOR (34 downto 0) := "00000000000000000000000000100000000";
    constant ap_ST_st10_fsm_9 : STD_LOGIC_VECTOR (34 downto 0) := "00000000000000000000000001000000000";
    constant ap_ST_st11_fsm_10 : STD_LOGIC_VECTOR (34 downto 0) := "00000000000000000000000010000000000";
    constant ap_ST_st12_fsm_11 : STD_LOGIC_VECTOR (34 downto 0) := "00000000000000000000000100000000000";
    constant ap_ST_st13_fsm_12 : STD_LOGIC_VECTOR (34 downto 0) := "00000000000000000000001000000000000";
    constant ap_ST_st14_fsm_13 : STD_LOGIC_VECTOR (34 downto 0) := "00000000000000000000010000000000000";
    constant ap_ST_st15_fsm_14 : STD_LOGIC_VECTOR (34 downto 0) := "00000000000000000000100000000000000";
    constant ap_ST_st16_fsm_15 : STD_LOGIC_VECTOR (34 downto 0) := "00000000000000000001000000000000000";
    constant ap_ST_st17_fsm_16 : STD_LOGIC_VECTOR (34 downto 0) := "00000000000000000010000000000000000";
    constant ap_ST_st18_fsm_17 : STD_LOGIC_VECTOR (34 downto 0) := "00000000000000000100000000000000000";
    constant ap_ST_st19_fsm_18 : STD_LOGIC_VECTOR (34 downto 0) := "00000000000000001000000000000000000";
    constant ap_ST_st20_fsm_19 : STD_LOGIC_VECTOR (34 downto 0) := "00000000000000010000000000000000000";
    constant ap_ST_st21_fsm_20 : STD_LOGIC_VECTOR (34 downto 0) := "00000000000000100000000000000000000";
    constant ap_ST_st22_fsm_21 : STD_LOGIC_VECTOR (34 downto 0) := "00000000000001000000000000000000000";
    constant ap_ST_st23_fsm_22 : STD_LOGIC_VECTOR (34 downto 0) := "00000000000010000000000000000000000";
    constant ap_ST_st24_fsm_23 : STD_LOGIC_VECTOR (34 downto 0) := "00000000000100000000000000000000000";
    constant ap_ST_st25_fsm_24 : STD_LOGIC_VECTOR (34 downto 0) := "00000000001000000000000000000000000";
    constant ap_ST_st26_fsm_25 : STD_LOGIC_VECTOR (34 downto 0) := "00000000010000000000000000000000000";
    constant ap_ST_st27_fsm_26 : STD_LOGIC_VECTOR (34 downto 0) := "00000000100000000000000000000000000";
    constant ap_ST_st28_fsm_27 : STD_LOGIC_VECTOR (34 downto 0) := "00000001000000000000000000000000000";
    constant ap_ST_st29_fsm_28 : STD_LOGIC_VECTOR (34 downto 0) := "00000010000000000000000000000000000";
    constant ap_ST_st30_fsm_29 : STD_LOGIC_VECTOR (34 downto 0) := "00000100000000000000000000000000000";
    constant ap_ST_st31_fsm_30 : STD_LOGIC_VECTOR (34 downto 0) := "00001000000000000000000000000000000";
    constant ap_ST_st32_fsm_31 : STD_LOGIC_VECTOR (34 downto 0) := "00010000000000000000000000000000000";
    constant ap_ST_st33_fsm_32 : STD_LOGIC_VECTOR (34 downto 0) := "00100000000000000000000000000000000";
    constant ap_ST_st34_fsm_33 : STD_LOGIC_VECTOR (34 downto 0) := "01000000000000000000000000000000000";
    constant ap_ST_st35_fsm_34 : STD_LOGIC_VECTOR (34 downto 0) := "10000000000000000000000000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant C_S_AXI_DATA_WIDTH : INTEGER range 63 downto 0 := 20;
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_21 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100001";
    constant ap_const_lv32_22 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100010";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_3F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111111";
    constant ap_const_lv32_34 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110100";
    constant ap_const_lv32_3E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111110";
    constant ap_const_lv12_C01 : STD_LOGIC_VECTOR (11 downto 0) := "110000000001";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv11_3FF : STD_LOGIC_VECTOR (10 downto 0) := "01111111111";
    constant ap_const_lv32_53 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001010011";
    constant ap_const_lv32_3E8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000001111101000";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";

    signal ap_rst_n_inv : STD_LOGIC;
    signal axi_byte_V : STD_LOGIC_VECTOR (7 downto 0);
    signal signal1_ck_a_V : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    signal signal1_ck_b_V : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    signal signal1_current_out_byte_V : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    signal signal1_gnss_state_V : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    signal coordinates1_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal coordinates1_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal coordinates1_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal signal1_count_V : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    signal signal1_previous_input_V : STD_LOGIC_VECTOR (0 downto 0) := "0";
    signal signal1_uart_state_V : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    signal signal1_next_out_byte_V : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    signal signal1_tempCoordinates_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    signal signal1_tempCoordinates_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal signal1_tempCoordinates_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal signal2_ck_a_V : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    signal signal2_ck_b_V : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    signal signal2_current_out_byte_V : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    signal signal2_gnss_state_V : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    signal coordinates2_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal coordinates2_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal coordinates2_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal signal2_count_V : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    signal signal2_previous_input_V : STD_LOGIC_VECTOR (0 downto 0) := "0";
    signal signal2_uart_state_V : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    signal signal2_next_out_byte_V : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    signal signal2_tempCoordinates_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    signal signal2_tempCoordinates_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal signal2_tempCoordinates_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal master_ip_AXILiteS_s_axi_U_ap_dummy_ce : STD_LOGIC;
    signal grp_fu_205_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal reg_216 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm : STD_LOGIC_VECTOR (34 downto 0) := "00000000000000000000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_sig_cseq_ST_st5_fsm_4 : STD_LOGIC;
    signal ap_sig_bdd_126 : BOOLEAN;
    signal ap_sig_cseq_ST_st9_fsm_8 : STD_LOGIC;
    signal ap_sig_bdd_134 : BOOLEAN;
    signal grp_fu_197_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal reg_222 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_sig_cseq_ST_st13_fsm_12 : STD_LOGIC;
    signal ap_sig_bdd_144 : BOOLEAN;
    signal grp_fu_193_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal reg_228 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_sig_cseq_ST_st17_fsm_16 : STD_LOGIC;
    signal ap_sig_bdd_154 : BOOLEAN;
    signal ap_sig_cseq_ST_st1_fsm_0 : STD_LOGIC;
    signal ap_sig_bdd_163 : BOOLEAN;
    signal tmp_i_fu_444_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_i_reg_690 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_sig_cseq_ST_st2_fsm_1 : STD_LOGIC;
    signal ap_sig_bdd_202 : BOOLEAN;
    signal grp_master_ip_mainFunction_fu_139_ap_done : STD_LOGIC;
    signal grp_master_ip_mainFunction_fu_166_ap_done : STD_LOGIC;
    signal tmp_96_i_fu_450_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_96_i_reg_695 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_100_i_fu_456_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_100_i_reg_700 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_208_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_97_i_reg_705 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_201_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_98_i_reg_711 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_211_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal x_assign_reg_716 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_sig_cseq_ST_st34_fsm_33 : STD_LOGIC;
    signal ap_sig_bdd_226 : BOOLEAN;
    signal grp_master_ip_mainFunction_fu_139_ap_start : STD_LOGIC;
    signal grp_master_ip_mainFunction_fu_139_ap_idle : STD_LOGIC;
    signal grp_master_ip_mainFunction_fu_139_ap_ready : STD_LOGIC;
    signal grp_master_ip_mainFunction_fu_139_uart_to_coordinates_count_V_i : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_master_ip_mainFunction_fu_139_uart_to_coordinates_count_V_o : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_master_ip_mainFunction_fu_139_uart_to_coordinates_count_V_o_ap_vld : STD_LOGIC;
    signal grp_master_ip_mainFunction_fu_139_uart_to_coordinates_previous_input_V_i : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_master_ip_mainFunction_fu_139_uart_to_coordinates_previous_input_V_o : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_master_ip_mainFunction_fu_139_uart_to_coordinates_previous_input_V_o_ap_vld : STD_LOGIC;
    signal grp_master_ip_mainFunction_fu_139_uart_to_coordinates_uart_state_V_i : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_master_ip_mainFunction_fu_139_uart_to_coordinates_uart_state_V_o : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_master_ip_mainFunction_fu_139_uart_to_coordinates_uart_state_V_o_ap_vld : STD_LOGIC;
    signal grp_master_ip_mainFunction_fu_139_uart_to_coordinates_next_out_byte_V_i : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_master_ip_mainFunction_fu_139_uart_to_coordinates_next_out_byte_V_o : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_master_ip_mainFunction_fu_139_uart_to_coordinates_next_out_byte_V_o_ap_vld : STD_LOGIC;
    signal grp_master_ip_mainFunction_fu_139_uart_to_coordinates_current_out_byte_V_read : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_master_ip_mainFunction_fu_139_uart_to_coordinates_gnss_state_V_read : STD_LOGIC_VECTOR (5 downto 0);
    signal grp_master_ip_mainFunction_fu_139_uart_to_coordinates_ck_a_V_read : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_master_ip_mainFunction_fu_139_uart_to_coordinates_ck_b_V_read : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_master_ip_mainFunction_fu_139_uart_to_coordinates_tempCoordinates_0_i : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_master_ip_mainFunction_fu_139_uart_to_coordinates_tempCoordinates_0_o : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_master_ip_mainFunction_fu_139_uart_to_coordinates_tempCoordinates_0_o_ap_vld : STD_LOGIC;
    signal grp_master_ip_mainFunction_fu_139_uart_to_coordinates_tempCoordinates_1_i : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_master_ip_mainFunction_fu_139_uart_to_coordinates_tempCoordinates_1_o : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_master_ip_mainFunction_fu_139_uart_to_coordinates_tempCoordinates_1_o_ap_vld : STD_LOGIC;
    signal grp_master_ip_mainFunction_fu_139_uart_to_coordinates_tempCoordinates_2_i : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_master_ip_mainFunction_fu_139_uart_to_coordinates_tempCoordinates_2_o : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_master_ip_mainFunction_fu_139_uart_to_coordinates_tempCoordinates_2_o_ap_vld : STD_LOGIC;
    signal grp_master_ip_mainFunction_fu_139_input_V_read : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_master_ip_mainFunction_fu_139_p_read : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_master_ip_mainFunction_fu_139_p_read2 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_master_ip_mainFunction_fu_139_p_read5 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_master_ip_mainFunction_fu_139_ap_return_0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_master_ip_mainFunction_fu_139_ap_return_1 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_master_ip_mainFunction_fu_139_ap_return_2 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_master_ip_mainFunction_fu_139_ap_return_3 : STD_LOGIC_VECTOR (5 downto 0);
    signal grp_master_ip_mainFunction_fu_139_ap_return_4 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_master_ip_mainFunction_fu_139_ap_return_5 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_master_ip_mainFunction_fu_139_ap_return_6 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_master_ip_mainFunction_fu_166_ap_start : STD_LOGIC;
    signal grp_master_ip_mainFunction_fu_166_ap_idle : STD_LOGIC;
    signal grp_master_ip_mainFunction_fu_166_ap_ready : STD_LOGIC;
    signal grp_master_ip_mainFunction_fu_166_uart_to_coordinates_count_V_i : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_master_ip_mainFunction_fu_166_uart_to_coordinates_count_V_o : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_master_ip_mainFunction_fu_166_uart_to_coordinates_count_V_o_ap_vld : STD_LOGIC;
    signal grp_master_ip_mainFunction_fu_166_uart_to_coordinates_previous_input_V_i : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_master_ip_mainFunction_fu_166_uart_to_coordinates_previous_input_V_o : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_master_ip_mainFunction_fu_166_uart_to_coordinates_previous_input_V_o_ap_vld : STD_LOGIC;
    signal grp_master_ip_mainFunction_fu_166_uart_to_coordinates_uart_state_V_i : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_master_ip_mainFunction_fu_166_uart_to_coordinates_uart_state_V_o : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_master_ip_mainFunction_fu_166_uart_to_coordinates_uart_state_V_o_ap_vld : STD_LOGIC;
    signal grp_master_ip_mainFunction_fu_166_uart_to_coordinates_next_out_byte_V_i : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_master_ip_mainFunction_fu_166_uart_to_coordinates_next_out_byte_V_o : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_master_ip_mainFunction_fu_166_uart_to_coordinates_next_out_byte_V_o_ap_vld : STD_LOGIC;
    signal grp_master_ip_mainFunction_fu_166_uart_to_coordinates_current_out_byte_V_read : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_master_ip_mainFunction_fu_166_uart_to_coordinates_gnss_state_V_read : STD_LOGIC_VECTOR (5 downto 0);
    signal grp_master_ip_mainFunction_fu_166_uart_to_coordinates_ck_a_V_read : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_master_ip_mainFunction_fu_166_uart_to_coordinates_ck_b_V_read : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_master_ip_mainFunction_fu_166_uart_to_coordinates_tempCoordinates_0_i : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_master_ip_mainFunction_fu_166_uart_to_coordinates_tempCoordinates_0_o : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_master_ip_mainFunction_fu_166_uart_to_coordinates_tempCoordinates_0_o_ap_vld : STD_LOGIC;
    signal grp_master_ip_mainFunction_fu_166_uart_to_coordinates_tempCoordinates_1_i : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_master_ip_mainFunction_fu_166_uart_to_coordinates_tempCoordinates_1_o : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_master_ip_mainFunction_fu_166_uart_to_coordinates_tempCoordinates_1_o_ap_vld : STD_LOGIC;
    signal grp_master_ip_mainFunction_fu_166_uart_to_coordinates_tempCoordinates_2_i : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_master_ip_mainFunction_fu_166_uart_to_coordinates_tempCoordinates_2_o : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_master_ip_mainFunction_fu_166_uart_to_coordinates_tempCoordinates_2_o_ap_vld : STD_LOGIC;
    signal grp_master_ip_mainFunction_fu_166_input_V_read : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_master_ip_mainFunction_fu_166_p_read : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_master_ip_mainFunction_fu_166_p_read2 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_master_ip_mainFunction_fu_166_p_read5 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_master_ip_mainFunction_fu_166_ap_return_0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_master_ip_mainFunction_fu_166_ap_return_1 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_master_ip_mainFunction_fu_166_ap_return_2 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_master_ip_mainFunction_fu_166_ap_return_3 : STD_LOGIC_VECTOR (5 downto 0);
    signal grp_master_ip_mainFunction_fu_166_ap_return_4 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_master_ip_mainFunction_fu_166_ap_return_5 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_master_ip_mainFunction_fu_166_ap_return_6 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_master_ip_mainFunction_fu_139_ap_start_ap_start_reg : STD_LOGIC := '0';
    signal grp_master_ip_mainFunction_fu_166_ap_start_ap_start_reg : STD_LOGIC := '0';
    signal ap_sig_cseq_ST_st35_fsm_34 : STD_LOGIC;
    signal ap_sig_bdd_403 : BOOLEAN;
    signal grp_fu_193_p0 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_193_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_sig_cseq_ST_st10_fsm_9 : STD_LOGIC;
    signal ap_sig_bdd_412 : BOOLEAN;
    signal ap_sig_cseq_ST_st14_fsm_13 : STD_LOGIC;
    signal ap_sig_bdd_419 : BOOLEAN;
    signal grp_fu_205_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_sig_cseq_ST_st3_fsm_2 : STD_LOGIC;
    signal ap_sig_bdd_438 : BOOLEAN;
    signal ap_sig_cseq_ST_st7_fsm_6 : STD_LOGIC;
    signal ap_sig_bdd_445 : BOOLEAN;
    signal p_Val2_s_fu_462_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal loc_V_1_fu_483_p1 : STD_LOGIC_VECTOR (51 downto 0);
    signal p_Result_1_fu_487_p3 : STD_LOGIC_VECTOR (52 downto 0);
    signal loc_V_fu_473_p4 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_i_i_i_i_cast1_fu_499_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal sh_assign_fu_503_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_i_i_i_13_fu_517_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal isNeg_fu_509_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_i_i_i_cast_fu_523_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal sh_assign_1_fu_527_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal sh_assign_1_cast_fu_535_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_88_i_i_i_cast_fu_543_p1 : STD_LOGIC_VECTOR (52 downto 0);
    signal tmp_i_i_i_fu_495_p1 : STD_LOGIC_VECTOR (135 downto 0);
    signal tmp_88_i_i_i_fu_539_p1 : STD_LOGIC_VECTOR (135 downto 0);
    signal tmp_89_i_i_i_fu_547_p2 : STD_LOGIC_VECTOR (52 downto 0);
    signal tmp_fu_559_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_91_i_i_i_fu_553_p2 : STD_LOGIC_VECTOR (135 downto 0);
    signal tmp_3_fu_567_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_4_fu_571_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Val2_3_fu_581_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Result_s_fu_465_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Val2_7_i_i_i_fu_589_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Val2_5_fu_595_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_193_ce : STD_LOGIC;
    signal grp_fu_197_ce : STD_LOGIC;
    signal grp_fu_201_ce : STD_LOGIC;
    signal grp_fu_205_ce : STD_LOGIC;
    signal grp_fu_208_ce : STD_LOGIC;
    signal grp_fu_211_ce : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (34 downto 0);

    component master_ip_mainFunction IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        uart_to_coordinates_count_V_i : IN STD_LOGIC_VECTOR (15 downto 0);
        uart_to_coordinates_count_V_o : OUT STD_LOGIC_VECTOR (15 downto 0);
        uart_to_coordinates_count_V_o_ap_vld : OUT STD_LOGIC;
        uart_to_coordinates_previous_input_V_i : IN STD_LOGIC_VECTOR (0 downto 0);
        uart_to_coordinates_previous_input_V_o : OUT STD_LOGIC_VECTOR (0 downto 0);
        uart_to_coordinates_previous_input_V_o_ap_vld : OUT STD_LOGIC;
        uart_to_coordinates_uart_state_V_i : IN STD_LOGIC_VECTOR (3 downto 0);
        uart_to_coordinates_uart_state_V_o : OUT STD_LOGIC_VECTOR (3 downto 0);
        uart_to_coordinates_uart_state_V_o_ap_vld : OUT STD_LOGIC;
        uart_to_coordinates_next_out_byte_V_i : IN STD_LOGIC_VECTOR (7 downto 0);
        uart_to_coordinates_next_out_byte_V_o : OUT STD_LOGIC_VECTOR (7 downto 0);
        uart_to_coordinates_next_out_byte_V_o_ap_vld : OUT STD_LOGIC;
        uart_to_coordinates_current_out_byte_V_read : IN STD_LOGIC_VECTOR (7 downto 0);
        uart_to_coordinates_gnss_state_V_read : IN STD_LOGIC_VECTOR (5 downto 0);
        uart_to_coordinates_ck_a_V_read : IN STD_LOGIC_VECTOR (7 downto 0);
        uart_to_coordinates_ck_b_V_read : IN STD_LOGIC_VECTOR (7 downto 0);
        uart_to_coordinates_tempCoordinates_0_i : IN STD_LOGIC_VECTOR (31 downto 0);
        uart_to_coordinates_tempCoordinates_0_o : OUT STD_LOGIC_VECTOR (31 downto 0);
        uart_to_coordinates_tempCoordinates_0_o_ap_vld : OUT STD_LOGIC;
        uart_to_coordinates_tempCoordinates_1_i : IN STD_LOGIC_VECTOR (31 downto 0);
        uart_to_coordinates_tempCoordinates_1_o : OUT STD_LOGIC_VECTOR (31 downto 0);
        uart_to_coordinates_tempCoordinates_1_o_ap_vld : OUT STD_LOGIC;
        uart_to_coordinates_tempCoordinates_2_i : IN STD_LOGIC_VECTOR (31 downto 0);
        uart_to_coordinates_tempCoordinates_2_o : OUT STD_LOGIC_VECTOR (31 downto 0);
        uart_to_coordinates_tempCoordinates_2_o_ap_vld : OUT STD_LOGIC;
        input_V_read : IN STD_LOGIC_VECTOR (0 downto 0);
        p_read : IN STD_LOGIC_VECTOR (31 downto 0);
        p_read2 : IN STD_LOGIC_VECTOR (31 downto 0);
        p_read5 : IN STD_LOGIC_VECTOR (31 downto 0);
        ap_return_0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        ap_return_1 : OUT STD_LOGIC_VECTOR (7 downto 0);
        ap_return_2 : OUT STD_LOGIC_VECTOR (7 downto 0);
        ap_return_3 : OUT STD_LOGIC_VECTOR (5 downto 0);
        ap_return_4 : OUT STD_LOGIC_VECTOR (31 downto 0);
        ap_return_5 : OUT STD_LOGIC_VECTOR (31 downto 0);
        ap_return_6 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component master_ip_dadd_64ns_64ns_64_4_full_dsp IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (63 downto 0);
        din1 : IN STD_LOGIC_VECTOR (63 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component master_ip_dmul_64ns_64ns_64_4_max_dsp IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (63 downto 0);
        din1 : IN STD_LOGIC_VECTOR (63 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component master_ip_sitodp_32ns_64_3 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component master_ip_dsqrt_64ns_64ns_64_17 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (63 downto 0);
        din1 : IN STD_LOGIC_VECTOR (63 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component master_ip_AXILiteS_s_axi IS
    generic (
        C_S_AXI_ADDR_WIDTH : INTEGER;
        C_S_AXI_DATA_WIDTH : INTEGER );
    port (
        AWVALID : IN STD_LOGIC;
        AWREADY : OUT STD_LOGIC;
        AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        WVALID : IN STD_LOGIC;
        WREADY : OUT STD_LOGIC;
        WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH/8-1 downto 0);
        ARVALID : IN STD_LOGIC;
        ARREADY : OUT STD_LOGIC;
        ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        RVALID : OUT STD_LOGIC;
        RREADY : IN STD_LOGIC;
        RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        BVALID : OUT STD_LOGIC;
        BREADY : IN STD_LOGIC;
        BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        axi_byte_V : OUT STD_LOGIC_VECTOR (7 downto 0) );
    end component;



begin
    master_ip_AXILiteS_s_axi_U : component master_ip_AXILiteS_s_axi
    generic map (
        C_S_AXI_ADDR_WIDTH => C_S_AXI_AXILITES_ADDR_WIDTH,
        C_S_AXI_DATA_WIDTH => C_S_AXI_AXILITES_DATA_WIDTH)
    port map (
        AWVALID => s_axi_AXILiteS_AWVALID,
        AWREADY => s_axi_AXILiteS_AWREADY,
        AWADDR => s_axi_AXILiteS_AWADDR,
        WVALID => s_axi_AXILiteS_WVALID,
        WREADY => s_axi_AXILiteS_WREADY,
        WDATA => s_axi_AXILiteS_WDATA,
        WSTRB => s_axi_AXILiteS_WSTRB,
        ARVALID => s_axi_AXILiteS_ARVALID,
        ARREADY => s_axi_AXILiteS_ARREADY,
        ARADDR => s_axi_AXILiteS_ARADDR,
        RVALID => s_axi_AXILiteS_RVALID,
        RREADY => s_axi_AXILiteS_RREADY,
        RDATA => s_axi_AXILiteS_RDATA,
        RRESP => s_axi_AXILiteS_RRESP,
        BVALID => s_axi_AXILiteS_BVALID,
        BREADY => s_axi_AXILiteS_BREADY,
        BRESP => s_axi_AXILiteS_BRESP,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => master_ip_AXILiteS_s_axi_U_ap_dummy_ce,
        axi_byte_V => axi_byte_V);

    grp_master_ip_mainFunction_fu_139 : component master_ip_mainFunction
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => grp_master_ip_mainFunction_fu_139_ap_start,
        ap_done => grp_master_ip_mainFunction_fu_139_ap_done,
        ap_idle => grp_master_ip_mainFunction_fu_139_ap_idle,
        ap_ready => grp_master_ip_mainFunction_fu_139_ap_ready,
        uart_to_coordinates_count_V_i => grp_master_ip_mainFunction_fu_139_uart_to_coordinates_count_V_i,
        uart_to_coordinates_count_V_o => grp_master_ip_mainFunction_fu_139_uart_to_coordinates_count_V_o,
        uart_to_coordinates_count_V_o_ap_vld => grp_master_ip_mainFunction_fu_139_uart_to_coordinates_count_V_o_ap_vld,
        uart_to_coordinates_previous_input_V_i => grp_master_ip_mainFunction_fu_139_uart_to_coordinates_previous_input_V_i,
        uart_to_coordinates_previous_input_V_o => grp_master_ip_mainFunction_fu_139_uart_to_coordinates_previous_input_V_o,
        uart_to_coordinates_previous_input_V_o_ap_vld => grp_master_ip_mainFunction_fu_139_uart_to_coordinates_previous_input_V_o_ap_vld,
        uart_to_coordinates_uart_state_V_i => grp_master_ip_mainFunction_fu_139_uart_to_coordinates_uart_state_V_i,
        uart_to_coordinates_uart_state_V_o => grp_master_ip_mainFunction_fu_139_uart_to_coordinates_uart_state_V_o,
        uart_to_coordinates_uart_state_V_o_ap_vld => grp_master_ip_mainFunction_fu_139_uart_to_coordinates_uart_state_V_o_ap_vld,
        uart_to_coordinates_next_out_byte_V_i => grp_master_ip_mainFunction_fu_139_uart_to_coordinates_next_out_byte_V_i,
        uart_to_coordinates_next_out_byte_V_o => grp_master_ip_mainFunction_fu_139_uart_to_coordinates_next_out_byte_V_o,
        uart_to_coordinates_next_out_byte_V_o_ap_vld => grp_master_ip_mainFunction_fu_139_uart_to_coordinates_next_out_byte_V_o_ap_vld,
        uart_to_coordinates_current_out_byte_V_read => grp_master_ip_mainFunction_fu_139_uart_to_coordinates_current_out_byte_V_read,
        uart_to_coordinates_gnss_state_V_read => grp_master_ip_mainFunction_fu_139_uart_to_coordinates_gnss_state_V_read,
        uart_to_coordinates_ck_a_V_read => grp_master_ip_mainFunction_fu_139_uart_to_coordinates_ck_a_V_read,
        uart_to_coordinates_ck_b_V_read => grp_master_ip_mainFunction_fu_139_uart_to_coordinates_ck_b_V_read,
        uart_to_coordinates_tempCoordinates_0_i => grp_master_ip_mainFunction_fu_139_uart_to_coordinates_tempCoordinates_0_i,
        uart_to_coordinates_tempCoordinates_0_o => grp_master_ip_mainFunction_fu_139_uart_to_coordinates_tempCoordinates_0_o,
        uart_to_coordinates_tempCoordinates_0_o_ap_vld => grp_master_ip_mainFunction_fu_139_uart_to_coordinates_tempCoordinates_0_o_ap_vld,
        uart_to_coordinates_tempCoordinates_1_i => grp_master_ip_mainFunction_fu_139_uart_to_coordinates_tempCoordinates_1_i,
        uart_to_coordinates_tempCoordinates_1_o => grp_master_ip_mainFunction_fu_139_uart_to_coordinates_tempCoordinates_1_o,
        uart_to_coordinates_tempCoordinates_1_o_ap_vld => grp_master_ip_mainFunction_fu_139_uart_to_coordinates_tempCoordinates_1_o_ap_vld,
        uart_to_coordinates_tempCoordinates_2_i => grp_master_ip_mainFunction_fu_139_uart_to_coordinates_tempCoordinates_2_i,
        uart_to_coordinates_tempCoordinates_2_o => grp_master_ip_mainFunction_fu_139_uart_to_coordinates_tempCoordinates_2_o,
        uart_to_coordinates_tempCoordinates_2_o_ap_vld => grp_master_ip_mainFunction_fu_139_uart_to_coordinates_tempCoordinates_2_o_ap_vld,
        input_V_read => grp_master_ip_mainFunction_fu_139_input_V_read,
        p_read => grp_master_ip_mainFunction_fu_139_p_read,
        p_read2 => grp_master_ip_mainFunction_fu_139_p_read2,
        p_read5 => grp_master_ip_mainFunction_fu_139_p_read5,
        ap_return_0 => grp_master_ip_mainFunction_fu_139_ap_return_0,
        ap_return_1 => grp_master_ip_mainFunction_fu_139_ap_return_1,
        ap_return_2 => grp_master_ip_mainFunction_fu_139_ap_return_2,
        ap_return_3 => grp_master_ip_mainFunction_fu_139_ap_return_3,
        ap_return_4 => grp_master_ip_mainFunction_fu_139_ap_return_4,
        ap_return_5 => grp_master_ip_mainFunction_fu_139_ap_return_5,
        ap_return_6 => grp_master_ip_mainFunction_fu_139_ap_return_6);

    grp_master_ip_mainFunction_fu_166 : component master_ip_mainFunction
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => grp_master_ip_mainFunction_fu_166_ap_start,
        ap_done => grp_master_ip_mainFunction_fu_166_ap_done,
        ap_idle => grp_master_ip_mainFunction_fu_166_ap_idle,
        ap_ready => grp_master_ip_mainFunction_fu_166_ap_ready,
        uart_to_coordinates_count_V_i => grp_master_ip_mainFunction_fu_166_uart_to_coordinates_count_V_i,
        uart_to_coordinates_count_V_o => grp_master_ip_mainFunction_fu_166_uart_to_coordinates_count_V_o,
        uart_to_coordinates_count_V_o_ap_vld => grp_master_ip_mainFunction_fu_166_uart_to_coordinates_count_V_o_ap_vld,
        uart_to_coordinates_previous_input_V_i => grp_master_ip_mainFunction_fu_166_uart_to_coordinates_previous_input_V_i,
        uart_to_coordinates_previous_input_V_o => grp_master_ip_mainFunction_fu_166_uart_to_coordinates_previous_input_V_o,
        uart_to_coordinates_previous_input_V_o_ap_vld => grp_master_ip_mainFunction_fu_166_uart_to_coordinates_previous_input_V_o_ap_vld,
        uart_to_coordinates_uart_state_V_i => grp_master_ip_mainFunction_fu_166_uart_to_coordinates_uart_state_V_i,
        uart_to_coordinates_uart_state_V_o => grp_master_ip_mainFunction_fu_166_uart_to_coordinates_uart_state_V_o,
        uart_to_coordinates_uart_state_V_o_ap_vld => grp_master_ip_mainFunction_fu_166_uart_to_coordinates_uart_state_V_o_ap_vld,
        uart_to_coordinates_next_out_byte_V_i => grp_master_ip_mainFunction_fu_166_uart_to_coordinates_next_out_byte_V_i,
        uart_to_coordinates_next_out_byte_V_o => grp_master_ip_mainFunction_fu_166_uart_to_coordinates_next_out_byte_V_o,
        uart_to_coordinates_next_out_byte_V_o_ap_vld => grp_master_ip_mainFunction_fu_166_uart_to_coordinates_next_out_byte_V_o_ap_vld,
        uart_to_coordinates_current_out_byte_V_read => grp_master_ip_mainFunction_fu_166_uart_to_coordinates_current_out_byte_V_read,
        uart_to_coordinates_gnss_state_V_read => grp_master_ip_mainFunction_fu_166_uart_to_coordinates_gnss_state_V_read,
        uart_to_coordinates_ck_a_V_read => grp_master_ip_mainFunction_fu_166_uart_to_coordinates_ck_a_V_read,
        uart_to_coordinates_ck_b_V_read => grp_master_ip_mainFunction_fu_166_uart_to_coordinates_ck_b_V_read,
        uart_to_coordinates_tempCoordinates_0_i => grp_master_ip_mainFunction_fu_166_uart_to_coordinates_tempCoordinates_0_i,
        uart_to_coordinates_tempCoordinates_0_o => grp_master_ip_mainFunction_fu_166_uart_to_coordinates_tempCoordinates_0_o,
        uart_to_coordinates_tempCoordinates_0_o_ap_vld => grp_master_ip_mainFunction_fu_166_uart_to_coordinates_tempCoordinates_0_o_ap_vld,
        uart_to_coordinates_tempCoordinates_1_i => grp_master_ip_mainFunction_fu_166_uart_to_coordinates_tempCoordinates_1_i,
        uart_to_coordinates_tempCoordinates_1_o => grp_master_ip_mainFunction_fu_166_uart_to_coordinates_tempCoordinates_1_o,
        uart_to_coordinates_tempCoordinates_1_o_ap_vld => grp_master_ip_mainFunction_fu_166_uart_to_coordinates_tempCoordinates_1_o_ap_vld,
        uart_to_coordinates_tempCoordinates_2_i => grp_master_ip_mainFunction_fu_166_uart_to_coordinates_tempCoordinates_2_i,
        uart_to_coordinates_tempCoordinates_2_o => grp_master_ip_mainFunction_fu_166_uart_to_coordinates_tempCoordinates_2_o,
        uart_to_coordinates_tempCoordinates_2_o_ap_vld => grp_master_ip_mainFunction_fu_166_uart_to_coordinates_tempCoordinates_2_o_ap_vld,
        input_V_read => grp_master_ip_mainFunction_fu_166_input_V_read,
        p_read => grp_master_ip_mainFunction_fu_166_p_read,
        p_read2 => grp_master_ip_mainFunction_fu_166_p_read2,
        p_read5 => grp_master_ip_mainFunction_fu_166_p_read5,
        ap_return_0 => grp_master_ip_mainFunction_fu_166_ap_return_0,
        ap_return_1 => grp_master_ip_mainFunction_fu_166_ap_return_1,
        ap_return_2 => grp_master_ip_mainFunction_fu_166_ap_return_2,
        ap_return_3 => grp_master_ip_mainFunction_fu_166_ap_return_3,
        ap_return_4 => grp_master_ip_mainFunction_fu_166_ap_return_4,
        ap_return_5 => grp_master_ip_mainFunction_fu_166_ap_return_5,
        ap_return_6 => grp_master_ip_mainFunction_fu_166_ap_return_6);

    master_ip_dadd_64ns_64ns_64_4_full_dsp_U31 : component master_ip_dadd_64ns_64ns_64_4_full_dsp
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => grp_fu_193_p0,
        din1 => grp_fu_193_p1,
        ce => grp_fu_193_ce,
        dout => grp_fu_193_p2);

    master_ip_dmul_64ns_64ns_64_4_max_dsp_U32 : component master_ip_dmul_64ns_64ns_64_4_max_dsp
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => reg_216,
        din1 => reg_216,
        ce => grp_fu_197_ce,
        dout => grp_fu_197_p2);

    master_ip_dmul_64ns_64ns_64_4_max_dsp_U33 : component master_ip_dmul_64ns_64ns_64_4_max_dsp
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => tmp_97_i_reg_705,
        din1 => tmp_97_i_reg_705,
        ce => grp_fu_201_ce,
        dout => grp_fu_201_p2);

    master_ip_sitodp_32ns_64_3_U34 : component master_ip_sitodp_32ns_64_3
    generic map (
        ID => 1,
        NUM_STAGE => 3,
        din0_WIDTH => 32,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => grp_fu_205_p0,
        ce => grp_fu_205_ce,
        dout => grp_fu_205_p1);

    master_ip_sitodp_32ns_64_3_U35 : component master_ip_sitodp_32ns_64_3
    generic map (
        ID => 1,
        NUM_STAGE => 3,
        din0_WIDTH => 32,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => tmp_96_i_reg_695,
        ce => grp_fu_208_ce,
        dout => grp_fu_208_p1);

    master_ip_dsqrt_64ns_64ns_64_17_U36 : component master_ip_dsqrt_64ns_64ns_64_17
    generic map (
        ID => 1,
        NUM_STAGE => 17,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => ap_const_lv64_0,
        din1 => reg_228,
        ce => grp_fu_211_ce,
        dout => grp_fu_211_p2);





    -- the current state (ap_CS_fsm) of the state machine. --
    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_CS_fsm <= ap_ST_st1_fsm_0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    -- grp_master_ip_mainFunction_fu_139_ap_start_ap_start_reg assign process. --
    grp_master_ip_mainFunction_fu_139_ap_start_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                grp_master_ip_mainFunction_fu_139_ap_start_ap_start_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0)) then 
                    grp_master_ip_mainFunction_fu_139_ap_start_ap_start_reg <= ap_const_logic_1;
                elsif ((ap_const_logic_1 = grp_master_ip_mainFunction_fu_139_ap_ready)) then 
                    grp_master_ip_mainFunction_fu_139_ap_start_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    -- grp_master_ip_mainFunction_fu_166_ap_start_ap_start_reg assign process. --
    grp_master_ip_mainFunction_fu_166_ap_start_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                grp_master_ip_mainFunction_fu_166_ap_start_ap_start_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0)) then 
                    grp_master_ip_mainFunction_fu_166_ap_start_ap_start_reg <= ap_const_logic_1;
                elsif ((ap_const_logic_1 = grp_master_ip_mainFunction_fu_166_ap_ready)) then 
                    grp_master_ip_mainFunction_fu_166_ap_start_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1) and not(((ap_const_logic_0 = grp_master_ip_mainFunction_fu_139_ap_done) or (ap_const_logic_0 = grp_master_ip_mainFunction_fu_166_ap_done))))) then
                coordinates1_0 <= grp_master_ip_mainFunction_fu_139_ap_return_4;
                coordinates1_1 <= grp_master_ip_mainFunction_fu_139_ap_return_5;
                coordinates1_2 <= grp_master_ip_mainFunction_fu_139_ap_return_6;
                coordinates2_0 <= grp_master_ip_mainFunction_fu_166_ap_return_4;
                coordinates2_1 <= grp_master_ip_mainFunction_fu_166_ap_return_5;
                coordinates2_2 <= grp_master_ip_mainFunction_fu_166_ap_return_6;
                signal1_ck_a_V <= grp_master_ip_mainFunction_fu_139_ap_return_0;
                signal1_ck_b_V <= grp_master_ip_mainFunction_fu_139_ap_return_1;
                signal1_current_out_byte_V <= grp_master_ip_mainFunction_fu_139_ap_return_2;
                signal1_gnss_state_V <= grp_master_ip_mainFunction_fu_139_ap_return_3;
                signal2_ck_a_V <= grp_master_ip_mainFunction_fu_166_ap_return_0;
                signal2_ck_b_V <= grp_master_ip_mainFunction_fu_166_ap_return_1;
                signal2_current_out_byte_V <= grp_master_ip_mainFunction_fu_166_ap_return_2;
                signal2_gnss_state_V <= grp_master_ip_mainFunction_fu_166_ap_return_3;
                tmp_100_i_reg_700 <= tmp_100_i_fu_456_p2;
                tmp_96_i_reg_695 <= tmp_96_i_fu_450_p2;
                tmp_i_reg_690 <= tmp_i_fu_444_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st5_fsm_4) or (ap_const_logic_1 = ap_sig_cseq_ST_st9_fsm_8))) then
                reg_216 <= grp_fu_205_p1;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st9_fsm_8) or (ap_const_logic_1 = ap_sig_cseq_ST_st13_fsm_12))) then
                reg_222 <= grp_fu_197_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st13_fsm_12) or (ap_const_logic_1 = ap_sig_cseq_ST_st17_fsm_16))) then
                reg_228 <= grp_fu_193_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0) and (ap_const_logic_1 = grp_master_ip_mainFunction_fu_139_uart_to_coordinates_count_V_o_ap_vld)) or ((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1) and (ap_const_logic_1 = grp_master_ip_mainFunction_fu_139_uart_to_coordinates_count_V_o_ap_vld)))) then
                signal1_count_V <= grp_master_ip_mainFunction_fu_139_uart_to_coordinates_count_V_o;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0) and (ap_const_logic_1 = grp_master_ip_mainFunction_fu_139_uart_to_coordinates_next_out_byte_V_o_ap_vld)) or ((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1) and (ap_const_logic_1 = grp_master_ip_mainFunction_fu_139_uart_to_coordinates_next_out_byte_V_o_ap_vld)))) then
                signal1_next_out_byte_V <= grp_master_ip_mainFunction_fu_139_uart_to_coordinates_next_out_byte_V_o;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0) and (ap_const_logic_1 = grp_master_ip_mainFunction_fu_139_uart_to_coordinates_previous_input_V_o_ap_vld)) or ((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1) and (ap_const_logic_1 = grp_master_ip_mainFunction_fu_139_uart_to_coordinates_previous_input_V_o_ap_vld)))) then
                signal1_previous_input_V <= grp_master_ip_mainFunction_fu_139_uart_to_coordinates_previous_input_V_o;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0) and (ap_const_logic_1 = grp_master_ip_mainFunction_fu_139_uart_to_coordinates_tempCoordinates_0_o_ap_vld)) or ((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1) and (ap_const_logic_1 = grp_master_ip_mainFunction_fu_139_uart_to_coordinates_tempCoordinates_0_o_ap_vld)))) then
                signal1_tempCoordinates_0 <= grp_master_ip_mainFunction_fu_139_uart_to_coordinates_tempCoordinates_0_o;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0) and (ap_const_logic_1 = grp_master_ip_mainFunction_fu_139_uart_to_coordinates_tempCoordinates_1_o_ap_vld)) or ((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1) and (ap_const_logic_1 = grp_master_ip_mainFunction_fu_139_uart_to_coordinates_tempCoordinates_1_o_ap_vld)))) then
                signal1_tempCoordinates_1 <= grp_master_ip_mainFunction_fu_139_uart_to_coordinates_tempCoordinates_1_o;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0) and (ap_const_logic_1 = grp_master_ip_mainFunction_fu_139_uart_to_coordinates_tempCoordinates_2_o_ap_vld)) or ((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1) and (ap_const_logic_1 = grp_master_ip_mainFunction_fu_139_uart_to_coordinates_tempCoordinates_2_o_ap_vld)))) then
                signal1_tempCoordinates_2 <= grp_master_ip_mainFunction_fu_139_uart_to_coordinates_tempCoordinates_2_o;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0) and (ap_const_logic_1 = grp_master_ip_mainFunction_fu_139_uart_to_coordinates_uart_state_V_o_ap_vld)) or ((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1) and (ap_const_logic_1 = grp_master_ip_mainFunction_fu_139_uart_to_coordinates_uart_state_V_o_ap_vld)))) then
                signal1_uart_state_V <= grp_master_ip_mainFunction_fu_139_uart_to_coordinates_uart_state_V_o;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0) and (ap_const_logic_1 = grp_master_ip_mainFunction_fu_166_uart_to_coordinates_count_V_o_ap_vld)) or ((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1) and (ap_const_logic_1 = grp_master_ip_mainFunction_fu_166_uart_to_coordinates_count_V_o_ap_vld)))) then
                signal2_count_V <= grp_master_ip_mainFunction_fu_166_uart_to_coordinates_count_V_o;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0) and (ap_const_logic_1 = grp_master_ip_mainFunction_fu_166_uart_to_coordinates_next_out_byte_V_o_ap_vld)) or ((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1) and (ap_const_logic_1 = grp_master_ip_mainFunction_fu_166_uart_to_coordinates_next_out_byte_V_o_ap_vld)))) then
                signal2_next_out_byte_V <= grp_master_ip_mainFunction_fu_166_uart_to_coordinates_next_out_byte_V_o;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0) and (ap_const_logic_1 = grp_master_ip_mainFunction_fu_166_uart_to_coordinates_previous_input_V_o_ap_vld)) or ((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1) and (ap_const_logic_1 = grp_master_ip_mainFunction_fu_166_uart_to_coordinates_previous_input_V_o_ap_vld)))) then
                signal2_previous_input_V <= grp_master_ip_mainFunction_fu_166_uart_to_coordinates_previous_input_V_o;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0) and (ap_const_logic_1 = grp_master_ip_mainFunction_fu_166_uart_to_coordinates_tempCoordinates_0_o_ap_vld)) or ((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1) and (ap_const_logic_1 = grp_master_ip_mainFunction_fu_166_uart_to_coordinates_tempCoordinates_0_o_ap_vld)))) then
                signal2_tempCoordinates_0 <= grp_master_ip_mainFunction_fu_166_uart_to_coordinates_tempCoordinates_0_o;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0) and (ap_const_logic_1 = grp_master_ip_mainFunction_fu_166_uart_to_coordinates_tempCoordinates_1_o_ap_vld)) or ((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1) and (ap_const_logic_1 = grp_master_ip_mainFunction_fu_166_uart_to_coordinates_tempCoordinates_1_o_ap_vld)))) then
                signal2_tempCoordinates_1 <= grp_master_ip_mainFunction_fu_166_uart_to_coordinates_tempCoordinates_1_o;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0) and (ap_const_logic_1 = grp_master_ip_mainFunction_fu_166_uart_to_coordinates_tempCoordinates_2_o_ap_vld)) or ((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1) and (ap_const_logic_1 = grp_master_ip_mainFunction_fu_166_uart_to_coordinates_tempCoordinates_2_o_ap_vld)))) then
                signal2_tempCoordinates_2 <= grp_master_ip_mainFunction_fu_166_uart_to_coordinates_tempCoordinates_2_o;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0) and (ap_const_logic_1 = grp_master_ip_mainFunction_fu_166_uart_to_coordinates_uart_state_V_o_ap_vld)) or ((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1) and (ap_const_logic_1 = grp_master_ip_mainFunction_fu_166_uart_to_coordinates_uart_state_V_o_ap_vld)))) then
                signal2_uart_state_V <= grp_master_ip_mainFunction_fu_166_uart_to_coordinates_uart_state_V_o;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st5_fsm_4)) then
                tmp_97_i_reg_705 <= grp_fu_208_p1;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st9_fsm_8)) then
                tmp_98_i_reg_711 <= grp_fu_201_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st34_fsm_33)) then
                x_assign_reg_716 <= grp_fu_211_p2;
            end if;
        end if;
    end process;

    -- the next state (ap_NS_fsm) of the state machine. --
    ap_NS_fsm_assign_proc : process (ap_CS_fsm, grp_master_ip_mainFunction_fu_139_ap_done, grp_master_ip_mainFunction_fu_166_ap_done)
    begin
        case ap_CS_fsm is
            when ap_ST_st1_fsm_0 => 
                ap_NS_fsm <= ap_ST_st2_fsm_1;
            when ap_ST_st2_fsm_1 => 
                if (not(((ap_const_logic_0 = grp_master_ip_mainFunction_fu_139_ap_done) or (ap_const_logic_0 = grp_master_ip_mainFunction_fu_166_ap_done)))) then
                    ap_NS_fsm <= ap_ST_st3_fsm_2;
                else
                    ap_NS_fsm <= ap_ST_st2_fsm_1;
                end if;
            when ap_ST_st3_fsm_2 => 
                ap_NS_fsm <= ap_ST_st4_fsm_3;
            when ap_ST_st4_fsm_3 => 
                ap_NS_fsm <= ap_ST_st5_fsm_4;
            when ap_ST_st5_fsm_4 => 
                ap_NS_fsm <= ap_ST_st6_fsm_5;
            when ap_ST_st6_fsm_5 => 
                ap_NS_fsm <= ap_ST_st7_fsm_6;
            when ap_ST_st7_fsm_6 => 
                ap_NS_fsm <= ap_ST_st8_fsm_7;
            when ap_ST_st8_fsm_7 => 
                ap_NS_fsm <= ap_ST_st9_fsm_8;
            when ap_ST_st9_fsm_8 => 
                ap_NS_fsm <= ap_ST_st10_fsm_9;
            when ap_ST_st10_fsm_9 => 
                ap_NS_fsm <= ap_ST_st11_fsm_10;
            when ap_ST_st11_fsm_10 => 
                ap_NS_fsm <= ap_ST_st12_fsm_11;
            when ap_ST_st12_fsm_11 => 
                ap_NS_fsm <= ap_ST_st13_fsm_12;
            when ap_ST_st13_fsm_12 => 
                ap_NS_fsm <= ap_ST_st14_fsm_13;
            when ap_ST_st14_fsm_13 => 
                ap_NS_fsm <= ap_ST_st15_fsm_14;
            when ap_ST_st15_fsm_14 => 
                ap_NS_fsm <= ap_ST_st16_fsm_15;
            when ap_ST_st16_fsm_15 => 
                ap_NS_fsm <= ap_ST_st17_fsm_16;
            when ap_ST_st17_fsm_16 => 
                ap_NS_fsm <= ap_ST_st18_fsm_17;
            when ap_ST_st18_fsm_17 => 
                ap_NS_fsm <= ap_ST_st19_fsm_18;
            when ap_ST_st19_fsm_18 => 
                ap_NS_fsm <= ap_ST_st20_fsm_19;
            when ap_ST_st20_fsm_19 => 
                ap_NS_fsm <= ap_ST_st21_fsm_20;
            when ap_ST_st21_fsm_20 => 
                ap_NS_fsm <= ap_ST_st22_fsm_21;
            when ap_ST_st22_fsm_21 => 
                ap_NS_fsm <= ap_ST_st23_fsm_22;
            when ap_ST_st23_fsm_22 => 
                ap_NS_fsm <= ap_ST_st24_fsm_23;
            when ap_ST_st24_fsm_23 => 
                ap_NS_fsm <= ap_ST_st25_fsm_24;
            when ap_ST_st25_fsm_24 => 
                ap_NS_fsm <= ap_ST_st26_fsm_25;
            when ap_ST_st26_fsm_25 => 
                ap_NS_fsm <= ap_ST_st27_fsm_26;
            when ap_ST_st27_fsm_26 => 
                ap_NS_fsm <= ap_ST_st28_fsm_27;
            when ap_ST_st28_fsm_27 => 
                ap_NS_fsm <= ap_ST_st29_fsm_28;
            when ap_ST_st29_fsm_28 => 
                ap_NS_fsm <= ap_ST_st30_fsm_29;
            when ap_ST_st30_fsm_29 => 
                ap_NS_fsm <= ap_ST_st31_fsm_30;
            when ap_ST_st31_fsm_30 => 
                ap_NS_fsm <= ap_ST_st32_fsm_31;
            when ap_ST_st32_fsm_31 => 
                ap_NS_fsm <= ap_ST_st33_fsm_32;
            when ap_ST_st33_fsm_32 => 
                ap_NS_fsm <= ap_ST_st34_fsm_33;
            when ap_ST_st34_fsm_33 => 
                ap_NS_fsm <= ap_ST_st35_fsm_34;
            when ap_ST_st35_fsm_34 => 
                ap_NS_fsm <= ap_ST_st1_fsm_0;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end case;
    end process;
    alert_V <= "1" when (signed(p_Val2_5_fu_595_p3) > signed(ap_const_lv32_3E8)) else "0";

    -- ap_rst_n_inv assign process. --
    ap_rst_n_inv_assign_proc : process(ap_rst_n)
    begin
                ap_rst_n_inv <= not(ap_rst_n);
    end process;


    -- ap_sig_bdd_126 assign process. --
    ap_sig_bdd_126_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_126 <= (ap_CS_fsm(4 downto 4) = ap_const_lv1_1);
    end process;


    -- ap_sig_bdd_134 assign process. --
    ap_sig_bdd_134_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_134 <= (ap_const_lv1_1 = ap_CS_fsm(8 downto 8));
    end process;


    -- ap_sig_bdd_144 assign process. --
    ap_sig_bdd_144_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_144 <= (ap_const_lv1_1 = ap_CS_fsm(12 downto 12));
    end process;


    -- ap_sig_bdd_154 assign process. --
    ap_sig_bdd_154_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_154 <= (ap_const_lv1_1 = ap_CS_fsm(16 downto 16));
    end process;


    -- ap_sig_bdd_163 assign process. --
    ap_sig_bdd_163_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_163 <= (ap_const_lv1_1 = ap_CS_fsm(0 downto 0));
    end process;


    -- ap_sig_bdd_202 assign process. --
    ap_sig_bdd_202_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_202 <= (ap_const_lv1_1 = ap_CS_fsm(1 downto 1));
    end process;


    -- ap_sig_bdd_226 assign process. --
    ap_sig_bdd_226_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_226 <= (ap_const_lv1_1 = ap_CS_fsm(33 downto 33));
    end process;


    -- ap_sig_bdd_403 assign process. --
    ap_sig_bdd_403_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_403 <= (ap_const_lv1_1 = ap_CS_fsm(34 downto 34));
    end process;


    -- ap_sig_bdd_412 assign process. --
    ap_sig_bdd_412_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_412 <= (ap_const_lv1_1 = ap_CS_fsm(9 downto 9));
    end process;


    -- ap_sig_bdd_419 assign process. --
    ap_sig_bdd_419_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_419 <= (ap_const_lv1_1 = ap_CS_fsm(13 downto 13));
    end process;


    -- ap_sig_bdd_438 assign process. --
    ap_sig_bdd_438_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_438 <= (ap_const_lv1_1 = ap_CS_fsm(2 downto 2));
    end process;


    -- ap_sig_bdd_445 assign process. --
    ap_sig_bdd_445_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_445 <= (ap_const_lv1_1 = ap_CS_fsm(6 downto 6));
    end process;


    -- ap_sig_cseq_ST_st10_fsm_9 assign process. --
    ap_sig_cseq_ST_st10_fsm_9_assign_proc : process(ap_sig_bdd_412)
    begin
        if (ap_sig_bdd_412) then 
            ap_sig_cseq_ST_st10_fsm_9 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st10_fsm_9 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st13_fsm_12 assign process. --
    ap_sig_cseq_ST_st13_fsm_12_assign_proc : process(ap_sig_bdd_144)
    begin
        if (ap_sig_bdd_144) then 
            ap_sig_cseq_ST_st13_fsm_12 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st13_fsm_12 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st14_fsm_13 assign process. --
    ap_sig_cseq_ST_st14_fsm_13_assign_proc : process(ap_sig_bdd_419)
    begin
        if (ap_sig_bdd_419) then 
            ap_sig_cseq_ST_st14_fsm_13 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st14_fsm_13 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st17_fsm_16 assign process. --
    ap_sig_cseq_ST_st17_fsm_16_assign_proc : process(ap_sig_bdd_154)
    begin
        if (ap_sig_bdd_154) then 
            ap_sig_cseq_ST_st17_fsm_16 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st17_fsm_16 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st1_fsm_0 assign process. --
    ap_sig_cseq_ST_st1_fsm_0_assign_proc : process(ap_sig_bdd_163)
    begin
        if (ap_sig_bdd_163) then 
            ap_sig_cseq_ST_st1_fsm_0 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st1_fsm_0 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st2_fsm_1 assign process. --
    ap_sig_cseq_ST_st2_fsm_1_assign_proc : process(ap_sig_bdd_202)
    begin
        if (ap_sig_bdd_202) then 
            ap_sig_cseq_ST_st2_fsm_1 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st2_fsm_1 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st34_fsm_33 assign process. --
    ap_sig_cseq_ST_st34_fsm_33_assign_proc : process(ap_sig_bdd_226)
    begin
        if (ap_sig_bdd_226) then 
            ap_sig_cseq_ST_st34_fsm_33 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st34_fsm_33 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st35_fsm_34 assign process. --
    ap_sig_cseq_ST_st35_fsm_34_assign_proc : process(ap_sig_bdd_403)
    begin
        if (ap_sig_bdd_403) then 
            ap_sig_cseq_ST_st35_fsm_34 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st35_fsm_34 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st3_fsm_2 assign process. --
    ap_sig_cseq_ST_st3_fsm_2_assign_proc : process(ap_sig_bdd_438)
    begin
        if (ap_sig_bdd_438) then 
            ap_sig_cseq_ST_st3_fsm_2 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st3_fsm_2 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st5_fsm_4 assign process. --
    ap_sig_cseq_ST_st5_fsm_4_assign_proc : process(ap_sig_bdd_126)
    begin
        if (ap_sig_bdd_126) then 
            ap_sig_cseq_ST_st5_fsm_4 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st5_fsm_4 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st7_fsm_6 assign process. --
    ap_sig_cseq_ST_st7_fsm_6_assign_proc : process(ap_sig_bdd_445)
    begin
        if (ap_sig_bdd_445) then 
            ap_sig_cseq_ST_st7_fsm_6 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st7_fsm_6 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st9_fsm_8 assign process. --
    ap_sig_cseq_ST_st9_fsm_8_assign_proc : process(ap_sig_bdd_134)
    begin
        if (ap_sig_bdd_134) then 
            ap_sig_cseq_ST_st9_fsm_8 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st9_fsm_8 <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_193_ce <= ap_const_logic_1;

    -- grp_fu_193_p0 assign process. --
    grp_fu_193_p0_assign_proc : process(reg_222, reg_228, ap_sig_cseq_ST_st10_fsm_9, ap_sig_cseq_ST_st14_fsm_13)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st14_fsm_13)) then 
            grp_fu_193_p0 <= reg_228;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st10_fsm_9)) then 
            grp_fu_193_p0 <= reg_222;
        else 
            grp_fu_193_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    -- grp_fu_193_p1 assign process. --
    grp_fu_193_p1_assign_proc : process(reg_222, tmp_98_i_reg_711, ap_sig_cseq_ST_st10_fsm_9, ap_sig_cseq_ST_st14_fsm_13)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st14_fsm_13)) then 
            grp_fu_193_p1 <= reg_222;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st10_fsm_9)) then 
            grp_fu_193_p1 <= tmp_98_i_reg_711;
        else 
            grp_fu_193_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    grp_fu_197_ce <= ap_const_logic_1;
    grp_fu_201_ce <= ap_const_logic_1;
    grp_fu_205_ce <= ap_const_logic_1;

    -- grp_fu_205_p0 assign process. --
    grp_fu_205_p0_assign_proc : process(tmp_i_reg_690, tmp_100_i_reg_700, ap_sig_cseq_ST_st3_fsm_2, ap_sig_cseq_ST_st7_fsm_6)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st7_fsm_6)) then 
            grp_fu_205_p0 <= tmp_100_i_reg_700;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st3_fsm_2)) then 
            grp_fu_205_p0 <= tmp_i_reg_690;
        else 
            grp_fu_205_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    grp_fu_208_ce <= ap_const_logic_1;
    grp_fu_211_ce <= ap_const_logic_1;
    grp_master_ip_mainFunction_fu_139_ap_start <= grp_master_ip_mainFunction_fu_139_ap_start_ap_start_reg;
    grp_master_ip_mainFunction_fu_139_input_V_read <= uart1_V;
    grp_master_ip_mainFunction_fu_139_p_read <= coordinates1_0;
    grp_master_ip_mainFunction_fu_139_p_read2 <= coordinates1_1;
    grp_master_ip_mainFunction_fu_139_p_read5 <= coordinates1_2;
    grp_master_ip_mainFunction_fu_139_uart_to_coordinates_ck_a_V_read <= signal1_ck_a_V;
    grp_master_ip_mainFunction_fu_139_uart_to_coordinates_ck_b_V_read <= signal1_ck_b_V;
    grp_master_ip_mainFunction_fu_139_uart_to_coordinates_count_V_i <= signal1_count_V;
    grp_master_ip_mainFunction_fu_139_uart_to_coordinates_current_out_byte_V_read <= signal1_current_out_byte_V;
    grp_master_ip_mainFunction_fu_139_uart_to_coordinates_gnss_state_V_read <= signal1_gnss_state_V;
    grp_master_ip_mainFunction_fu_139_uart_to_coordinates_next_out_byte_V_i <= signal1_next_out_byte_V;
    grp_master_ip_mainFunction_fu_139_uart_to_coordinates_previous_input_V_i <= signal1_previous_input_V;
    grp_master_ip_mainFunction_fu_139_uart_to_coordinates_tempCoordinates_0_i <= signal1_tempCoordinates_0;
    grp_master_ip_mainFunction_fu_139_uart_to_coordinates_tempCoordinates_1_i <= signal1_tempCoordinates_1;
    grp_master_ip_mainFunction_fu_139_uart_to_coordinates_tempCoordinates_2_i <= signal1_tempCoordinates_2;
    grp_master_ip_mainFunction_fu_139_uart_to_coordinates_uart_state_V_i <= signal1_uart_state_V;
    grp_master_ip_mainFunction_fu_166_ap_start <= grp_master_ip_mainFunction_fu_166_ap_start_ap_start_reg;
    grp_master_ip_mainFunction_fu_166_input_V_read <= uart2_V;
    grp_master_ip_mainFunction_fu_166_p_read <= coordinates2_0;
    grp_master_ip_mainFunction_fu_166_p_read2 <= coordinates2_1;
    grp_master_ip_mainFunction_fu_166_p_read5 <= coordinates2_2;
    grp_master_ip_mainFunction_fu_166_uart_to_coordinates_ck_a_V_read <= signal2_ck_a_V;
    grp_master_ip_mainFunction_fu_166_uart_to_coordinates_ck_b_V_read <= signal2_ck_b_V;
    grp_master_ip_mainFunction_fu_166_uart_to_coordinates_count_V_i <= signal2_count_V;
    grp_master_ip_mainFunction_fu_166_uart_to_coordinates_current_out_byte_V_read <= signal2_current_out_byte_V;
    grp_master_ip_mainFunction_fu_166_uart_to_coordinates_gnss_state_V_read <= signal2_gnss_state_V;
    grp_master_ip_mainFunction_fu_166_uart_to_coordinates_next_out_byte_V_i <= signal2_next_out_byte_V;
    grp_master_ip_mainFunction_fu_166_uart_to_coordinates_previous_input_V_i <= signal2_previous_input_V;
    grp_master_ip_mainFunction_fu_166_uart_to_coordinates_tempCoordinates_0_i <= signal2_tempCoordinates_0;
    grp_master_ip_mainFunction_fu_166_uart_to_coordinates_tempCoordinates_1_i <= signal2_tempCoordinates_1;
    grp_master_ip_mainFunction_fu_166_uart_to_coordinates_tempCoordinates_2_i <= signal2_tempCoordinates_2;
    grp_master_ip_mainFunction_fu_166_uart_to_coordinates_uart_state_V_i <= signal2_uart_state_V;
    isNeg_fu_509_p3 <= sh_assign_fu_503_p2(11 downto 11);
    loc_V_1_fu_483_p1 <= p_Val2_s_fu_462_p1(52 - 1 downto 0);
    loc_V_fu_473_p4 <= p_Val2_s_fu_462_p1(62 downto 52);
    master_ip_AXILiteS_s_axi_U_ap_dummy_ce <= ap_const_logic_1;
    p_Result_1_fu_487_p3 <= (ap_const_lv1_1 & loc_V_1_fu_483_p1);
    p_Result_s_fu_465_p3 <= p_Val2_s_fu_462_p1(63 downto 63);
    p_Val2_3_fu_581_p3 <= 
        tmp_3_fu_567_p1 when (isNeg_fu_509_p3(0) = '1') else 
        tmp_4_fu_571_p4;
    p_Val2_5_fu_595_p3 <= 
        p_Val2_7_i_i_i_fu_589_p2 when (p_Result_s_fu_465_p3(0) = '1') else 
        p_Val2_3_fu_581_p3;
    p_Val2_7_i_i_i_fu_589_p2 <= std_logic_vector(unsigned(ap_const_lv32_0) - unsigned(p_Val2_3_fu_581_p3));
    p_Val2_s_fu_462_p1 <= x_assign_reg_716;
        sh_assign_1_cast_fu_535_p1 <= std_logic_vector(resize(signed(sh_assign_1_fu_527_p3),32));

    sh_assign_1_fu_527_p3 <= 
        tmp_i_i_i_cast_fu_523_p1 when (isNeg_fu_509_p3(0) = '1') else 
        sh_assign_fu_503_p2;
    sh_assign_fu_503_p2 <= std_logic_vector(signed(ap_const_lv12_C01) + signed(tmp_i_i_i_i_cast1_fu_499_p1));
    tmp_100_i_fu_456_p2 <= std_logic_vector(unsigned(grp_master_ip_mainFunction_fu_139_ap_return_6) - unsigned(grp_master_ip_mainFunction_fu_166_ap_return_6));
    tmp_3_fu_567_p1 <= std_logic_vector(resize(unsigned(tmp_fu_559_p3),32));
    tmp_4_fu_571_p4 <= tmp_91_i_i_i_fu_553_p2(83 downto 52);
    tmp_88_i_i_i_cast_fu_543_p1 <= std_logic_vector(resize(unsigned(sh_assign_1_cast_fu_535_p1),53));
    tmp_88_i_i_i_fu_539_p1 <= std_logic_vector(resize(unsigned(sh_assign_1_cast_fu_535_p1),136));
    tmp_89_i_i_i_fu_547_p2 <= std_logic_vector(shift_right(unsigned(p_Result_1_fu_487_p3),to_integer(unsigned('0' & tmp_88_i_i_i_cast_fu_543_p1(31-1 downto 0)))));
    tmp_91_i_i_i_fu_553_p2 <= std_logic_vector(shift_left(unsigned(tmp_i_i_i_fu_495_p1),to_integer(unsigned('0' & tmp_88_i_i_i_fu_539_p1(31-1 downto 0)))));
    tmp_96_i_fu_450_p2 <= std_logic_vector(unsigned(grp_master_ip_mainFunction_fu_139_ap_return_5) - unsigned(grp_master_ip_mainFunction_fu_166_ap_return_5));
    tmp_fu_559_p3 <= tmp_89_i_i_i_fu_547_p2(52 downto 52);
    tmp_i_fu_444_p2 <= std_logic_vector(unsigned(grp_master_ip_mainFunction_fu_139_ap_return_4) - unsigned(grp_master_ip_mainFunction_fu_166_ap_return_4));
    tmp_i_i_i_13_fu_517_p2 <= std_logic_vector(unsigned(ap_const_lv11_3FF) - unsigned(loc_V_fu_473_p4));
        tmp_i_i_i_cast_fu_523_p1 <= std_logic_vector(resize(signed(tmp_i_i_i_13_fu_517_p2),12));

    tmp_i_i_i_fu_495_p1 <= std_logic_vector(resize(unsigned(p_Result_1_fu_487_p3),136));
    tmp_i_i_i_i_cast1_fu_499_p1 <= std_logic_vector(resize(unsigned(loc_V_fu_473_p4),12));
end behav;
