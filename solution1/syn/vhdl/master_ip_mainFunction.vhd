-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2015.4
-- Copyright (C) 2015 Xilinx Inc. All rights reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity master_ip_mainFunction is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    uart_to_coordinates_count_V_i : IN STD_LOGIC_VECTOR (15 downto 0);
    uart_to_coordinates_count_V_o : OUT STD_LOGIC_VECTOR (15 downto 0);
    uart_to_coordinates_count_V_o_ap_vld : OUT STD_LOGIC;
    uart_to_coordinates_previous_input_V_i : IN STD_LOGIC_VECTOR (0 downto 0);
    uart_to_coordinates_previous_input_V_o : OUT STD_LOGIC_VECTOR (0 downto 0);
    uart_to_coordinates_previous_input_V_o_ap_vld : OUT STD_LOGIC;
    uart_to_coordinates_uart_state_V_i : IN STD_LOGIC_VECTOR (3 downto 0);
    uart_to_coordinates_uart_state_V_o : OUT STD_LOGIC_VECTOR (3 downto 0);
    uart_to_coordinates_uart_state_V_o_ap_vld : OUT STD_LOGIC;
    uart_to_coordinates_next_out_byte_V_i : IN STD_LOGIC_VECTOR (7 downto 0);
    uart_to_coordinates_next_out_byte_V_o : OUT STD_LOGIC_VECTOR (7 downto 0);
    uart_to_coordinates_next_out_byte_V_o_ap_vld : OUT STD_LOGIC;
    uart_to_coordinates_current_out_byte_V_read : IN STD_LOGIC_VECTOR (7 downto 0);
    uart_to_coordinates_gnss_state_V_read : IN STD_LOGIC_VECTOR (5 downto 0);
    uart_to_coordinates_ck_a_V_read : IN STD_LOGIC_VECTOR (7 downto 0);
    uart_to_coordinates_ck_b_V_read : IN STD_LOGIC_VECTOR (7 downto 0);
    uart_to_coordinates_tempCoordinates_0_i : IN STD_LOGIC_VECTOR (31 downto 0);
    uart_to_coordinates_tempCoordinates_0_o : OUT STD_LOGIC_VECTOR (31 downto 0);
    uart_to_coordinates_tempCoordinates_0_o_ap_vld : OUT STD_LOGIC;
    uart_to_coordinates_tempCoordinates_1_i : IN STD_LOGIC_VECTOR (31 downto 0);
    uart_to_coordinates_tempCoordinates_1_o : OUT STD_LOGIC_VECTOR (31 downto 0);
    uart_to_coordinates_tempCoordinates_1_o_ap_vld : OUT STD_LOGIC;
    uart_to_coordinates_tempCoordinates_2_i : IN STD_LOGIC_VECTOR (31 downto 0);
    uart_to_coordinates_tempCoordinates_2_o : OUT STD_LOGIC_VECTOR (31 downto 0);
    uart_to_coordinates_tempCoordinates_2_o_ap_vld : OUT STD_LOGIC;
    input_V_read : IN STD_LOGIC_VECTOR (0 downto 0);
    p_read : IN STD_LOGIC_VECTOR (31 downto 0);
    p_read2 : IN STD_LOGIC_VECTOR (31 downto 0);
    p_read5 : IN STD_LOGIC_VECTOR (31 downto 0);
    ap_return_0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    ap_return_1 : OUT STD_LOGIC_VECTOR (7 downto 0);
    ap_return_2 : OUT STD_LOGIC_VECTOR (7 downto 0);
    ap_return_3 : OUT STD_LOGIC_VECTOR (5 downto 0);
    ap_return_4 : OUT STD_LOGIC_VECTOR (31 downto 0);
    ap_return_5 : OUT STD_LOGIC_VECTOR (31 downto 0);
    ap_return_6 : OUT STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of master_ip_mainFunction is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_st1_fsm_0 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_ST_st2_fsm_1 : STD_LOGIC_VECTOR (2 downto 0) := "010";
    constant ap_ST_st3_fsm_2 : STD_LOGIC_VECTOR (2 downto 0) := "100";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv6_39 : STD_LOGIC_VECTOR (5 downto 0) := "111001";
    constant ap_const_lv6_3C : STD_LOGIC_VECTOR (5 downto 0) := "111100";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv6_3F : STD_LOGIC_VECTOR (5 downto 0) := "111111";
    constant ap_const_lv6_3E : STD_LOGIC_VECTOR (5 downto 0) := "111110";
    constant ap_const_lv6_3D : STD_LOGIC_VECTOR (5 downto 0) := "111101";
    constant ap_const_lv6_3B : STD_LOGIC_VECTOR (5 downto 0) := "111011";
    constant ap_const_lv6_3A : STD_LOGIC_VECTOR (5 downto 0) := "111010";
    constant ap_const_lv6_1 : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    constant ap_const_lv6_0 : STD_LOGIC_VECTOR (5 downto 0) := "000000";

    signal ap_CS_fsm : STD_LOGIC_VECTOR (2 downto 0) := "001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_sig_cseq_ST_st1_fsm_0 : STD_LOGIC;
    signal ap_sig_bdd_21 : BOOLEAN;
    signal tmp_fu_199_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_reg_455 : STD_LOGIC_VECTOR (0 downto 0);
    signal uart_to_coordinates_current_ou_reg_459 : STD_LOGIC_VECTOR (7 downto 0);
    signal uart_to_coordinates_ck_a_V_1_i_fu_328_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal uart_to_coordinates_ck_a_V_1_i_reg_466 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_sig_cseq_ST_st2_fsm_1 : STD_LOGIC;
    signal ap_sig_bdd_89 : BOOLEAN;
    signal uart_to_coordinates_ck_b_V_1_i_fu_337_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal uart_to_coordinates_ck_b_V_1_i_reg_472 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_master_ip_get_gps_info_from_ubx_fu_166_ap_start : STD_LOGIC;
    signal grp_master_ip_get_gps_info_from_ubx_fu_166_ap_done : STD_LOGIC;
    signal grp_master_ip_get_gps_info_from_ubx_fu_166_ap_idle : STD_LOGIC;
    signal grp_master_ip_get_gps_info_from_ubx_fu_166_ap_ready : STD_LOGIC;
    signal grp_master_ip_get_gps_info_from_ubx_fu_166_uart_to_coordinates_current_out_byte_V_read : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_master_ip_get_gps_info_from_ubx_fu_166_uart_to_coordinates_gnss_state_V_read : STD_LOGIC_VECTOR (5 downto 0);
    signal grp_master_ip_get_gps_info_from_ubx_fu_166_uart_to_coordinates_ck_a_V_read : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_master_ip_get_gps_info_from_ubx_fu_166_uart_to_coordinates_ck_b_V_read : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_master_ip_get_gps_info_from_ubx_fu_166_uart_to_coordinates_tempCoordinates_0_i : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_master_ip_get_gps_info_from_ubx_fu_166_uart_to_coordinates_tempCoordinates_0_o : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_master_ip_get_gps_info_from_ubx_fu_166_uart_to_coordinates_tempCoordinates_0_o_ap_vld : STD_LOGIC;
    signal grp_master_ip_get_gps_info_from_ubx_fu_166_uart_to_coordinates_tempCoordinates_1_i : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_master_ip_get_gps_info_from_ubx_fu_166_uart_to_coordinates_tempCoordinates_1_o : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_master_ip_get_gps_info_from_ubx_fu_166_uart_to_coordinates_tempCoordinates_1_o_ap_vld : STD_LOGIC;
    signal grp_master_ip_get_gps_info_from_ubx_fu_166_uart_to_coordinates_tempCoordinates_2_i : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_master_ip_get_gps_info_from_ubx_fu_166_uart_to_coordinates_tempCoordinates_2_o : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_master_ip_get_gps_info_from_ubx_fu_166_uart_to_coordinates_tempCoordinates_2_o_ap_vld : STD_LOGIC;
    signal grp_master_ip_get_gps_info_from_ubx_fu_166_p_read1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_master_ip_get_gps_info_from_ubx_fu_166_p_read4 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_master_ip_get_gps_info_from_ubx_fu_166_p_read5 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_master_ip_get_gps_info_from_ubx_fu_166_ap_return_0 : STD_LOGIC_VECTOR (5 downto 0);
    signal grp_master_ip_get_gps_info_from_ubx_fu_166_ap_return_1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_master_ip_get_gps_info_from_ubx_fu_166_ap_return_2 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_master_ip_get_gps_info_from_ubx_fu_166_ap_return_3 : STD_LOGIC_VECTOR (31 downto 0);
    signal call_ret6_master_ip_uart_to_byte_fu_183_uart_to_coordinates_count_V_i : STD_LOGIC_VECTOR (15 downto 0);
    signal call_ret6_master_ip_uart_to_byte_fu_183_uart_to_coordinates_count_V_o : STD_LOGIC_VECTOR (15 downto 0);
    signal call_ret6_master_ip_uart_to_byte_fu_183_uart_to_coordinates_count_V_o_ap_vld : STD_LOGIC;
    signal call_ret6_master_ip_uart_to_byte_fu_183_uart_to_coordinates_previous_input_V_i : STD_LOGIC_VECTOR (0 downto 0);
    signal call_ret6_master_ip_uart_to_byte_fu_183_uart_to_coordinates_previous_input_V_o : STD_LOGIC_VECTOR (0 downto 0);
    signal call_ret6_master_ip_uart_to_byte_fu_183_uart_to_coordinates_previous_input_V_o_ap_vld : STD_LOGIC;
    signal call_ret6_master_ip_uart_to_byte_fu_183_uart_to_coordinates_current_input_V_read : STD_LOGIC_VECTOR (0 downto 0);
    signal call_ret6_master_ip_uart_to_byte_fu_183_uart_to_coordinates_uart_state_V_i : STD_LOGIC_VECTOR (3 downto 0);
    signal call_ret6_master_ip_uart_to_byte_fu_183_uart_to_coordinates_uart_state_V_o : STD_LOGIC_VECTOR (3 downto 0);
    signal call_ret6_master_ip_uart_to_byte_fu_183_uart_to_coordinates_uart_state_V_o_ap_vld : STD_LOGIC;
    signal call_ret6_master_ip_uart_to_byte_fu_183_uart_to_coordinates_next_out_byte_V_i : STD_LOGIC_VECTOR (7 downto 0);
    signal call_ret6_master_ip_uart_to_byte_fu_183_uart_to_coordinates_next_out_byte_V_o : STD_LOGIC_VECTOR (7 downto 0);
    signal call_ret6_master_ip_uart_to_byte_fu_183_uart_to_coordinates_next_out_byte_V_o_ap_vld : STD_LOGIC;
    signal call_ret6_master_ip_uart_to_byte_fu_183_uart_to_coordinates_current_out_byte_V_read : STD_LOGIC_VECTOR (7 downto 0);
    signal call_ret6_master_ip_uart_to_byte_fu_183_ap_return_0 : STD_LOGIC_VECTOR (0 downto 0);
    signal call_ret6_master_ip_uart_to_byte_fu_183_ap_return_1 : STD_LOGIC_VECTOR (7 downto 0);
    signal coordinates_phi_fu_115_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal coordinates_reg_112 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_sig_cseq_ST_st3_fsm_2 : STD_LOGIC;
    signal ap_sig_bdd_148 : BOOLEAN;
    signal coordinates_1_phi_fu_124_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal coordinates_1_reg_121 : STD_LOGIC_VECTOR (31 downto 0);
    signal coordinates_2_phi_fu_133_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal coordinates_2_reg_130 : STD_LOGIC_VECTOR (31 downto 0);
    signal uart_to_coordinates_ck_a_V_phi_fu_142_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal uart_to_coordinates_ck_a_V_reg_139 : STD_LOGIC_VECTOR (7 downto 0);
    signal uart_to_coordinates_ck_b_V_phi_fu_151_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal uart_to_coordinates_ck_b_V_reg_148 : STD_LOGIC_VECTOR (7 downto 0);
    signal uart_to_coordinates_gnss_state_phi_fu_160_p4 : STD_LOGIC_VECTOR (5 downto 0);
    signal uart_to_coordinates_gnss_state_reg_157 : STD_LOGIC_VECTOR (5 downto 0);
    signal grp_master_ip_get_gps_info_from_ubx_fu_166_ap_start_ap_start_reg : STD_LOGIC := '0';
    signal tmp_i_fu_207_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_86_i_fu_216_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_87_i_fu_221_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_cond4_i_fu_226_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp5_fu_271_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp6_fu_276_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp4_fu_266_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp3_fu_261_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp7_fu_292_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp6_fu_286_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp_fu_246_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp2_fu_256_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp1_fu_251_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp7_fu_281_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp10_fu_310_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp9_fu_304_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp11_fu_316_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp8_fu_298_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp8_fu_322_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal uart_to_coordinates_ck_a_V_rea_fu_232_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal uart_to_coordinates_ck_b_V_rea_fu_239_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_85_i_fu_211_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_return_0_preg : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    signal ap_return_1_preg : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    signal ap_return_2_preg : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    signal ap_return_3_preg : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    signal ap_return_4_preg : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal ap_return_5_preg : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal ap_return_6_preg : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal ap_NS_fsm : STD_LOGIC_VECTOR (2 downto 0);

    component master_ip_get_gps_info_from_ubx IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        uart_to_coordinates_current_out_byte_V_read : IN STD_LOGIC_VECTOR (7 downto 0);
        uart_to_coordinates_gnss_state_V_read : IN STD_LOGIC_VECTOR (5 downto 0);
        uart_to_coordinates_ck_a_V_read : IN STD_LOGIC_VECTOR (7 downto 0);
        uart_to_coordinates_ck_b_V_read : IN STD_LOGIC_VECTOR (7 downto 0);
        uart_to_coordinates_tempCoordinates_0_i : IN STD_LOGIC_VECTOR (31 downto 0);
        uart_to_coordinates_tempCoordinates_0_o : OUT STD_LOGIC_VECTOR (31 downto 0);
        uart_to_coordinates_tempCoordinates_0_o_ap_vld : OUT STD_LOGIC;
        uart_to_coordinates_tempCoordinates_1_i : IN STD_LOGIC_VECTOR (31 downto 0);
        uart_to_coordinates_tempCoordinates_1_o : OUT STD_LOGIC_VECTOR (31 downto 0);
        uart_to_coordinates_tempCoordinates_1_o_ap_vld : OUT STD_LOGIC;
        uart_to_coordinates_tempCoordinates_2_i : IN STD_LOGIC_VECTOR (31 downto 0);
        uart_to_coordinates_tempCoordinates_2_o : OUT STD_LOGIC_VECTOR (31 downto 0);
        uart_to_coordinates_tempCoordinates_2_o_ap_vld : OUT STD_LOGIC;
        p_read1 : IN STD_LOGIC_VECTOR (31 downto 0);
        p_read4 : IN STD_LOGIC_VECTOR (31 downto 0);
        p_read5 : IN STD_LOGIC_VECTOR (31 downto 0);
        ap_return_0 : OUT STD_LOGIC_VECTOR (5 downto 0);
        ap_return_1 : OUT STD_LOGIC_VECTOR (31 downto 0);
        ap_return_2 : OUT STD_LOGIC_VECTOR (31 downto 0);
        ap_return_3 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component master_ip_uart_to_byte IS
    port (
        uart_to_coordinates_count_V_i : IN STD_LOGIC_VECTOR (15 downto 0);
        uart_to_coordinates_count_V_o : OUT STD_LOGIC_VECTOR (15 downto 0);
        uart_to_coordinates_count_V_o_ap_vld : OUT STD_LOGIC;
        uart_to_coordinates_previous_input_V_i : IN STD_LOGIC_VECTOR (0 downto 0);
        uart_to_coordinates_previous_input_V_o : OUT STD_LOGIC_VECTOR (0 downto 0);
        uart_to_coordinates_previous_input_V_o_ap_vld : OUT STD_LOGIC;
        uart_to_coordinates_current_input_V_read : IN STD_LOGIC_VECTOR (0 downto 0);
        uart_to_coordinates_uart_state_V_i : IN STD_LOGIC_VECTOR (3 downto 0);
        uart_to_coordinates_uart_state_V_o : OUT STD_LOGIC_VECTOR (3 downto 0);
        uart_to_coordinates_uart_state_V_o_ap_vld : OUT STD_LOGIC;
        uart_to_coordinates_next_out_byte_V_i : IN STD_LOGIC_VECTOR (7 downto 0);
        uart_to_coordinates_next_out_byte_V_o : OUT STD_LOGIC_VECTOR (7 downto 0);
        uart_to_coordinates_next_out_byte_V_o_ap_vld : OUT STD_LOGIC;
        uart_to_coordinates_current_out_byte_V_read : IN STD_LOGIC_VECTOR (7 downto 0);
        ap_return_0 : OUT STD_LOGIC_VECTOR (0 downto 0);
        ap_return_1 : OUT STD_LOGIC_VECTOR (7 downto 0) );
    end component;



begin
    grp_master_ip_get_gps_info_from_ubx_fu_166 : component master_ip_get_gps_info_from_ubx
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_master_ip_get_gps_info_from_ubx_fu_166_ap_start,
        ap_done => grp_master_ip_get_gps_info_from_ubx_fu_166_ap_done,
        ap_idle => grp_master_ip_get_gps_info_from_ubx_fu_166_ap_idle,
        ap_ready => grp_master_ip_get_gps_info_from_ubx_fu_166_ap_ready,
        uart_to_coordinates_current_out_byte_V_read => grp_master_ip_get_gps_info_from_ubx_fu_166_uart_to_coordinates_current_out_byte_V_read,
        uart_to_coordinates_gnss_state_V_read => grp_master_ip_get_gps_info_from_ubx_fu_166_uart_to_coordinates_gnss_state_V_read,
        uart_to_coordinates_ck_a_V_read => grp_master_ip_get_gps_info_from_ubx_fu_166_uart_to_coordinates_ck_a_V_read,
        uart_to_coordinates_ck_b_V_read => grp_master_ip_get_gps_info_from_ubx_fu_166_uart_to_coordinates_ck_b_V_read,
        uart_to_coordinates_tempCoordinates_0_i => grp_master_ip_get_gps_info_from_ubx_fu_166_uart_to_coordinates_tempCoordinates_0_i,
        uart_to_coordinates_tempCoordinates_0_o => grp_master_ip_get_gps_info_from_ubx_fu_166_uart_to_coordinates_tempCoordinates_0_o,
        uart_to_coordinates_tempCoordinates_0_o_ap_vld => grp_master_ip_get_gps_info_from_ubx_fu_166_uart_to_coordinates_tempCoordinates_0_o_ap_vld,
        uart_to_coordinates_tempCoordinates_1_i => grp_master_ip_get_gps_info_from_ubx_fu_166_uart_to_coordinates_tempCoordinates_1_i,
        uart_to_coordinates_tempCoordinates_1_o => grp_master_ip_get_gps_info_from_ubx_fu_166_uart_to_coordinates_tempCoordinates_1_o,
        uart_to_coordinates_tempCoordinates_1_o_ap_vld => grp_master_ip_get_gps_info_from_ubx_fu_166_uart_to_coordinates_tempCoordinates_1_o_ap_vld,
        uart_to_coordinates_tempCoordinates_2_i => grp_master_ip_get_gps_info_from_ubx_fu_166_uart_to_coordinates_tempCoordinates_2_i,
        uart_to_coordinates_tempCoordinates_2_o => grp_master_ip_get_gps_info_from_ubx_fu_166_uart_to_coordinates_tempCoordinates_2_o,
        uart_to_coordinates_tempCoordinates_2_o_ap_vld => grp_master_ip_get_gps_info_from_ubx_fu_166_uart_to_coordinates_tempCoordinates_2_o_ap_vld,
        p_read1 => grp_master_ip_get_gps_info_from_ubx_fu_166_p_read1,
        p_read4 => grp_master_ip_get_gps_info_from_ubx_fu_166_p_read4,
        p_read5 => grp_master_ip_get_gps_info_from_ubx_fu_166_p_read5,
        ap_return_0 => grp_master_ip_get_gps_info_from_ubx_fu_166_ap_return_0,
        ap_return_1 => grp_master_ip_get_gps_info_from_ubx_fu_166_ap_return_1,
        ap_return_2 => grp_master_ip_get_gps_info_from_ubx_fu_166_ap_return_2,
        ap_return_3 => grp_master_ip_get_gps_info_from_ubx_fu_166_ap_return_3);

    call_ret6_master_ip_uart_to_byte_fu_183 : component master_ip_uart_to_byte
    port map (
        uart_to_coordinates_count_V_i => call_ret6_master_ip_uart_to_byte_fu_183_uart_to_coordinates_count_V_i,
        uart_to_coordinates_count_V_o => call_ret6_master_ip_uart_to_byte_fu_183_uart_to_coordinates_count_V_o,
        uart_to_coordinates_count_V_o_ap_vld => call_ret6_master_ip_uart_to_byte_fu_183_uart_to_coordinates_count_V_o_ap_vld,
        uart_to_coordinates_previous_input_V_i => call_ret6_master_ip_uart_to_byte_fu_183_uart_to_coordinates_previous_input_V_i,
        uart_to_coordinates_previous_input_V_o => call_ret6_master_ip_uart_to_byte_fu_183_uart_to_coordinates_previous_input_V_o,
        uart_to_coordinates_previous_input_V_o_ap_vld => call_ret6_master_ip_uart_to_byte_fu_183_uart_to_coordinates_previous_input_V_o_ap_vld,
        uart_to_coordinates_current_input_V_read => call_ret6_master_ip_uart_to_byte_fu_183_uart_to_coordinates_current_input_V_read,
        uart_to_coordinates_uart_state_V_i => call_ret6_master_ip_uart_to_byte_fu_183_uart_to_coordinates_uart_state_V_i,
        uart_to_coordinates_uart_state_V_o => call_ret6_master_ip_uart_to_byte_fu_183_uart_to_coordinates_uart_state_V_o,
        uart_to_coordinates_uart_state_V_o_ap_vld => call_ret6_master_ip_uart_to_byte_fu_183_uart_to_coordinates_uart_state_V_o_ap_vld,
        uart_to_coordinates_next_out_byte_V_i => call_ret6_master_ip_uart_to_byte_fu_183_uart_to_coordinates_next_out_byte_V_i,
        uart_to_coordinates_next_out_byte_V_o => call_ret6_master_ip_uart_to_byte_fu_183_uart_to_coordinates_next_out_byte_V_o,
        uart_to_coordinates_next_out_byte_V_o_ap_vld => call_ret6_master_ip_uart_to_byte_fu_183_uart_to_coordinates_next_out_byte_V_o_ap_vld,
        uart_to_coordinates_current_out_byte_V_read => call_ret6_master_ip_uart_to_byte_fu_183_uart_to_coordinates_current_out_byte_V_read,
        ap_return_0 => call_ret6_master_ip_uart_to_byte_fu_183_ap_return_0,
        ap_return_1 => call_ret6_master_ip_uart_to_byte_fu_183_ap_return_1);





    -- the current state (ap_CS_fsm) of the state machine. --
    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_st1_fsm_0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    -- ap_return_0_preg assign process. --
    ap_return_0_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_return_0_preg <= ap_const_lv8_0;
            else
                if (((ap_const_logic_1 = ap_sig_cseq_ST_st3_fsm_2) and not((not((tmp_reg_455 = ap_const_lv1_0)) and (ap_const_logic_0 = grp_master_ip_get_gps_info_from_ubx_fu_166_ap_done))))) then 
                    ap_return_0_preg <= uart_to_coordinates_ck_a_V_phi_fu_142_p4;
                end if; 
            end if;
        end if;
    end process;


    -- ap_return_1_preg assign process. --
    ap_return_1_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_return_1_preg <= ap_const_lv8_0;
            else
                if (((ap_const_logic_1 = ap_sig_cseq_ST_st3_fsm_2) and not((not((tmp_reg_455 = ap_const_lv1_0)) and (ap_const_logic_0 = grp_master_ip_get_gps_info_from_ubx_fu_166_ap_done))))) then 
                    ap_return_1_preg <= uart_to_coordinates_ck_b_V_phi_fu_151_p4;
                end if; 
            end if;
        end if;
    end process;


    -- ap_return_2_preg assign process. --
    ap_return_2_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_return_2_preg <= ap_const_lv8_0;
            else
                if (((ap_const_logic_1 = ap_sig_cseq_ST_st3_fsm_2) and not((not((tmp_reg_455 = ap_const_lv1_0)) and (ap_const_logic_0 = grp_master_ip_get_gps_info_from_ubx_fu_166_ap_done))))) then 
                    ap_return_2_preg <= uart_to_coordinates_current_ou_reg_459;
                end if; 
            end if;
        end if;
    end process;


    -- ap_return_3_preg assign process. --
    ap_return_3_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_return_3_preg <= ap_const_lv6_0;
            else
                if (((ap_const_logic_1 = ap_sig_cseq_ST_st3_fsm_2) and not((not((tmp_reg_455 = ap_const_lv1_0)) and (ap_const_logic_0 = grp_master_ip_get_gps_info_from_ubx_fu_166_ap_done))))) then 
                    ap_return_3_preg <= uart_to_coordinates_gnss_state_phi_fu_160_p4;
                end if; 
            end if;
        end if;
    end process;


    -- ap_return_4_preg assign process. --
    ap_return_4_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_return_4_preg <= ap_const_lv32_0;
            else
                if (((ap_const_logic_1 = ap_sig_cseq_ST_st3_fsm_2) and not((not((tmp_reg_455 = ap_const_lv1_0)) and (ap_const_logic_0 = grp_master_ip_get_gps_info_from_ubx_fu_166_ap_done))))) then 
                    ap_return_4_preg <= coordinates_phi_fu_115_p4;
                end if; 
            end if;
        end if;
    end process;


    -- ap_return_5_preg assign process. --
    ap_return_5_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_return_5_preg <= ap_const_lv32_0;
            else
                if (((ap_const_logic_1 = ap_sig_cseq_ST_st3_fsm_2) and not((not((tmp_reg_455 = ap_const_lv1_0)) and (ap_const_logic_0 = grp_master_ip_get_gps_info_from_ubx_fu_166_ap_done))))) then 
                    ap_return_5_preg <= coordinates_1_phi_fu_124_p4;
                end if; 
            end if;
        end if;
    end process;


    -- ap_return_6_preg assign process. --
    ap_return_6_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_return_6_preg <= ap_const_lv32_0;
            else
                if (((ap_const_logic_1 = ap_sig_cseq_ST_st3_fsm_2) and not((not((tmp_reg_455 = ap_const_lv1_0)) and (ap_const_logic_0 = grp_master_ip_get_gps_info_from_ubx_fu_166_ap_done))))) then 
                    ap_return_6_preg <= coordinates_2_phi_fu_133_p4;
                end if; 
            end if;
        end if;
    end process;


    -- grp_master_ip_get_gps_info_from_ubx_fu_166_ap_start_ap_start_reg assign process. --
    grp_master_ip_get_gps_info_from_ubx_fu_166_ap_start_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_master_ip_get_gps_info_from_ubx_fu_166_ap_start_ap_start_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1)) then 
                    grp_master_ip_get_gps_info_from_ubx_fu_166_ap_start_ap_start_reg <= ap_const_logic_1;
                elsif ((ap_const_logic_1 = grp_master_ip_get_gps_info_from_ubx_fu_166_ap_ready)) then 
                    grp_master_ip_get_gps_info_from_ubx_fu_166_ap_start_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    -- coordinates_1_reg_121 assign process. --
    coordinates_1_reg_121_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st3_fsm_2) and not((tmp_reg_455 = ap_const_lv1_0)) and not((not((tmp_reg_455 = ap_const_lv1_0)) and (ap_const_logic_0 = grp_master_ip_get_gps_info_from_ubx_fu_166_ap_done))))) then 
                coordinates_1_reg_121 <= grp_master_ip_get_gps_info_from_ubx_fu_166_ap_return_2;
            elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0) and not((ap_start = ap_const_logic_0)) and (tmp_fu_199_p1 = ap_const_lv1_0))) then 
                coordinates_1_reg_121 <= p_read2;
            end if; 
        end if;
    end process;

    -- coordinates_2_reg_130 assign process. --
    coordinates_2_reg_130_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st3_fsm_2) and not((tmp_reg_455 = ap_const_lv1_0)) and not((not((tmp_reg_455 = ap_const_lv1_0)) and (ap_const_logic_0 = grp_master_ip_get_gps_info_from_ubx_fu_166_ap_done))))) then 
                coordinates_2_reg_130 <= grp_master_ip_get_gps_info_from_ubx_fu_166_ap_return_3;
            elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0) and not((ap_start = ap_const_logic_0)) and (tmp_fu_199_p1 = ap_const_lv1_0))) then 
                coordinates_2_reg_130 <= p_read5;
            end if; 
        end if;
    end process;

    -- coordinates_reg_112 assign process. --
    coordinates_reg_112_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st3_fsm_2) and not((tmp_reg_455 = ap_const_lv1_0)) and not((not((tmp_reg_455 = ap_const_lv1_0)) and (ap_const_logic_0 = grp_master_ip_get_gps_info_from_ubx_fu_166_ap_done))))) then 
                coordinates_reg_112 <= grp_master_ip_get_gps_info_from_ubx_fu_166_ap_return_1;
            elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0) and not((ap_start = ap_const_logic_0)) and (tmp_fu_199_p1 = ap_const_lv1_0))) then 
                coordinates_reg_112 <= p_read;
            end if; 
        end if;
    end process;

    -- uart_to_coordinates_ck_a_V_reg_139 assign process. --
    uart_to_coordinates_ck_a_V_reg_139_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st3_fsm_2) and not((tmp_reg_455 = ap_const_lv1_0)) and not((not((tmp_reg_455 = ap_const_lv1_0)) and (ap_const_logic_0 = grp_master_ip_get_gps_info_from_ubx_fu_166_ap_done))))) then 
                uart_to_coordinates_ck_a_V_reg_139 <= uart_to_coordinates_ck_a_V_1_i_reg_466;
            elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0) and not((ap_start = ap_const_logic_0)) and (tmp_fu_199_p1 = ap_const_lv1_0))) then 
                uart_to_coordinates_ck_a_V_reg_139 <= uart_to_coordinates_ck_a_V_read;
            end if; 
        end if;
    end process;

    -- uart_to_coordinates_ck_b_V_reg_148 assign process. --
    uart_to_coordinates_ck_b_V_reg_148_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st3_fsm_2) and not((tmp_reg_455 = ap_const_lv1_0)) and not((not((tmp_reg_455 = ap_const_lv1_0)) and (ap_const_logic_0 = grp_master_ip_get_gps_info_from_ubx_fu_166_ap_done))))) then 
                uart_to_coordinates_ck_b_V_reg_148 <= uart_to_coordinates_ck_b_V_1_i_reg_472;
            elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0) and not((ap_start = ap_const_logic_0)) and (tmp_fu_199_p1 = ap_const_lv1_0))) then 
                uart_to_coordinates_ck_b_V_reg_148 <= uart_to_coordinates_ck_b_V_read;
            end if; 
        end if;
    end process;

    -- uart_to_coordinates_gnss_state_reg_157 assign process. --
    uart_to_coordinates_gnss_state_reg_157_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st3_fsm_2) and not((tmp_reg_455 = ap_const_lv1_0)) and not((not((tmp_reg_455 = ap_const_lv1_0)) and (ap_const_logic_0 = grp_master_ip_get_gps_info_from_ubx_fu_166_ap_done))))) then 
                uart_to_coordinates_gnss_state_reg_157 <= grp_master_ip_get_gps_info_from_ubx_fu_166_ap_return_0;
            elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0) and not((ap_start = ap_const_logic_0)) and (tmp_fu_199_p1 = ap_const_lv1_0))) then 
                uart_to_coordinates_gnss_state_reg_157 <= uart_to_coordinates_gnss_state_V_read;
            end if; 
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0) and not((ap_start = ap_const_logic_0)))) then
                tmp_reg_455 <= call_ret6_master_ip_uart_to_byte_fu_183_ap_return_0;
                uart_to_coordinates_current_ou_reg_459 <= call_ret6_master_ip_uart_to_byte_fu_183_ap_return_1;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1)) then
                uart_to_coordinates_ck_a_V_1_i_reg_466 <= uart_to_coordinates_ck_a_V_1_i_fu_328_p3;
                uart_to_coordinates_ck_b_V_1_i_reg_472 <= uart_to_coordinates_ck_b_V_1_i_fu_337_p3;
            end if;
        end if;
    end process;

    -- the next state (ap_NS_fsm) of the state machine. --
    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, tmp_fu_199_p1, tmp_reg_455, grp_master_ip_get_gps_info_from_ubx_fu_166_ap_done)
    begin
        case ap_CS_fsm is
            when ap_ST_st1_fsm_0 => 
                if ((not((ap_start = ap_const_logic_0)) and (tmp_fu_199_p1 = ap_const_lv1_0))) then
                    ap_NS_fsm <= ap_ST_st3_fsm_2;
                elsif ((not((ap_start = ap_const_logic_0)) and not((tmp_fu_199_p1 = ap_const_lv1_0)))) then
                    ap_NS_fsm <= ap_ST_st2_fsm_1;
                else
                    ap_NS_fsm <= ap_ST_st1_fsm_0;
                end if;
            when ap_ST_st2_fsm_1 => 
                ap_NS_fsm <= ap_ST_st3_fsm_2;
            when ap_ST_st3_fsm_2 => 
                if (not((not((tmp_reg_455 = ap_const_lv1_0)) and (ap_const_logic_0 = grp_master_ip_get_gps_info_from_ubx_fu_166_ap_done)))) then
                    ap_NS_fsm <= ap_ST_st1_fsm_0;
                else
                    ap_NS_fsm <= ap_ST_st3_fsm_2;
                end if;
            when others =>  
                ap_NS_fsm <= "XXX";
        end case;
    end process;

    -- ap_done assign process. --
    ap_done_assign_proc : process(ap_start, ap_sig_cseq_ST_st1_fsm_0, tmp_reg_455, grp_master_ip_get_gps_info_from_ubx_fu_166_ap_done, ap_sig_cseq_ST_st3_fsm_2)
    begin
        if (((not((ap_const_logic_1 = ap_start)) and (ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0)) or ((ap_const_logic_1 = ap_sig_cseq_ST_st3_fsm_2) and not((not((tmp_reg_455 = ap_const_lv1_0)) and (ap_const_logic_0 = grp_master_ip_get_gps_info_from_ubx_fu_166_ap_done)))))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_idle assign process. --
    ap_idle_assign_proc : process(ap_start, ap_sig_cseq_ST_st1_fsm_0)
    begin
        if ((not((ap_const_logic_1 = ap_start)) and (ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_ready assign process. --
    ap_ready_assign_proc : process(tmp_reg_455, grp_master_ip_get_gps_info_from_ubx_fu_166_ap_done, ap_sig_cseq_ST_st3_fsm_2)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st3_fsm_2) and not((not((tmp_reg_455 = ap_const_lv1_0)) and (ap_const_logic_0 = grp_master_ip_get_gps_info_from_ubx_fu_166_ap_done))))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_return_0 assign process. --
    ap_return_0_assign_proc : process(tmp_reg_455, grp_master_ip_get_gps_info_from_ubx_fu_166_ap_done, ap_sig_cseq_ST_st3_fsm_2, uart_to_coordinates_ck_a_V_phi_fu_142_p4, ap_return_0_preg)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st3_fsm_2) and not((not((tmp_reg_455 = ap_const_lv1_0)) and (ap_const_logic_0 = grp_master_ip_get_gps_info_from_ubx_fu_166_ap_done))))) then 
            ap_return_0 <= uart_to_coordinates_ck_a_V_phi_fu_142_p4;
        else 
            ap_return_0 <= ap_return_0_preg;
        end if; 
    end process;


    -- ap_return_1 assign process. --
    ap_return_1_assign_proc : process(tmp_reg_455, grp_master_ip_get_gps_info_from_ubx_fu_166_ap_done, ap_sig_cseq_ST_st3_fsm_2, uart_to_coordinates_ck_b_V_phi_fu_151_p4, ap_return_1_preg)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st3_fsm_2) and not((not((tmp_reg_455 = ap_const_lv1_0)) and (ap_const_logic_0 = grp_master_ip_get_gps_info_from_ubx_fu_166_ap_done))))) then 
            ap_return_1 <= uart_to_coordinates_ck_b_V_phi_fu_151_p4;
        else 
            ap_return_1 <= ap_return_1_preg;
        end if; 
    end process;


    -- ap_return_2 assign process. --
    ap_return_2_assign_proc : process(tmp_reg_455, uart_to_coordinates_current_ou_reg_459, grp_master_ip_get_gps_info_from_ubx_fu_166_ap_done, ap_sig_cseq_ST_st3_fsm_2, ap_return_2_preg)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st3_fsm_2) and not((not((tmp_reg_455 = ap_const_lv1_0)) and (ap_const_logic_0 = grp_master_ip_get_gps_info_from_ubx_fu_166_ap_done))))) then 
            ap_return_2 <= uart_to_coordinates_current_ou_reg_459;
        else 
            ap_return_2 <= ap_return_2_preg;
        end if; 
    end process;


    -- ap_return_3 assign process. --
    ap_return_3_assign_proc : process(tmp_reg_455, grp_master_ip_get_gps_info_from_ubx_fu_166_ap_done, ap_sig_cseq_ST_st3_fsm_2, uart_to_coordinates_gnss_state_phi_fu_160_p4, ap_return_3_preg)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st3_fsm_2) and not((not((tmp_reg_455 = ap_const_lv1_0)) and (ap_const_logic_0 = grp_master_ip_get_gps_info_from_ubx_fu_166_ap_done))))) then 
            ap_return_3 <= uart_to_coordinates_gnss_state_phi_fu_160_p4;
        else 
            ap_return_3 <= ap_return_3_preg;
        end if; 
    end process;


    -- ap_return_4 assign process. --
    ap_return_4_assign_proc : process(tmp_reg_455, grp_master_ip_get_gps_info_from_ubx_fu_166_ap_done, coordinates_phi_fu_115_p4, ap_sig_cseq_ST_st3_fsm_2, ap_return_4_preg)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st3_fsm_2) and not((not((tmp_reg_455 = ap_const_lv1_0)) and (ap_const_logic_0 = grp_master_ip_get_gps_info_from_ubx_fu_166_ap_done))))) then 
            ap_return_4 <= coordinates_phi_fu_115_p4;
        else 
            ap_return_4 <= ap_return_4_preg;
        end if; 
    end process;


    -- ap_return_5 assign process. --
    ap_return_5_assign_proc : process(tmp_reg_455, grp_master_ip_get_gps_info_from_ubx_fu_166_ap_done, ap_sig_cseq_ST_st3_fsm_2, coordinates_1_phi_fu_124_p4, ap_return_5_preg)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st3_fsm_2) and not((not((tmp_reg_455 = ap_const_lv1_0)) and (ap_const_logic_0 = grp_master_ip_get_gps_info_from_ubx_fu_166_ap_done))))) then 
            ap_return_5 <= coordinates_1_phi_fu_124_p4;
        else 
            ap_return_5 <= ap_return_5_preg;
        end if; 
    end process;


    -- ap_return_6 assign process. --
    ap_return_6_assign_proc : process(tmp_reg_455, grp_master_ip_get_gps_info_from_ubx_fu_166_ap_done, ap_sig_cseq_ST_st3_fsm_2, coordinates_2_phi_fu_133_p4, ap_return_6_preg)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st3_fsm_2) and not((not((tmp_reg_455 = ap_const_lv1_0)) and (ap_const_logic_0 = grp_master_ip_get_gps_info_from_ubx_fu_166_ap_done))))) then 
            ap_return_6 <= coordinates_2_phi_fu_133_p4;
        else 
            ap_return_6 <= ap_return_6_preg;
        end if; 
    end process;


    -- ap_sig_bdd_148 assign process. --
    ap_sig_bdd_148_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_148 <= (ap_const_lv1_1 = ap_CS_fsm(2 downto 2));
    end process;


    -- ap_sig_bdd_21 assign process. --
    ap_sig_bdd_21_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_21 <= (ap_CS_fsm(0 downto 0) = ap_const_lv1_1);
    end process;


    -- ap_sig_bdd_89 assign process. --
    ap_sig_bdd_89_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_89 <= (ap_const_lv1_1 = ap_CS_fsm(1 downto 1));
    end process;


    -- ap_sig_cseq_ST_st1_fsm_0 assign process. --
    ap_sig_cseq_ST_st1_fsm_0_assign_proc : process(ap_sig_bdd_21)
    begin
        if (ap_sig_bdd_21) then 
            ap_sig_cseq_ST_st1_fsm_0 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st1_fsm_0 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st2_fsm_1 assign process. --
    ap_sig_cseq_ST_st2_fsm_1_assign_proc : process(ap_sig_bdd_89)
    begin
        if (ap_sig_bdd_89) then 
            ap_sig_cseq_ST_st2_fsm_1 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st2_fsm_1 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st3_fsm_2 assign process. --
    ap_sig_cseq_ST_st3_fsm_2_assign_proc : process(ap_sig_bdd_148)
    begin
        if (ap_sig_bdd_148) then 
            ap_sig_cseq_ST_st3_fsm_2 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st3_fsm_2 <= ap_const_logic_0;
        end if; 
    end process;

    call_ret6_master_ip_uart_to_byte_fu_183_uart_to_coordinates_count_V_i <= uart_to_coordinates_count_V_i;
    call_ret6_master_ip_uart_to_byte_fu_183_uart_to_coordinates_current_input_V_read <= input_V_read;
    call_ret6_master_ip_uart_to_byte_fu_183_uart_to_coordinates_current_out_byte_V_read <= uart_to_coordinates_current_out_byte_V_read;
    call_ret6_master_ip_uart_to_byte_fu_183_uart_to_coordinates_next_out_byte_V_i <= uart_to_coordinates_next_out_byte_V_i;
    call_ret6_master_ip_uart_to_byte_fu_183_uart_to_coordinates_previous_input_V_i <= uart_to_coordinates_previous_input_V_i;
    call_ret6_master_ip_uart_to_byte_fu_183_uart_to_coordinates_uart_state_V_i <= uart_to_coordinates_uart_state_V_i;

    -- coordinates_1_phi_fu_124_p4 assign process. --
    coordinates_1_phi_fu_124_p4_assign_proc : process(tmp_reg_455, grp_master_ip_get_gps_info_from_ubx_fu_166_ap_return_2, ap_sig_cseq_ST_st3_fsm_2, coordinates_1_reg_121)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st3_fsm_2) and not((tmp_reg_455 = ap_const_lv1_0)))) then 
            coordinates_1_phi_fu_124_p4 <= grp_master_ip_get_gps_info_from_ubx_fu_166_ap_return_2;
        else 
            coordinates_1_phi_fu_124_p4 <= coordinates_1_reg_121;
        end if; 
    end process;


    -- coordinates_2_phi_fu_133_p4 assign process. --
    coordinates_2_phi_fu_133_p4_assign_proc : process(tmp_reg_455, grp_master_ip_get_gps_info_from_ubx_fu_166_ap_return_3, ap_sig_cseq_ST_st3_fsm_2, coordinates_2_reg_130)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st3_fsm_2) and not((tmp_reg_455 = ap_const_lv1_0)))) then 
            coordinates_2_phi_fu_133_p4 <= grp_master_ip_get_gps_info_from_ubx_fu_166_ap_return_3;
        else 
            coordinates_2_phi_fu_133_p4 <= coordinates_2_reg_130;
        end if; 
    end process;


    -- coordinates_phi_fu_115_p4 assign process. --
    coordinates_phi_fu_115_p4_assign_proc : process(tmp_reg_455, grp_master_ip_get_gps_info_from_ubx_fu_166_ap_return_1, coordinates_reg_112, ap_sig_cseq_ST_st3_fsm_2)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st3_fsm_2) and not((tmp_reg_455 = ap_const_lv1_0)))) then 
            coordinates_phi_fu_115_p4 <= grp_master_ip_get_gps_info_from_ubx_fu_166_ap_return_1;
        else 
            coordinates_phi_fu_115_p4 <= coordinates_reg_112;
        end if; 
    end process;

    grp_master_ip_get_gps_info_from_ubx_fu_166_ap_start <= grp_master_ip_get_gps_info_from_ubx_fu_166_ap_start_ap_start_reg;
    grp_master_ip_get_gps_info_from_ubx_fu_166_p_read1 <= p_read;
    grp_master_ip_get_gps_info_from_ubx_fu_166_p_read4 <= p_read2;
    grp_master_ip_get_gps_info_from_ubx_fu_166_p_read5 <= p_read5;
    grp_master_ip_get_gps_info_from_ubx_fu_166_uart_to_coordinates_ck_a_V_read <= uart_to_coordinates_ck_a_V_1_i_reg_466;
    grp_master_ip_get_gps_info_from_ubx_fu_166_uart_to_coordinates_ck_b_V_read <= uart_to_coordinates_ck_b_V_1_i_reg_472;
    grp_master_ip_get_gps_info_from_ubx_fu_166_uart_to_coordinates_current_out_byte_V_read <= uart_to_coordinates_current_ou_reg_459;
    grp_master_ip_get_gps_info_from_ubx_fu_166_uart_to_coordinates_gnss_state_V_read <= uart_to_coordinates_gnss_state_V_read;
    grp_master_ip_get_gps_info_from_ubx_fu_166_uart_to_coordinates_tempCoordinates_0_i <= uart_to_coordinates_tempCoordinates_0_i;
    grp_master_ip_get_gps_info_from_ubx_fu_166_uart_to_coordinates_tempCoordinates_1_i <= uart_to_coordinates_tempCoordinates_1_i;
    grp_master_ip_get_gps_info_from_ubx_fu_166_uart_to_coordinates_tempCoordinates_2_i <= uart_to_coordinates_tempCoordinates_2_i;
    or_cond4_i_fu_226_p2 <= (tmp_86_i_fu_216_p2 and tmp_87_i_fu_221_p2);
    sel_tmp1_fu_251_p2 <= "1" when (uart_to_coordinates_gnss_state_V_read = ap_const_lv6_3E) else "0";
    sel_tmp2_fu_256_p2 <= "1" when (uart_to_coordinates_gnss_state_V_read = ap_const_lv6_3D) else "0";
    sel_tmp3_fu_261_p2 <= "1" when (uart_to_coordinates_gnss_state_V_read = ap_const_lv6_3C) else "0";
    sel_tmp4_fu_266_p2 <= "1" when (uart_to_coordinates_gnss_state_V_read = ap_const_lv6_3B) else "0";
    sel_tmp5_fu_271_p2 <= "1" when (uart_to_coordinates_gnss_state_V_read = ap_const_lv6_3A) else "0";
    sel_tmp6_fu_276_p2 <= "1" when (uart_to_coordinates_gnss_state_V_read = ap_const_lv6_1) else "0";
    sel_tmp7_fu_281_p2 <= "1" when (uart_to_coordinates_gnss_state_V_read = ap_const_lv6_0) else "0";
    sel_tmp8_fu_322_p2 <= (tmp11_fu_316_p2 or tmp8_fu_298_p2);
    sel_tmp_fu_246_p2 <= "1" when (uart_to_coordinates_gnss_state_V_read = ap_const_lv6_3F) else "0";
    tmp10_fu_310_p2 <= (sel_tmp1_fu_251_p2 or sel_tmp7_fu_281_p2);
    tmp11_fu_316_p2 <= (tmp10_fu_310_p2 or tmp9_fu_304_p2);
    tmp6_fu_286_p2 <= (sel_tmp5_fu_271_p2 or sel_tmp6_fu_276_p2);
    tmp7_fu_292_p2 <= (sel_tmp4_fu_266_p2 or sel_tmp3_fu_261_p2);
    tmp8_fu_298_p2 <= (tmp7_fu_292_p2 or tmp6_fu_286_p2);
    tmp9_fu_304_p2 <= (sel_tmp_fu_246_p2 or sel_tmp2_fu_256_p2);
    tmp_85_i_fu_211_p2 <= std_logic_vector(unsigned(tmp_i_fu_207_p2) + unsigned(uart_to_coordinates_ck_b_V_read));
    tmp_86_i_fu_216_p2 <= "1" when (unsigned(uart_to_coordinates_gnss_state_V_read) > unsigned(ap_const_lv6_39)) else "0";
    tmp_87_i_fu_221_p2 <= "1" when (unsigned(uart_to_coordinates_gnss_state_V_read) < unsigned(ap_const_lv6_3C)) else "0";
    tmp_fu_199_p1 <= call_ret6_master_ip_uart_to_byte_fu_183_ap_return_0;
    tmp_i_fu_207_p2 <= std_logic_vector(unsigned(uart_to_coordinates_current_ou_reg_459) + unsigned(uart_to_coordinates_ck_a_V_read));
    uart_to_coordinates_ck_a_V_1_i_fu_328_p3 <= 
        uart_to_coordinates_ck_a_V_rea_fu_232_p3 when (sel_tmp8_fu_322_p2(0) = '1') else 
        tmp_i_fu_207_p2;

    -- uart_to_coordinates_ck_a_V_phi_fu_142_p4 assign process. --
    uart_to_coordinates_ck_a_V_phi_fu_142_p4_assign_proc : process(tmp_reg_455, uart_to_coordinates_ck_a_V_1_i_reg_466, ap_sig_cseq_ST_st3_fsm_2, uart_to_coordinates_ck_a_V_reg_139)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st3_fsm_2) and not((tmp_reg_455 = ap_const_lv1_0)))) then 
            uart_to_coordinates_ck_a_V_phi_fu_142_p4 <= uart_to_coordinates_ck_a_V_1_i_reg_466;
        else 
            uart_to_coordinates_ck_a_V_phi_fu_142_p4 <= uart_to_coordinates_ck_a_V_reg_139;
        end if; 
    end process;

    uart_to_coordinates_ck_a_V_rea_fu_232_p3 <= 
        uart_to_coordinates_ck_a_V_read when (or_cond4_i_fu_226_p2(0) = '1') else 
        ap_const_lv8_0;
    uart_to_coordinates_ck_b_V_1_i_fu_337_p3 <= 
        uart_to_coordinates_ck_b_V_rea_fu_239_p3 when (sel_tmp8_fu_322_p2(0) = '1') else 
        tmp_85_i_fu_211_p2;

    -- uart_to_coordinates_ck_b_V_phi_fu_151_p4 assign process. --
    uart_to_coordinates_ck_b_V_phi_fu_151_p4_assign_proc : process(tmp_reg_455, uart_to_coordinates_ck_b_V_1_i_reg_472, ap_sig_cseq_ST_st3_fsm_2, uart_to_coordinates_ck_b_V_reg_148)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st3_fsm_2) and not((tmp_reg_455 = ap_const_lv1_0)))) then 
            uart_to_coordinates_ck_b_V_phi_fu_151_p4 <= uart_to_coordinates_ck_b_V_1_i_reg_472;
        else 
            uart_to_coordinates_ck_b_V_phi_fu_151_p4 <= uart_to_coordinates_ck_b_V_reg_148;
        end if; 
    end process;

    uart_to_coordinates_ck_b_V_rea_fu_239_p3 <= 
        uart_to_coordinates_ck_b_V_read when (or_cond4_i_fu_226_p2(0) = '1') else 
        ap_const_lv8_0;

    -- uart_to_coordinates_count_V_o assign process. --
    uart_to_coordinates_count_V_o_assign_proc : process(ap_start, ap_sig_cseq_ST_st1_fsm_0, uart_to_coordinates_count_V_i, call_ret6_master_ip_uart_to_byte_fu_183_uart_to_coordinates_count_V_o, call_ret6_master_ip_uart_to_byte_fu_183_uart_to_coordinates_count_V_o_ap_vld)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0) and not((ap_start = ap_const_logic_0)) and (ap_const_logic_1 = call_ret6_master_ip_uart_to_byte_fu_183_uart_to_coordinates_count_V_o_ap_vld))) then 
            uart_to_coordinates_count_V_o <= call_ret6_master_ip_uart_to_byte_fu_183_uart_to_coordinates_count_V_o;
        else 
            uart_to_coordinates_count_V_o <= uart_to_coordinates_count_V_i;
        end if; 
    end process;

    uart_to_coordinates_count_V_o_ap_vld <= call_ret6_master_ip_uart_to_byte_fu_183_uart_to_coordinates_count_V_o_ap_vld;

    -- uart_to_coordinates_gnss_state_phi_fu_160_p4 assign process. --
    uart_to_coordinates_gnss_state_phi_fu_160_p4_assign_proc : process(tmp_reg_455, grp_master_ip_get_gps_info_from_ubx_fu_166_ap_return_0, ap_sig_cseq_ST_st3_fsm_2, uart_to_coordinates_gnss_state_reg_157)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st3_fsm_2) and not((tmp_reg_455 = ap_const_lv1_0)))) then 
            uart_to_coordinates_gnss_state_phi_fu_160_p4 <= grp_master_ip_get_gps_info_from_ubx_fu_166_ap_return_0;
        else 
            uart_to_coordinates_gnss_state_phi_fu_160_p4 <= uart_to_coordinates_gnss_state_reg_157;
        end if; 
    end process;


    -- uart_to_coordinates_next_out_byte_V_o assign process. --
    uart_to_coordinates_next_out_byte_V_o_assign_proc : process(ap_start, ap_sig_cseq_ST_st1_fsm_0, uart_to_coordinates_next_out_byte_V_i, call_ret6_master_ip_uart_to_byte_fu_183_uart_to_coordinates_next_out_byte_V_o, call_ret6_master_ip_uart_to_byte_fu_183_uart_to_coordinates_next_out_byte_V_o_ap_vld)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0) and not((ap_start = ap_const_logic_0)) and (ap_const_logic_1 = call_ret6_master_ip_uart_to_byte_fu_183_uart_to_coordinates_next_out_byte_V_o_ap_vld))) then 
            uart_to_coordinates_next_out_byte_V_o <= call_ret6_master_ip_uart_to_byte_fu_183_uart_to_coordinates_next_out_byte_V_o;
        else 
            uart_to_coordinates_next_out_byte_V_o <= uart_to_coordinates_next_out_byte_V_i;
        end if; 
    end process;

    uart_to_coordinates_next_out_byte_V_o_ap_vld <= call_ret6_master_ip_uart_to_byte_fu_183_uart_to_coordinates_next_out_byte_V_o_ap_vld;

    -- uart_to_coordinates_previous_input_V_o assign process. --
    uart_to_coordinates_previous_input_V_o_assign_proc : process(ap_start, ap_sig_cseq_ST_st1_fsm_0, uart_to_coordinates_previous_input_V_i, call_ret6_master_ip_uart_to_byte_fu_183_uart_to_coordinates_previous_input_V_o, call_ret6_master_ip_uart_to_byte_fu_183_uart_to_coordinates_previous_input_V_o_ap_vld)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0) and not((ap_start = ap_const_logic_0)) and (ap_const_logic_1 = call_ret6_master_ip_uart_to_byte_fu_183_uart_to_coordinates_previous_input_V_o_ap_vld))) then 
            uart_to_coordinates_previous_input_V_o <= call_ret6_master_ip_uart_to_byte_fu_183_uart_to_coordinates_previous_input_V_o;
        else 
            uart_to_coordinates_previous_input_V_o <= uart_to_coordinates_previous_input_V_i;
        end if; 
    end process;

    uart_to_coordinates_previous_input_V_o_ap_vld <= call_ret6_master_ip_uart_to_byte_fu_183_uart_to_coordinates_previous_input_V_o_ap_vld;

    -- uart_to_coordinates_tempCoordinates_0_o assign process. --
    uart_to_coordinates_tempCoordinates_0_o_assign_proc : process(uart_to_coordinates_tempCoordinates_0_i, tmp_reg_455, ap_sig_cseq_ST_st2_fsm_1, grp_master_ip_get_gps_info_from_ubx_fu_166_uart_to_coordinates_tempCoordinates_0_o, grp_master_ip_get_gps_info_from_ubx_fu_166_uart_to_coordinates_tempCoordinates_0_o_ap_vld, ap_sig_cseq_ST_st3_fsm_2)
    begin
        if ((((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1) and (ap_const_logic_1 = grp_master_ip_get_gps_info_from_ubx_fu_166_uart_to_coordinates_tempCoordinates_0_o_ap_vld)) or ((ap_const_logic_1 = ap_sig_cseq_ST_st3_fsm_2) and not((tmp_reg_455 = ap_const_lv1_0)) and (ap_const_logic_1 = grp_master_ip_get_gps_info_from_ubx_fu_166_uart_to_coordinates_tempCoordinates_0_o_ap_vld)))) then 
            uart_to_coordinates_tempCoordinates_0_o <= grp_master_ip_get_gps_info_from_ubx_fu_166_uart_to_coordinates_tempCoordinates_0_o;
        else 
            uart_to_coordinates_tempCoordinates_0_o <= uart_to_coordinates_tempCoordinates_0_i;
        end if; 
    end process;

    uart_to_coordinates_tempCoordinates_0_o_ap_vld <= grp_master_ip_get_gps_info_from_ubx_fu_166_uart_to_coordinates_tempCoordinates_0_o_ap_vld;

    -- uart_to_coordinates_tempCoordinates_1_o assign process. --
    uart_to_coordinates_tempCoordinates_1_o_assign_proc : process(uart_to_coordinates_tempCoordinates_1_i, tmp_reg_455, ap_sig_cseq_ST_st2_fsm_1, grp_master_ip_get_gps_info_from_ubx_fu_166_uart_to_coordinates_tempCoordinates_1_o, grp_master_ip_get_gps_info_from_ubx_fu_166_uart_to_coordinates_tempCoordinates_1_o_ap_vld, ap_sig_cseq_ST_st3_fsm_2)
    begin
        if ((((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1) and (ap_const_logic_1 = grp_master_ip_get_gps_info_from_ubx_fu_166_uart_to_coordinates_tempCoordinates_1_o_ap_vld)) or ((ap_const_logic_1 = ap_sig_cseq_ST_st3_fsm_2) and not((tmp_reg_455 = ap_const_lv1_0)) and (ap_const_logic_1 = grp_master_ip_get_gps_info_from_ubx_fu_166_uart_to_coordinates_tempCoordinates_1_o_ap_vld)))) then 
            uart_to_coordinates_tempCoordinates_1_o <= grp_master_ip_get_gps_info_from_ubx_fu_166_uart_to_coordinates_tempCoordinates_1_o;
        else 
            uart_to_coordinates_tempCoordinates_1_o <= uart_to_coordinates_tempCoordinates_1_i;
        end if; 
    end process;

    uart_to_coordinates_tempCoordinates_1_o_ap_vld <= grp_master_ip_get_gps_info_from_ubx_fu_166_uart_to_coordinates_tempCoordinates_1_o_ap_vld;

    -- uart_to_coordinates_tempCoordinates_2_o assign process. --
    uart_to_coordinates_tempCoordinates_2_o_assign_proc : process(uart_to_coordinates_tempCoordinates_2_i, tmp_reg_455, ap_sig_cseq_ST_st2_fsm_1, grp_master_ip_get_gps_info_from_ubx_fu_166_uart_to_coordinates_tempCoordinates_2_o, grp_master_ip_get_gps_info_from_ubx_fu_166_uart_to_coordinates_tempCoordinates_2_o_ap_vld, ap_sig_cseq_ST_st3_fsm_2)
    begin
        if ((((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1) and (ap_const_logic_1 = grp_master_ip_get_gps_info_from_ubx_fu_166_uart_to_coordinates_tempCoordinates_2_o_ap_vld)) or ((ap_const_logic_1 = ap_sig_cseq_ST_st3_fsm_2) and not((tmp_reg_455 = ap_const_lv1_0)) and (ap_const_logic_1 = grp_master_ip_get_gps_info_from_ubx_fu_166_uart_to_coordinates_tempCoordinates_2_o_ap_vld)))) then 
            uart_to_coordinates_tempCoordinates_2_o <= grp_master_ip_get_gps_info_from_ubx_fu_166_uart_to_coordinates_tempCoordinates_2_o;
        else 
            uart_to_coordinates_tempCoordinates_2_o <= uart_to_coordinates_tempCoordinates_2_i;
        end if; 
    end process;

    uart_to_coordinates_tempCoordinates_2_o_ap_vld <= grp_master_ip_get_gps_info_from_ubx_fu_166_uart_to_coordinates_tempCoordinates_2_o_ap_vld;

    -- uart_to_coordinates_uart_state_V_o assign process. --
    uart_to_coordinates_uart_state_V_o_assign_proc : process(ap_start, ap_sig_cseq_ST_st1_fsm_0, uart_to_coordinates_uart_state_V_i, call_ret6_master_ip_uart_to_byte_fu_183_uart_to_coordinates_uart_state_V_o, call_ret6_master_ip_uart_to_byte_fu_183_uart_to_coordinates_uart_state_V_o_ap_vld)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0) and not((ap_start = ap_const_logic_0)) and (ap_const_logic_1 = call_ret6_master_ip_uart_to_byte_fu_183_uart_to_coordinates_uart_state_V_o_ap_vld))) then 
            uart_to_coordinates_uart_state_V_o <= call_ret6_master_ip_uart_to_byte_fu_183_uart_to_coordinates_uart_state_V_o;
        else 
            uart_to_coordinates_uart_state_V_o <= uart_to_coordinates_uart_state_V_i;
        end if; 
    end process;

    uart_to_coordinates_uart_state_V_o_ap_vld <= call_ret6_master_ip_uart_to_byte_fu_183_uart_to_coordinates_uart_state_V_o_ap_vld;
end behav;
