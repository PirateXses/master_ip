

================================================================
== Vivado HLS Report for 'master_ip'
================================================================
* Date:           Wed May 11 13:21:23 2016

* Version:        2015.4 (Build 1412921 on Wed Nov 18 09:58:55 AM 2015)
* Project:        master_ip
* Solution:       solution1
* Product family: zynq
* Target device:  xc7z020clg484-1


================================================================
== Performance Estimates
================================================================
+ Timing (ns): 
    * Summary: 
    +--------+-------+----------+------------+
    |  Clock | Target| Estimated| Uncertainty|
    +--------+-------+----------+------------+
    |ap_clk  |  20.00|     16.41|        2.50|
    +--------+-------+----------+------------+

+ Latency (clock cycles): 
    * Summary: 
    +-----+-----+-----+-----+---------+
    |  Latency  |  Interval | Pipeline|
    | min | max | min | max |   Type  |
    +-----+-----+-----+-----+---------+
    |   35|   38|   36|   39|   none  |
    +-----+-----+-----+-----+---------+

    + Detail: 
        * Instance: 
        N/A

        * Loop: 
        N/A

============================================================
+ Verbose Summary: Synthesis Manager
============================================================
InlineROM: 1
ExposeGlobal: 0
============================================================
+ Verbose Summary: CDFG Model
============================================================
IsTopModel: 1
ResetActiveHigh: 1
IsCombinational: 0
IsDatapathOnly: 0
HasWiredReturn: 1
HasMFsm: 0
HasVarLatency: 1
IsPipeline: 0
IsRtlPipelined: 0
IsInstanceOverlapped: 0
IsDontTouch: 0
HasImplIP: 0
IsGatedGlobalClock: 0


============================================================
+ Verbose Summary: Schedule
============================================================
* Number of FSM states: 35
* Pipeline: 0
* Dataflow Pipeline: 0

* FSM state transitions: 
1 --> 
	2  / true
2 --> 
	3  / true
3 --> 
	4  / true
4 --> 
	5  / true
5 --> 
	6  / true
6 --> 
	7  / true
7 --> 
	8  / true
8 --> 
	9  / true
9 --> 
	10  / true
10 --> 
	11  / true
11 --> 
	12  / true
12 --> 
	13  / true
13 --> 
	14  / true
14 --> 
	15  / true
15 --> 
	16  / true
16 --> 
	17  / true
17 --> 
	18  / true
18 --> 
	19  / true
19 --> 
	20  / true
20 --> 
	21  / true
21 --> 
	22  / true
22 --> 
	23  / true
23 --> 
	24  / true
24 --> 
	25  / true
25 --> 
	26  / true
26 --> 
	27  / true
27 --> 
	28  / true
28 --> 
	29  / true
29 --> 
	30  / true
30 --> 
	31  / true
31 --> 
	32  / true
32 --> 
	33  / true
33 --> 
	34  / true
34 --> 
	35  / true
35 --> 
* FSM state operations: 

 <State 1>: 13.11ns
ST_1: uart1_V_read [1/1] 0.00ns
_ifconv:10  %uart1_V_read = call i1 @_ssdm_op_Read.ap_none.i1P(i1* %uart1_V)

ST_1: signal1_ck_a_V_load [1/1] 0.00ns
_ifconv:11  %signal1_ck_a_V_load = load i8* @signal1_ck_a_V, align 1

ST_1: signal1_ck_b_V_load [1/1] 0.00ns
_ifconv:12  %signal1_ck_b_V_load = load i8* @signal1_ck_b_V, align 1

ST_1: signal1_current_out_byte_V_loa [1/1] 0.00ns
_ifconv:13  %signal1_current_out_byte_V_loa = load i8* @signal1_current_out_byte_V, align 1

ST_1: signal1_gnss_state_V_load [1/1] 0.00ns
_ifconv:14  %signal1_gnss_state_V_load = load i6* @signal1_gnss_state_V, align 1

ST_1: coordinates1_0_load [1/1] 0.00ns
_ifconv:15  %coordinates1_0_load = load i32* @coordinates1_0, align 4

ST_1: coordinates1_1_load [1/1] 0.00ns
_ifconv:16  %coordinates1_1_load = load i32* @coordinates1_1, align 4

ST_1: coordinates1_2_load [1/1] 0.00ns
_ifconv:17  %coordinates1_2_load = load i32* @coordinates1_2, align 4

ST_1: call_ret [2/2] 13.11ns
_ifconv:18  %call_ret = call fastcc { i8, i8, i8, i6, i32, i32, i32 } @master_ip_mainFunction(i16* @signal1_count_V, i1* @signal1_previous_input_V, i4* @signal1_uart_state_V, i8* @signal1_next_out_byte_V, i8 %signal1_current_out_byte_V_loa, i6 %signal1_gnss_state_V_load, i8 %signal1_ck_a_V_load, i8 %signal1_ck_b_V_load, i32* @signal1_tempCoordinates_0, i32* @signal1_tempCoordinates_1, i32* @signal1_tempCoordinates_2, i1 %uart1_V_read, i32 %coordinates1_0_load, i32 %coordinates1_1_load, i32 %coordinates1_2_load)

ST_1: uart2_V_read [1/1] 0.00ns
_ifconv:33  %uart2_V_read = call i1 @_ssdm_op_Read.ap_none.i1P(i1* %uart2_V)

ST_1: signal2_ck_a_V_load [1/1] 0.00ns
_ifconv:34  %signal2_ck_a_V_load = load i8* @signal2_ck_a_V, align 1

ST_1: signal2_ck_b_V_load [1/1] 0.00ns
_ifconv:35  %signal2_ck_b_V_load = load i8* @signal2_ck_b_V, align 1

ST_1: signal2_current_out_byte_V_loa [1/1] 0.00ns
_ifconv:36  %signal2_current_out_byte_V_loa = load i8* @signal2_current_out_byte_V, align 1

ST_1: signal2_gnss_state_V_load [1/1] 0.00ns
_ifconv:37  %signal2_gnss_state_V_load = load i6* @signal2_gnss_state_V, align 1

ST_1: coordinates2_0_load [1/1] 0.00ns
_ifconv:38  %coordinates2_0_load = load i32* @coordinates2_0, align 4

ST_1: coordinates2_1_load [1/1] 0.00ns
_ifconv:39  %coordinates2_1_load = load i32* @coordinates2_1, align 4

ST_1: coordinates2_2_load [1/1] 0.00ns
_ifconv:40  %coordinates2_2_load = load i32* @coordinates2_2, align 4

ST_1: call_ret1 [2/2] 13.11ns
_ifconv:41  %call_ret1 = call fastcc { i8, i8, i8, i6, i32, i32, i32 } @master_ip_mainFunction(i16* @signal2_count_V, i1* @signal2_previous_input_V, i4* @signal2_uart_state_V, i8* @signal2_next_out_byte_V, i8 %signal2_current_out_byte_V_loa, i6 %signal2_gnss_state_V_load, i8 %signal2_ck_a_V_load, i8 %signal2_ck_b_V_load, i32* @signal2_tempCoordinates_0, i32* @signal2_tempCoordinates_1, i32* @signal2_tempCoordinates_2, i1 %uart2_V_read, i32 %coordinates2_0_load, i32 %coordinates2_1_load, i32 %coordinates2_2_load)


 <State 2>: 9.23ns
ST_2: call_ret [1/2] 6.79ns
_ifconv:18  %call_ret = call fastcc { i8, i8, i8, i6, i32, i32, i32 } @master_ip_mainFunction(i16* @signal1_count_V, i1* @signal1_previous_input_V, i4* @signal1_uart_state_V, i8* @signal1_next_out_byte_V, i8 %signal1_current_out_byte_V_loa, i6 %signal1_gnss_state_V_load, i8 %signal1_ck_a_V_load, i8 %signal1_ck_b_V_load, i32* @signal1_tempCoordinates_0, i32* @signal1_tempCoordinates_1, i32* @signal1_tempCoordinates_2, i1 %uart1_V_read, i32 %coordinates1_0_load, i32 %coordinates1_1_load, i32 %coordinates1_2_load)

ST_2: newret [1/1] 0.00ns
_ifconv:19  %newret = extractvalue { i8, i8, i8, i6, i32, i32, i32 } %call_ret, 0

ST_2: newret4 [1/1] 0.00ns
_ifconv:20  %newret4 = extractvalue { i8, i8, i8, i6, i32, i32, i32 } %call_ret, 1

ST_2: newret5 [1/1] 0.00ns
_ifconv:21  %newret5 = extractvalue { i8, i8, i8, i6, i32, i32, i32 } %call_ret, 2

ST_2: newret6 [1/1] 0.00ns
_ifconv:22  %newret6 = extractvalue { i8, i8, i8, i6, i32, i32, i32 } %call_ret, 3

ST_2: newret7 [1/1] 0.00ns
_ifconv:23  %newret7 = extractvalue { i8, i8, i8, i6, i32, i32, i32 } %call_ret, 4

ST_2: newret8 [1/1] 0.00ns
_ifconv:24  %newret8 = extractvalue { i8, i8, i8, i6, i32, i32, i32 } %call_ret, 5

ST_2: newret9 [1/1] 0.00ns
_ifconv:25  %newret9 = extractvalue { i8, i8, i8, i6, i32, i32, i32 } %call_ret, 6

ST_2: stg_62 [1/1] 0.00ns
_ifconv:26  store i32 %newret7, i32* @coordinates1_0, align 4

ST_2: stg_63 [1/1] 0.00ns
_ifconv:27  store i32 %newret8, i32* @coordinates1_1, align 4

ST_2: stg_64 [1/1] 0.00ns
_ifconv:28  store i32 %newret9, i32* @coordinates1_2, align 4

ST_2: stg_65 [1/1] 0.00ns
_ifconv:29  store i8 %newret5, i8* @signal1_current_out_byte_V, align 1

ST_2: stg_66 [1/1] 0.00ns
_ifconv:30  store i6 %newret6, i6* @signal1_gnss_state_V, align 1

ST_2: stg_67 [1/1] 0.00ns
_ifconv:31  store i8 %newret, i8* @signal1_ck_a_V, align 1

ST_2: stg_68 [1/1] 0.00ns
_ifconv:32  store i8 %newret4, i8* @signal1_ck_b_V, align 1

ST_2: call_ret1 [1/2] 6.79ns
_ifconv:41  %call_ret1 = call fastcc { i8, i8, i8, i6, i32, i32, i32 } @master_ip_mainFunction(i16* @signal2_count_V, i1* @signal2_previous_input_V, i4* @signal2_uart_state_V, i8* @signal2_next_out_byte_V, i8 %signal2_current_out_byte_V_loa, i6 %signal2_gnss_state_V_load, i8 %signal2_ck_a_V_load, i8 %signal2_ck_b_V_load, i32* @signal2_tempCoordinates_0, i32* @signal2_tempCoordinates_1, i32* @signal2_tempCoordinates_2, i1 %uart2_V_read, i32 %coordinates2_0_load, i32 %coordinates2_1_load, i32 %coordinates2_2_load)

ST_2: newret1 [1/1] 0.00ns
_ifconv:42  %newret1 = extractvalue { i8, i8, i8, i6, i32, i32, i32 } %call_ret1, 0

ST_2: newret2 [1/1] 0.00ns
_ifconv:43  %newret2 = extractvalue { i8, i8, i8, i6, i32, i32, i32 } %call_ret1, 1

ST_2: newret3 [1/1] 0.00ns
_ifconv:44  %newret3 = extractvalue { i8, i8, i8, i6, i32, i32, i32 } %call_ret1, 2

ST_2: newret10 [1/1] 0.00ns
_ifconv:45  %newret10 = extractvalue { i8, i8, i8, i6, i32, i32, i32 } %call_ret1, 3

ST_2: newret11 [1/1] 0.00ns
_ifconv:46  %newret11 = extractvalue { i8, i8, i8, i6, i32, i32, i32 } %call_ret1, 4

ST_2: newret12 [1/1] 0.00ns
_ifconv:47  %newret12 = extractvalue { i8, i8, i8, i6, i32, i32, i32 } %call_ret1, 5

ST_2: newret13 [1/1] 0.00ns
_ifconv:48  %newret13 = extractvalue { i8, i8, i8, i6, i32, i32, i32 } %call_ret1, 6

ST_2: stg_77 [1/1] 0.00ns
_ifconv:49  store i32 %newret11, i32* @coordinates2_0, align 4

ST_2: stg_78 [1/1] 0.00ns
_ifconv:50  store i32 %newret12, i32* @coordinates2_1, align 4

ST_2: stg_79 [1/1] 0.00ns
_ifconv:51  store i32 %newret13, i32* @coordinates2_2, align 4

ST_2: stg_80 [1/1] 0.00ns
_ifconv:52  store i8 %newret3, i8* @signal2_current_out_byte_V, align 1

ST_2: stg_81 [1/1] 0.00ns
_ifconv:53  store i6 %newret10, i6* @signal2_gnss_state_V, align 1

ST_2: stg_82 [1/1] 0.00ns
_ifconv:54  store i8 %newret1, i8* @signal2_ck_a_V, align 1

ST_2: stg_83 [1/1] 0.00ns
_ifconv:55  store i8 %newret2, i8* @signal2_ck_b_V, align 1

ST_2: tmp_i [1/1] 2.44ns
_ifconv:56  %tmp_i = sub nsw i32 %newret7, %newret11

ST_2: tmp_96_i [1/1] 2.44ns
_ifconv:59  %tmp_96_i = sub nsw i32 %newret8, %newret12

ST_2: tmp_100_i [1/1] 2.44ns
_ifconv:63  %tmp_100_i = sub nsw i32 %newret9, %newret13


 <State 3>: 16.41ns
ST_3: tmp_i_12 [3/3] 16.41ns
_ifconv:57  %tmp_i_12 = sitofp i32 %tmp_i to double

ST_3: tmp_97_i [3/3] 16.41ns
_ifconv:60  %tmp_97_i = sitofp i32 %tmp_96_i to double


 <State 4>: 16.41ns
ST_4: tmp_i_12 [2/3] 16.41ns
_ifconv:57  %tmp_i_12 = sitofp i32 %tmp_i to double

ST_4: tmp_97_i [2/3] 16.41ns
_ifconv:60  %tmp_97_i = sitofp i32 %tmp_96_i to double


 <State 5>: 16.41ns
ST_5: tmp_i_12 [1/3] 16.41ns
_ifconv:57  %tmp_i_12 = sitofp i32 %tmp_i to double

ST_5: tmp_97_i [1/3] 16.41ns
_ifconv:60  %tmp_97_i = sitofp i32 %tmp_96_i to double


 <State 6>: 13.97ns
ST_6: tmp_95_i [4/4] 13.97ns
_ifconv:58  %tmp_95_i = fmul double %tmp_i_12, %tmp_i_12

ST_6: tmp_98_i [4/4] 13.97ns
_ifconv:61  %tmp_98_i = fmul double %tmp_97_i, %tmp_97_i


 <State 7>: 16.41ns
ST_7: tmp_95_i [3/4] 13.97ns
_ifconv:58  %tmp_95_i = fmul double %tmp_i_12, %tmp_i_12

ST_7: tmp_98_i [3/4] 13.97ns
_ifconv:61  %tmp_98_i = fmul double %tmp_97_i, %tmp_97_i

ST_7: tmp_101_i [3/3] 16.41ns
_ifconv:64  %tmp_101_i = sitofp i32 %tmp_100_i to double


 <State 8>: 16.41ns
ST_8: tmp_95_i [2/4] 13.97ns
_ifconv:58  %tmp_95_i = fmul double %tmp_i_12, %tmp_i_12

ST_8: tmp_98_i [2/4] 13.97ns
_ifconv:61  %tmp_98_i = fmul double %tmp_97_i, %tmp_97_i

ST_8: tmp_101_i [2/3] 16.41ns
_ifconv:64  %tmp_101_i = sitofp i32 %tmp_100_i to double


 <State 9>: 16.41ns
ST_9: tmp_95_i [1/4] 13.97ns
_ifconv:58  %tmp_95_i = fmul double %tmp_i_12, %tmp_i_12

ST_9: tmp_98_i [1/4] 13.97ns
_ifconv:61  %tmp_98_i = fmul double %tmp_97_i, %tmp_97_i

ST_9: tmp_101_i [1/3] 16.41ns
_ifconv:64  %tmp_101_i = sitofp i32 %tmp_100_i to double


 <State 10>: 14.77ns
ST_10: tmp_99_i [4/4] 14.77ns
_ifconv:62  %tmp_99_i = fadd double %tmp_95_i, %tmp_98_i

ST_10: tmp_102_i [4/4] 13.97ns
_ifconv:65  %tmp_102_i = fmul double %tmp_101_i, %tmp_101_i


 <State 11>: 14.77ns
ST_11: tmp_99_i [3/4] 14.77ns
_ifconv:62  %tmp_99_i = fadd double %tmp_95_i, %tmp_98_i

ST_11: tmp_102_i [3/4] 13.97ns
_ifconv:65  %tmp_102_i = fmul double %tmp_101_i, %tmp_101_i


 <State 12>: 14.77ns
ST_12: tmp_99_i [2/4] 14.77ns
_ifconv:62  %tmp_99_i = fadd double %tmp_95_i, %tmp_98_i

ST_12: tmp_102_i [2/4] 13.97ns
_ifconv:65  %tmp_102_i = fmul double %tmp_101_i, %tmp_101_i


 <State 13>: 14.77ns
ST_13: tmp_99_i [1/4] 14.77ns
_ifconv:62  %tmp_99_i = fadd double %tmp_95_i, %tmp_98_i

ST_13: tmp_102_i [1/4] 13.97ns
_ifconv:65  %tmp_102_i = fmul double %tmp_101_i, %tmp_101_i


 <State 14>: 14.77ns
ST_14: tmp_103_i [4/4] 14.77ns
_ifconv:66  %tmp_103_i = fadd double %tmp_99_i, %tmp_102_i


 <State 15>: 14.77ns
ST_15: tmp_103_i [3/4] 14.77ns
_ifconv:66  %tmp_103_i = fadd double %tmp_99_i, %tmp_102_i


 <State 16>: 14.77ns
ST_16: tmp_103_i [2/4] 14.77ns
_ifconv:66  %tmp_103_i = fadd double %tmp_99_i, %tmp_102_i


 <State 17>: 14.77ns
ST_17: tmp_103_i [1/4] 14.77ns
_ifconv:66  %tmp_103_i = fadd double %tmp_99_i, %tmp_102_i


 <State 18>: 14.94ns
ST_18: x_assign [17/17] 14.94ns
_ifconv:67  %x_assign = call double @llvm.sqrt.f64(double %tmp_103_i) nounwind


 <State 19>: 14.94ns
ST_19: x_assign [16/17] 14.94ns
_ifconv:67  %x_assign = call double @llvm.sqrt.f64(double %tmp_103_i) nounwind


 <State 20>: 14.94ns
ST_20: x_assign [15/17] 14.94ns
_ifconv:67  %x_assign = call double @llvm.sqrt.f64(double %tmp_103_i) nounwind


 <State 21>: 14.94ns
ST_21: x_assign [14/17] 14.94ns
_ifconv:67  %x_assign = call double @llvm.sqrt.f64(double %tmp_103_i) nounwind


 <State 22>: 14.94ns
ST_22: x_assign [13/17] 14.94ns
_ifconv:67  %x_assign = call double @llvm.sqrt.f64(double %tmp_103_i) nounwind


 <State 23>: 14.94ns
ST_23: x_assign [12/17] 14.94ns
_ifconv:67  %x_assign = call double @llvm.sqrt.f64(double %tmp_103_i) nounwind


 <State 24>: 14.94ns
ST_24: x_assign [11/17] 14.94ns
_ifconv:67  %x_assign = call double @llvm.sqrt.f64(double %tmp_103_i) nounwind


 <State 25>: 14.94ns
ST_25: x_assign [10/17] 14.94ns
_ifconv:67  %x_assign = call double @llvm.sqrt.f64(double %tmp_103_i) nounwind


 <State 26>: 14.94ns
ST_26: x_assign [9/17] 14.94ns
_ifconv:67  %x_assign = call double @llvm.sqrt.f64(double %tmp_103_i) nounwind


 <State 27>: 14.94ns
ST_27: x_assign [8/17] 14.94ns
_ifconv:67  %x_assign = call double @llvm.sqrt.f64(double %tmp_103_i) nounwind


 <State 28>: 14.94ns
ST_28: x_assign [7/17] 14.94ns
_ifconv:67  %x_assign = call double @llvm.sqrt.f64(double %tmp_103_i) nounwind


 <State 29>: 14.94ns
ST_29: x_assign [6/17] 14.94ns
_ifconv:67  %x_assign = call double @llvm.sqrt.f64(double %tmp_103_i) nounwind


 <State 30>: 14.94ns
ST_30: x_assign [5/17] 14.94ns
_ifconv:67  %x_assign = call double @llvm.sqrt.f64(double %tmp_103_i) nounwind


 <State 31>: 14.94ns
ST_31: x_assign [4/17] 14.94ns
_ifconv:67  %x_assign = call double @llvm.sqrt.f64(double %tmp_103_i) nounwind


 <State 32>: 14.94ns
ST_32: x_assign [3/17] 14.94ns
_ifconv:67  %x_assign = call double @llvm.sqrt.f64(double %tmp_103_i) nounwind


 <State 33>: 14.94ns
ST_33: x_assign [2/17] 14.94ns
_ifconv:67  %x_assign = call double @llvm.sqrt.f64(double %tmp_103_i) nounwind


 <State 34>: 14.94ns
ST_34: x_assign [1/17] 14.94ns
_ifconv:67  %x_assign = call double @llvm.sqrt.f64(double %tmp_103_i) nounwind


 <State 35>: 14.47ns
ST_35: stg_133 [1/1] 0.00ns
_ifconv:0  call void (...)* @_ssdm_op_SpecBitsMap(i1* %uart1_V), !map !7

ST_35: stg_134 [1/1] 0.00ns
_ifconv:1  call void (...)* @_ssdm_op_SpecBitsMap(i1* %uart2_V), !map !13

ST_35: stg_135 [1/1] 0.00ns
_ifconv:2  call void (...)* @_ssdm_op_SpecBitsMap(i1* %alert_V), !map !17

ST_35: stg_136 [1/1] 0.00ns
_ifconv:3  call void (...)* @_ssdm_op_SpecBitsMap(i8* %axi_byte_V), !map !21

ST_35: stg_137 [1/1] 0.00ns
_ifconv:4  call void (...)* @_ssdm_op_SpecTopModule([10 x i8]* @master_ip_str) nounwind

ST_35: stg_138 [1/1] 0.00ns
_ifconv:5  call void (...)* @_ssdm_op_SpecInterface(i1* %uart1_V, [8 x i8]* @p_str, i32 0, i32 0, i32 0, i32 0, [1 x i8]* @p_str3, [1 x i8]* @p_str3, [1 x i8]* @p_str3, [1 x i8]* @p_str3) nounwind

ST_35: stg_139 [1/1] 0.00ns
_ifconv:6  call void (...)* @_ssdm_op_SpecInterface(i8* %axi_byte_V, [10 x i8]* @p_str4, i32 0, i32 0, i32 0, i32 0, [1 x i8]* @p_str3, [1 x i8]* @p_str3, [1 x i8]* @p_str3, [1 x i8]* @p_str3) nounwind

ST_35: stg_140 [1/1] 0.00ns
_ifconv:7  call void (...)* @_ssdm_op_SpecInterface(i1* %alert_V, [8 x i8]* @p_str, i32 0, i32 0, i32 0, i32 0, [1 x i8]* @p_str3, [1 x i8]* @p_str3, [1 x i8]* @p_str3, [1 x i8]* @p_str3) nounwind

ST_35: stg_141 [1/1] 0.00ns
_ifconv:8  call void (...)* @_ssdm_op_SpecInterface(i1* %uart2_V, [8 x i8]* @p_str, i32 0, i32 0, i32 0, i32 0, [1 x i8]* @p_str3, [1 x i8]* @p_str3, [1 x i8]* @p_str3, [1 x i8]* @p_str3) nounwind

ST_35: stg_142 [1/1] 0.00ns
_ifconv:9  call void (...)* @_ssdm_op_SpecInterface(i32 0, [13 x i8]* @p_str5, i32 0, i32 0, i32 0, i32 0, [1 x i8]* @p_str3, [1 x i8]* @p_str3, [1 x i8]* @p_str3, [1 x i8]* @p_str3) nounwind

ST_35: p_Val2_s [1/1] 0.00ns
_ifconv:68  %p_Val2_s = bitcast double %x_assign to i64

ST_35: p_Result_s [1/1] 0.00ns
_ifconv:69  %p_Result_s = call i1 @_ssdm_op_BitSelect.i1.i64.i32(i64 %p_Val2_s, i32 63)

ST_35: loc_V [1/1] 0.00ns
_ifconv:70  %loc_V = call i11 @_ssdm_op_PartSelect.i11.i64.i32.i32(i64 %p_Val2_s, i32 52, i32 62) nounwind

ST_35: loc_V_1 [1/1] 0.00ns
_ifconv:71  %loc_V_1 = trunc i64 %p_Val2_s to i52

ST_35: p_Result_1 [1/1] 0.00ns
_ifconv:72  %p_Result_1 = call i53 @_ssdm_op_BitConcatenate.i53.i1.i52(i1 true, i52 %loc_V_1) nounwind

ST_35: tmp_i_i_i [1/1] 0.00ns
_ifconv:73  %tmp_i_i_i = zext i53 %p_Result_1 to i136

ST_35: tmp_i_i_i_i_cast1 [1/1] 0.00ns
_ifconv:74  %tmp_i_i_i_i_cast1 = zext i11 %loc_V to i12

ST_35: sh_assign [1/1] 1.84ns
_ifconv:75  %sh_assign = add i12 -1023, %tmp_i_i_i_i_cast1

ST_35: isNeg [1/1] 0.00ns
_ifconv:76  %isNeg = call i1 @_ssdm_op_BitSelect.i1.i12.i32(i12 %sh_assign, i32 11)

ST_35: tmp_i_i_i_13 [1/1] 1.84ns
_ifconv:77  %tmp_i_i_i_13 = sub i11 1023, %loc_V

ST_35: tmp_i_i_i_cast [1/1] 0.00ns
_ifconv:78  %tmp_i_i_i_cast = sext i11 %tmp_i_i_i_13 to i12

ST_35: sh_assign_1 [1/1] 1.37ns
_ifconv:79  %sh_assign_1 = select i1 %isNeg, i12 %tmp_i_i_i_cast, i12 %sh_assign

ST_35: sh_assign_1_cast [1/1] 0.00ns
_ifconv:80  %sh_assign_1_cast = sext i12 %sh_assign_1 to i32

ST_35: tmp_88_i_i_i [1/1] 0.00ns
_ifconv:81  %tmp_88_i_i_i = zext i32 %sh_assign_1_cast to i136

ST_35: tmp_88_i_i_i_cast [1/1] 0.00ns
_ifconv:82  %tmp_88_i_i_i_cast = zext i32 %sh_assign_1_cast to i53

ST_35: tmp_89_i_i_i [1/1] 3.56ns
_ifconv:83  %tmp_89_i_i_i = lshr i53 %p_Result_1, %tmp_88_i_i_i_cast

ST_35: tmp_91_i_i_i [1/1] 3.56ns
_ifconv:84  %tmp_91_i_i_i = shl i136 %tmp_i_i_i, %tmp_88_i_i_i

ST_35: tmp [1/1] 0.00ns
_ifconv:85  %tmp = call i1 @_ssdm_op_BitSelect.i1.i53.i32(i53 %tmp_89_i_i_i, i32 52)

ST_35: tmp_3 [1/1] 0.00ns
_ifconv:86  %tmp_3 = zext i1 %tmp to i32

ST_35: tmp_4 [1/1] 0.00ns
_ifconv:87  %tmp_4 = call i32 @_ssdm_op_PartSelect.i32.i136.i32.i32(i136 %tmp_91_i_i_i, i32 52, i32 83)

ST_35: p_Val2_3 [1/1] 1.37ns
_ifconv:88  %p_Val2_3 = select i1 %isNeg, i32 %tmp_3, i32 %tmp_4

ST_35: p_Val2_7_i_i_i [1/1] 2.44ns
_ifconv:89  %p_Val2_7_i_i_i = sub i32 0, %p_Val2_3

ST_35: p_Val2_5 [1/1] 1.37ns
_ifconv:90  %p_Val2_5 = select i1 %p_Result_s, i32 %p_Val2_7_i_i_i, i32 %p_Val2_3

ST_35: tmp_s [1/1] 2.52ns
_ifconv:91  %tmp_s = icmp sgt i32 %p_Val2_5, 1000

ST_35: stg_167 [1/1] 0.00ns
_ifconv:92  call void @_ssdm_op_Write.ap_none.i1P(i1* %alert_V, i1 %tmp_s)

ST_35: stg_168 [1/1] 0.00ns
_ifconv:93  ret void



============================================================
+ Verbose Summary: Binding
============================================================
N/A
* FSMD analyzer results:
  - Output states:
  - Chain level:
	State 1
	State 2
	State 3
	State 4
	State 5
	State 6
	State 7
	State 8
	State 9
	State 10
	State 11
	State 12
	State 13
	State 14
	State 15
	State 16
	State 17
	State 18
	State 19
	State 20
	State 21
	State 22
	State 23
	State 24
	State 25
	State 26
	State 27
	State 28
	State 29
	State 30
	State 31
	State 32
	State 33
	State 34
	State 35


============================================================
+ Verbose Summary: Datapath Resource usage 
============================================================
N/A
